


[{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/tags/css/","section":"Tags","summary":"","title":"CSS","type":"tags"},{"content":"إذا كنت ترغب في فهم أعمق لكيفية عمل مواقع الويب والتصميمات، فأنت بحاجة إلى النظر إلى ما وراء الأكواد.\nفي هذه المقالة، سنأخذك في رحلة تبدأ من أدوات المطورين داخل المتصفح، مرورًا بفهم كيفية تحويل المتصفح للنصوص إلى شجرة عناصر، ومن ثم إلى صناديق، وصولاً إلى تطبيق التنسيقات باستخدام CSS.\nستتعلم أيضًا كيفية كتابة القواعد، التعامل مع المحددات، وفهم الأولويات، مما يجعلك تنظر إلى تصميم المواقع بطريقة احترافية وجديدة تمامًا.\nCSS من البداية إلى الاحتراف: كيف تصمم صفحات ويب مرنة ومبهرّة\rأدوات المطورين داخل متصفح الويب #\rتأتي معظم متصفحات الويب مزودة بـ أدوات مطورين (Developer Tools) التي تعدّ أداة قوية لأي مطور ويب. هذه الأدوات تتيح إمكانية تعديل أكواد HTML وCSS مباشرة في المتصفح لرؤية النتائج بشكل لحظي.\nومع ذلك، من المهم أن نوضح أن هذه التعديلات لا تُحفظ تلقائيًا؛ فهي مجرد وسيلة لاستعراض تأثير الأكواد أو اختبار الأفكار على صفحة الويب قيد التطوير.\nكيفية الوصول إلى أدوات المطور #\rكيفية الوصول إلى أدوات المطور\rيمكنك فتح أدوات المطور بسهولة عن طريق النقر بزر الماوس الأيمن على أي جزء من الصفحة ثم اختيار فحص أو Inspect، حسب لغة المتصفح المستخدم. ستظهر نافذة تحتوي على مجموعة من التبويبات، وأهمها هو تبويب Elements.\nأو عن طريق إستخدام الإختصار التالى ctrl + shift + c.\nاستكشاف تبويب Elements - Inspector #\rمن خلال تبويب Elements أو فى بعض المتصفحات ستجدها بإسم Inspector، يمكنك استعراض أكواد HTML وCSS الخاصة بالصفحة. يمكن إجراء العديد من التعديلات، مثل:\nتغيير ألوان النصوص والخلفيات. تعديل أحجام الخطوط وعناصر الصفحة. تفعيل أو تعطيل خصائص CSS باستخدام مربع الاختيار (Checkbox) بجوار كل خاصية. استخدام أدوات المطور بشكل منتظم سيساعدك على فهم كيفية عمل المواقع بشكل أعمق وتحسين مهاراتك كمطور ويب محترف.\nمن النصوص إلى الشجر (Text to Trees) #\rمن النصوص إلى الشجر (Text to Trees)\rعندما تقوم بكتابة مستند HTML وتعرضه في المتصفح، يختلف العرض عما كتبته في صفحة الكود. هذا يعود إلى وجود عملية تحويل داخلية تُسمى DOM أو Document Object Model.\nيقوم المتصفح بتحويل كود HTML إلى شجرة من الأكواد ليتمكن من تفسيره بشكل صحيح. على سبيل المثال:\nالقوائم المرقمة في HTML تُحوَّل تلقائيًا إلى عناصر تحمل أرقامًا، حتى وإن لم تكن هذه الأرقام مكتوبة في الكود الأصلي. القوائم المرقمة في HTML\rبنية الشجرة (Tree Structure) #\rبنية الشجرة ليست مفهومًا خاصًا بـ HTML فقط، بل هو جزء أساسي في علوم الحاسوب. تتكون الشجرة من أجزاء تُعرف بـ Nodes، تربط بينها علاقات تُسمى Branches.\nمثال توضيحي\nلنتخيل شقة تحتوي على غرف متعددة:\nغرفة النوم تحتوي على سرير ودولاب. السرير يحتوي على مخدة، والدولاب يحتوي على أرفف. كل عنصر هنا يمثل Node، والأسهم التي تربط بين هذه العناصر هي Branches.\nبنفس الطريقة، تُكتب أكواد HTML وفق بنية الشجرة. على سبيل المثال:\nالجذر (Root Node) هو الوسم \u0026lt;html\u0026gt;. يحتوي الجذر على وسمي \u0026lt;head\u0026gt; و \u0026lt;body\u0026gt;. داخل \u0026lt;head\u0026gt; يمكن أن نجد وسم \u0026lt;title\u0026gt;. داخل \u0026lt;body\u0026gt; يمكن أن نجد فقرات وقوائم وعناصر أخرى. بنية الشجرة (Tree Structure)\rالقواعد الأساسية لبنية الشجرة: #\rيجب أن تحتوي الشجرة على جذر واحد فقط. كل Node يمكن أن تحتوي على فروع تؤدي إلى عقد فرعية (Nodes أخرى). كل Node لها والد واحد فقط باستثناء الجذر. من الشجر إلى الصناديق (Trees to Boxes) #\rمن الشجر إلى الصناديق (Trees to Boxes)\rبعد تحويل المتصفح لكود HTML إلى شجرة (Tree Structure)، يتم تحويل هذه الشجرة إلى صناديق (Boxes) تظهر على شاشة المستخدم.\nكل Node في الشجرة تُحوَّل إلى صندوق، وقد يحتوي الصندوق على صناديق أصغر داخله أو يكون جزءًا من صندوق أكبر.\nمثال عملي\nلنفترض كتابة الكود التالي:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Two\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Three\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; يتم تحويل القائمة \u0026lt;ul\u0026gt; إلى صندوق كبير. كل عنصر \u0026lt;li\u0026gt; يُمثّل صندوقًا أصغر داخل الصندوق الكبير. بمساعدة CSS، يمكن تعديل كيفية عرض هذه الصناديق، مثل وضعها بجانب بعضها البعض بدلاً من ترتيبها عموديًا.\nقواعد كتابة CSS (CSS Syntax) #\rتتكون قاعدة CSS من جزأين رئيسيين: المحدد (Selector) وكتلة التصريح (Declaration Block).\nالمحدد هو الجزء الذي يحدد العناصر في HTML التي سيتم تطبيق القاعدة عليها. كتلة التصريح تحتوي على التعليمات التي تحدد كيفية تعديل هذه العناصر. قواعد كتابة CSS (CSS Syntax)\rعلى سبيل المثال، إذا أردنا تحويل جميع العناصر \u0026lt;li\u0026gt; إلى اللون الأخضر، فالمحدد سيكون li، وكتلة التصريح تحتوي على:\ncolor: green; كيفية كتابة قواعد CSS #\rتُكتب قواعد CSS بالصيغة التالية:\nيبدأ بـ المحدد، وهو الجزء الذي يحدد العناصر المستهدفة. يتم استخدام الأقواس {} لتحديد كتلة التصريح. داخل الأقواس، توضع التصريحات (Declarations)، وكل تصريح يتكون من: الخاصية (Property): مثل color أو font-size. القيمة (Value): مثل green أو larger. تنتهي كل تصريح بـ فاصلة منقوطة (;). أمثلة:\nالمثال الأول: تنسيق جميع عناصر الفقرة \u0026lt;p\u0026gt;: في هذا المثال:\nالمحدد: p (يطبق التنسيق على جميع الفقرات). التصريحات: color: purple; وfont-size: larger;. p { color: purple; font-size: larger; } المثال الثاني: تنسيق العناصر التي تحمل الفئة (Class) \u0026ldquo;weird\u0026rdquo;: .weird { width: 50%; color: blue; } هنا، يتم استهداف العناصر باستخدام النقطة (.) متبوعة باسم الفئة.\nتطبيق التنسيقات مباشرة على HTML (Styling HTML Directly) #\r1. التنسيق باستخدام السمة style #\rيمكنك تطبيق التنسيقات مباشرة على عناصر HTML باستخدام السمة style.\nعلى سبيل المثال، إذا كنت تريد تغيير لون جميع العناصر \u0026lt;li\u0026gt; إلى الأخضر، يمكنك كتابة:\n\u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 3\u0026lt;/li\u0026gt; عيوب هذه الطريقة\nالتكرار: تحتاج إلى إضافة السمة لكل عنصر بشكل يدوي، مما يسبب الكثير من العمل المكرر. التعقيد: إذا حدث خطأ في أحد العناصر، سيكون من الصعب اكتشافه وتصحيحه. الصيانة: إجراء تغييرات على التنسيقات يصبح مرهقًا إذا احتجت إلى تعديل جميع العناصر يدويًا. 2. الحل: استخدام CSS لتجنب التكرار #\rيمكنك تجنب هذه العيوب باستخدام CSS لتطبيق القواعد بشكل مركزي. بدلاً من تحديد السمة style لكل عنصر، يمكنك:\nإنشاء قاعدة CSS داخل عنصر \u0026lt;style\u0026gt; في \u0026lt;head\u0026gt;: \u0026lt;style\u0026gt; li { color: green; } \u0026lt;/style\u0026gt; ستُطبق هذه القاعدة على جميع عناصر \u0026lt;li\u0026gt; في الصفحة تلقائيًا. كيف يعمل المتصفح؟ #\rأثناء بناء الصفحة، يستخدم المتصفح الشجرة (DOM Tree) لتحديد العناصر وتطبيق القواعد. تقوم CSS بتحديد الألوان، والأشكال، وتخطيطات الصفحة بناءً على هذه القواعد.\nأنواع المحددات (Selectors Type) #\rفي CSS، المحددات (Selectors) هي الطريقة التي تُخبر بها المتصفح بالعناصر التي ترغب في تطبيق القواعد عليها. أبسط أنواع المحددات هو محدد النوع (Type Selector)، الذي يُستخدم لتحديد عنصر معين بناءً على اسمه في HTML، مثل p (للفقرات) أو em (للنص المائل)، وحتى body (لتطبيق النمط على كامل المستند).\nكيفية استخدام محدد النوع #\rعلى سبيل المثال، يمكننا كتابة قاعدة CSS تُغير خط النصوص في المستند بالكامل:\nbody { font-family: Arial, sans-serif; color: #333; } هذه القاعدة ستجعل الخط المستخدم في المستند كله هو Arial، وسيكون لون النص رماديًا داكنًا.\nأهمية محدد النوع #\rتطبيق واسع النطاق: إذا كنت تكتب مقالًا يحتوي على العديد من العناوين مثل h1 وh2، يمكنك استخدام محدد النوع لتطبيق الأنماط على جميع العناصر من نوع معين دفعة واحدة. سهولة الاستخدام: بدلاً من كتابة أنماط منفصلة لكل عنصر، يمكن استخدام قاعدة واحدة لتغطية جميع العناصر من النوع نفسه: h1 { font-size: 24px; font-weight: bold; } h2 { font-size: 20px; font-weight: bold; } المحددات: الفئات (Class) والمعرفات (ID) #\rليس من الضروري دائمًا تطبيق النمط نفسه على جميع العناصر من النوع نفسه. على سبيل المثال، إذا كان لديك مقال يحتوي على شريط جانبي، قد ترغب في تخصيص أنماط مختلفة للفقرات الموجودة داخل المقال مقارنةً بالشريط الجانبي.\nما هي الفئة (Class)؟ #\rالفئة هي سمة تُضاف إلى العلامات في HTML لتحديد مجموعة من العناصر التي تتشارك نفس الخصائص. تُكتب الفئة في CSS باستخدام النقطة (.) متبوعة باسم الفئة:\n\u0026lt;p class=\u0026#34;article-text\u0026#34;\u0026gt;هذا نص في المقال.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;sidebar-text\u0026#34;\u0026gt;هذا نص في الشريط الجانبي.\u0026lt;/p\u0026gt; .article-text { color: #000; } .sidebar-text { color: #777; } ما هو المعرف (ID)؟ #\rالمعرف مشابه للفئة ولكنه مخصص لعناصر فريدة. يجب أن يكون لكل معرف قيمة واحدة فقط على الصفحة. يُكتب المعرف في CSS باستخدام علامة الشباك (#):\n\u0026lt;p id=\u0026#34;main-heading\u0026#34;\u0026gt;هذا عنوان رئيسي.\u0026lt;/p\u0026gt; #main-heading { font-size: 28px; text-align: center; } الفرق بين Class وID #\rالفئة: تُستخدم لعناصر متعددة. المعرف: يُستخدم لعناصر فريدة. دمج المحددات (Combining Selectors) #\rCSS يسمح بدمج المحددات لتطبيق أنماط محددة على عناصر وفقًا لتسلسلها أو علاقتها بعناصر أخرى. على سبيل المثال:\nli em { color: red; } هذا النمط يُطبق على العناصر المائلة (em) الموجودة داخل عناصر القائمة (li). إذا كانت لديك الشيفرة التالية:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;em\u0026gt;عنصر مميز\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;عنصر عادي\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; سيتم تطبيق النمط الأحمر على النص داخل العنصر المائل فقط.\nأنواع أخرى من المحددات المدمجة #\rالمحدد التنازلي (Descendant Selector): يستهدف جميع العناصر الفرعية لعناصر معينة. المحدد المباشر (Child Selector): يستهدف العناصر المباشرة فقط. لماذا يُطلق عليه \u0026ldquo;Cascading\u0026rdquo;؟ #\r\u0026ldquo;التدرج\u0026rdquo; في CSS يُشير إلى الطريقة التي يتم بها تحديد الأنماط لكل عنصر بناءً على العلاقات بين العقد (Nodes) في شجرة DOM.\nكيف تعمل القواعد المتدرجة؟ #\rعندما يتم تحديد قاعدة لعقدة (Node) معينة، فإن الأنماط تُورَّث إلى جميع العقد الفرعية ما لم يتم تجاوزها:\nbody { color: #333; } h1 { color: orange; } em { color: red; } العقدة الرئيسية (body): جميع النصوص تبدأ بلون رمادي غامق. العناوين (h1): تُكتسب لونًا برتقاليًا. النص المائل (em): يُطبق عليه اللون الأحمر إذا لم يتم تجاوز القاعدة. أولوية الأنماط #\rعند وجود تعارض بين القواعد، يتم تطبيق الأنماط وفقًا لمبدأ الأولوية:\nالأنماط المعرّفة داخل العنصر (Inline). الأنماط ذات المحددات الأكثر تحديدًا. الأنماط العامة. CSS أداة قوية جدًا لتنسيق صفحات الويب، وفهم كيفية عمل المحددات (Selectors) ومفهوم التدرج (Cascading) يُساعد في إنشاء مواقع أكثر تنظيمًا وفعالية. إذا كنت ترغب في التعمق أكثر، راجع دليل CSS الشامل من Mozilla.\nدليل شامل حول وحدات CSS، الصناديق، النسب المئوية. #\r1. وحدات CSS: فهم الأساسيات #\rCSS (أوراق الأنماط المتتالية) تمنحك القدرة على تعديل تخطيط العناصر على الصفحة من حيث الحجم، والشكل، والموقع. لفهم موقع العناصر وكيفية تنظيمها، نحتاج إلى وحدات قياس.\nالوحدات الأساسية في CSS:\nالبكسل (PX): هي وحدة القياس الأساسية. في CSS، يتم تعريف البكسل على أنه 1/96 من البوصة، بغض النظر عن دقة الشاشة. النقاط (PT): تُستخدم بشكل أساسي في تحديد أحجام الخطوط، حيث تمثل النقطة 1/72 من البوصة. الوحدات النسبية (EM وREM): EM: تعتمد على حجم خط العنصر الأب. REM: تعتمد على حجم الخط الأساسي (Root). مثال عملي:\n.skinny { width: 192px; /* عرض العنصر */ height: auto; } العنصر ذو الكلاس skinny سيظهر بعرض 2 بوصة (192 بكسل).\n2. مفهوم الصناديق في CSS #\rعند عرض HTML، يحتوي كل عنصر على \u0026ldquo;صندوق\u0026rdquo; غير مرئي يمكن تعديله باستخدام CSS. العناصر الأساسية التي يمكنك ضبطها تشمل:\nالحجم: العرض (width) والارتفاع (height). الحواف الداخلية (Padding): المسافة بين المحتوى وحدود العنصر. الإطار (Border): يمكن تحديد سمكه، لونه، ونمطه. الهامش (Margin): المسافة بين العنصر والعناصر المحيطة. مثال عملي:\n.box { width: 100px; height: 50px; border: 5px solid green; margin: 1em; padding: 0.5em; } هذا الكود ينشئ صندوقًا بعرض 100 بكسل، ارتفاع 50 بكسل، وإطار أخضر، مع إضافة مسافات داخلية وهامش خارجي.\n3. النسب المئوية في CSS #\rتتيح CSS تحديد القيم كنسبة مئوية من حجم العنصر الأب. على سبيل المثال:\nعند تحديد عرض عنصر بنسبة 50%، سيأخذ نصف عرض العنصر الأب. الحدود والحشوات: يجب مراعاة أن النسب المئوية لا تشمل الإطار والحشوة. مثال عملي:\n.parent { width: 500px; } .child { width: 50%; /* نصف عرض العنصر الأب */ } 4. فصل التنسيقات عن الهيكل #\rلحفظ الجهد وتحسين إدارة المشروع، يمكن وضع تنسيقات CSS في ملف منفصل وربطه بملف HTML باستخدام العنصر \u0026lt;link\u0026gt;.\nمثال عملي:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; هذا النهج يجعل التحديثات أسهل ويعزز قابلية إعادة الاستخدام.\nمقدمة حول الخطوط في CSS #\rالخطوط تلعب دورًا كبيرًا في تحسين تجربة المستخدم وجعل الموقع مميزًا بصريًا. باستخدام CSS، يمكنك التحكم الكامل في مظهر النصوص على موقعك، من اختيار نوع الخط إلى تحديد حجمه وأسلوبه.\nما هو الخط في CSS؟ #\rفي عالم CSS، ما نعرفه بالخط (Font) يُعرف باسم عائلة الخط (Font Family)، وهي تشير إلى نوع الخط مثل \u0026ldquo;Times New Roman\u0026rdquo;، \u0026ldquo;Helvetica\u0026rdquo;، أو \u0026ldquo;Impact\u0026rdquo;. عند تطبيق قاعدة font-family على عنصر معين، سيعرض النص باستخدام هذا الخط إذا كان متوفرًا على جهاز المستخدم. في حال عدم توفره، سيعود النص إلى الخط الافتراضي الذي يكون عادةً خطًا بسيطًا وغير معقد مثل \u0026ldquo;Times\u0026rdquo;.\nلتجنب المشاكل الناتجة عن عدم توفر الخطوط، يمكنك استخدام مجموعة من الخطوط تسمى \u0026ldquo;كدسة الخطوط (Font Stack)\u0026rdquo;. على سبيل المثال:\nfont-family: \u0026#34;Constantia\u0026#34;, \u0026#34;Georgia\u0026#34;, serif; في هذا المثال، إذا لم يكن الخط \u0026ldquo;Constantia\u0026rdquo; متاحًا، فسيتم استخدام \u0026ldquo;Georgia\u0026rdquo;، وإذا لم يكن أي منهما متاحًا، سيتم استخدام أي خط \u0026ldquo;Serif\u0026rdquo;.\nالخطوط العامة (Generic Font Families) #\rCSS يوفر خمس عائلات خطوط عامة يمكنك الاعتماد عليها كخطة احتياطية:\nSerif: خطوط بحواف مزخرفة. Sans-serif: خطوط بسيطة دون زخارف. Monospace: خطوط بعرض ثابت لكل حرف. Cursive: خطوط مائلة تشبه الكتابة اليدوية. Fantasy: خطوط زخرفية. التحكم في خصائص الخطوط #\rCSS يتيح لك التحكم في خصائص إضافية للخطوط:\nحجم الخط: باستخدام الخاصية font-size. يمكنك استخدام وحدات مثل px، em، أو حتى rem. سمك الخط: باستخدام الخاصية font-weight مثل bold. ميل الخط: باستخدام الخاصية font-style مثل italic. إضافة خط تحت النص: باستخدام الخاصية text-decoration مثل underline. كتابة خصائص الخط في سطر واحد #\rلدمج جميع خصائص الخط في سطر واحد، يمكنك استخدام الخاصية font. ولكن يجب الالتزام بترتيب معين:\nfont: italic bold 16px/1.5 \u0026#34;Helvetica\u0026#34;, sans-serif; في هذا المثال:\nitalic لتحديد الميل. bold لتحديد السمك. 16px لتحديد الحجم. 1.5 لتحديد ارتفاع السطر. \u0026ldquo;Helvetica\u0026rdquo;, sans-serif لتحديد عائلة الخط. Flexbox: تصميم مرن مع CSS #\rتقنيات التخطيط الافتراضية للمتصفحات كانت تعتمد على تصميم المستندات التقليدية، حيث يتم ترتيب العناصر رأسيًا من الأعلى إلى الأسفل. ومع ذلك، تطورت تقنيات الويب وأصبحت تتطلب تصاميم أكثر مرونة، وهو ما يتيحه Flexbox.\nFlexbox يتيح تصميمًا ديناميكيًا يتكيف مع أحجام الشاشات المختلفة، مما يجعله مثاليًا لتصميم مواقع متجاوبة.\nالمزايا الأساسية لـ Flexbox #\rترتيب العناصر أفقياً: بمجرد تعيين الخاصية display: flex على الحاوية، سيتم ترتيب العناصر داخلها أفقيًا. التفاف العناصر (Wrapping): باستخدام الخاصية flex-wrap: wrap، يمكن للعناصر الانتقال إلى سطر جديد إذا لم تكن المساحة كافية. توزيع المساحات: باستخدام الخصائص justify-content وalign-items، يمكنك التحكم في محاذاة العناصر وتوزيع المساحات بينها. تصميم لعبة XO بدون استخدام Flexbox #\rهل سبق لك أن تساءلت كيف يمكن تصميم لوحة لعبة XO باستخدام أدوات بسيطة في CSS؟ دعنا ننطلق في تمرين ممتع نستعرض فيه الطريقة التقليدية لتصميم لوحة اللعبة، ثم نقارنها لاحقًا مع تصميم باستخدام Flexbox لنستوعب الفارق.\nالخطوة الأولى: بناء الهيكل باستخدام HTML سنبدأ بإنشاء ملف HTML يحتوي على عناصر اللعبة: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;XO Game\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; الخطوة الثانية: تصميم باستخدام CSS سنضيف القليل من التنسيق لجعل العناصر تبدو وكأنها جزء من لعبة حقيقية: body { background-color: #333; color: #ccc; } ul { width: 300px; height: 300px; margin: auto; } li { width: 90px; height: 90px; margin: 5px; float: left; list-style: none; font-size: 70px; font-family: sans-serif; text-align: center; background-color: lightgray; color: blue; } النتيجة النهائية: عند فتح الملف في المتصفح، ستحصل على شبكة تحاكي لوحة لعبة XO، لكنها تعتمد على التقنية التقليدية المتمثلة باستخدام float لترتيب العناصر. XO game\rتصميم لعبة XO باستخدام Flexbox #\rالآن، دعونا نستعرض الطريقة الحديثة والفعالة لتصميم نفس لوحة اللعبة باستخدام CSS Flexbox. ستندهش من سهولة ومرونة هذه الطريقة مقارنة بالطريقة التقليدية.\nالخطوة الأولى: إعداد التصميم باستخدام Flexbox باستخدام Flexbox، سنعيد تصميم لوحة اللعبة بشكل أكثر تنظيمًا وأقل تعقيدًا: body { background-color: #333; color: #ccc; display: flex; justify-content: center; align-items: center; height: 100vh; } ul { width: 300px; height: 300px; display: flex; flex-wrap: wrap; } li { width: 90px; height: 90px; margin: 5px; display: flex; justify-content: center; align-items: center; list-style: none; font-size: 70px; font-family: sans-serif; background-color: lightgray; color: blue; } النتيجة النهائية: تصميم أنيق ومرن يمكن تعديله بسهولة ليناسب أحجام شاشات مختلفة، مما يجعله مثاليًا لمتطلبات الويب الحديثة. XO game\rما يجعل Flexbox مميزًا:\ndisplay: flex ينشئ نظامًا مرنًا لترتيب العناصر. flex-wrap: wrap يضمن انتقال العناصر إلى السطر التالي بشكل تلقائي. justify-content: center و align-items: center تجعل المربعات والنصوص متوسطة بسهولة. من خلال مقارنة الطريقتين، يمكننا رؤية قوة ومرونة Flexbox مقارنة بالطريقة التقليدية. التصميم باستخدام Flexbox ليس فقط أسهل، ولكنه أيضًا يفتح آفاقًا أكبر لإضافة التحسينات والتكيف مع تصميمات متجاوبة بشكل مثالي.\nالخاتمة #\rتهانينا! لقد قمت برحلة شيقة عبر أعماق أدوات المطورين في المتصفح وبنية الشجرة إلى الصناديق. وتقدمت خطوة أخرى فى عالم تطوير الويب.\nتعرفت على كيفية كتابة قواعد CSS وفهم المحددات بأنواعها وأهميتها، واطلعت على كيفية استخدام Flexbox لتحقيق تصميمات مرنة وجذابة.\nمع هذه المعرفة، أنت الآن مستعد لتطبيقها في مشاريعك القادمة كمطور فرونت إند بثقة واحترافية. تذكر، الإبداع يبدأ بالفهم، والتميز يأتي بالممارسة. استمر في التعلم، واستمتع بإنشاء تصميمات رائعة!\nCSS بحر واسع. أهم نصيحة هي الاعتماد على المراجع الموثوقة مثل:\nMozilla Developer Network (MDN). البحث باستخدام محركات البحث للوصول إلى أمثلة عملية وتوثيق الخصائص. ","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/css-from-beginner-to-expert-flexible-stunning-web-pages/","section":"Posts","summary":"إذا كنت ترغب في فهم أعمق لكيفية عمل مواقع الويب والتصميمات، فأنت بحاجة إلى النظر إلى ما وراء الأكواد.","title":"CSS من البداية إلى الاحتراف: كيف تصمم صفحات ويب مرنة ومبهرّة","type":"posts"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/","section":"Dev Mahmoud","summary":"","title":"Dev Mahmoud","type":"page"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/tags/front-end/","section":"Tags","summary":"","title":"Front-End","type":"tags"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/categories/web-development/","section":"Categories","summary":"","title":"Web Development","type":"categories"},{"content":"هل سبق وأن شعرت بالإحباط أثناء محاولة محاذاة العناصر على موقعك باستخدام CSS؟ ربما قضيت ساعات في تجربة مختلف القيم لتحديد المواقع، دون أن تصل إلى النتيجة المثالية. هنا يأتي دور Flexbox، التقنية السحرية التي أحدثت ثورة في عالم تصميم المواقع. بفضل خصائصها البسيطة والمرنة، يمكنك الآن توزيع العناصر ومحاذاتها بسهولة مذهلة. سواء كنت مبتدئًا أو محترفًا في تطوير الويب، فإن تعلم Flexbox سيفتح لك آفاقًا جديدة في تصميم واجهات المستخدم بشكل أنيق وفعال. في هذه المقالة، سنأخذك في رحلة شيقة لاكتشاف أسرار Flexbox وكيف يمكنك الاستفادة منها لتبسيط حياتك كمطور.\nمقدمة Flexbox: الخطوة نحو إتقان التوزيع والمحاذاة في CSS #\rمن هنا نبدأ رحلتنا نحو المستوى المتوسط في استخدام CSS مع أداة رائعة ومبتكرة تُعرف باسم Flexbox، أو كما يسميها الجميع ببساطة \u0026ldquo;فليكس\u0026rdquo;. تعتبر هذه التقنية ثورة حقيقية في كيفية توزيع ومحاذاة العناصر داخل الحاويات، حيث تجعل من السهل جدًا تحقيق نتائج بصرية مذهلة تُشبه تلك التي تجدها في أدوات التصميم مثل Adobe Illustrator، ولكن باستخدام الكود فقط.\nقبل ظهور Flexbox، كان ترتيب العناصر داخل الصفحة ومحاذاتها بشكل مثالي يمثل تحديًا كبيرًا للمطورين. ومع ذلك، جاءت هذه التقنية لتغيير كل شيء، حيث أصبحت تتيح الحاويات المرنة (Flex Containers) إمكانية توزيع العناصر داخلها بشكل سلس ومرن، سواء كان ذلك للتوسيع أو المحاذاة أو التوزيع.\nدعونا نغوص في تفاصيل Flexbox ونستكشف مميزاته وأسلوبه في العمل، مع شرح كل خطوة بأسلوب عملي وواضح مدعوم بالأمثلة.\n1. تعريف Flexbox وأهميته #\rFlexbox هو اختصار لـ \u0026ldquo;Flexible Box Module\u0026rdquo;، ويعد أداة قوية لتوزيع العناصر ومحاذاتها داخل صفحات الويب. ما يميز Flexbox هو المرونة وسهولة الاستخدام مقارنة بالتقنيات التقليدية في CSS.\n2. المشكلة قبل Flexbox #\rقبل ظهور Flexbox، كان ترتيب العناصر داخل الحاويات يتطلب الكثير من الجهد والكود، مثل استخدام float وpositioning، مما جعل الأمر معقدًا وأحيانًا غير عملي.\n3. ما الذي يقدمه Flexbox؟ #\rFlexbox يوفر إمكانيات مدهشة تشمل:\nتوسيع العناصر داخل الحاوية. محاذاة العناصر بشكل عمودي أو أفقي. توزيع العناصر بمسافات متساوية أو حسب الحاجة. 4. الحاوية والعناصر: المصطلحات الأساسية #\rالحاوية (Container): هي العنصر الرئيسي الذي يحتوي على عناصر أخرى بداخله. العناصر (Items): هي العناصر الفردية الموجودة داخل الحاوية. 5. البدء باستخدام Flexbox #\rاستخدام Flexbox سهل للغاية. كل ما عليك فعله هو تعيين خاصية display الخاصة بالحاوية إلى flex، وبعد ذلك يمكنك الاستفادة من مجموعة كبيرة من الخصائص لتخصيص التوزيع والمحاذاة.\n6. مثال عملي بسيط #\r.container { display: flex; } بمجرد تطبيق الكود أعلاه على الحاوية، يمكننا استخدام العديد من الخصائص مثل justify-content وalign-items لتحقيق التصميم المطلوب.\nمثال سريع على Flexbox: لمحة سريعة عن السحر الذي يمكن تحقيقه #\rFlexbox هو تقنية رائعة في CSS تسهل عليك التحكم في ترتيب العناصر ومحاذاتها داخل الحاويات. لنبدأ بمثال عملي سريع يعرض قدراته المدهشة، ثم نغوص لاحقًا في التفاصيل خطوة بخطوة لتتعلم كل ما تحتاجه لتحقيق تصميمات دقيقة ومثالية.\n1. إعداد HTML الأساسي #\rفي هذا المثال، لدينا إعداد HTML بسيط يتضمن:\nعنصر div رئيسي مع class يُسمى container. ثلاثة عناصر فرعية داخل الحاوية الرئيسية، كل منها يحمل class يُسمى box، مع id مميز: one، two، وthree. 2. تغيير اتجاه العناصر باستخدام Flexbox #\rFlexbox يسمح لك بتغيير اتجاه ترتيب العناصر بسهولة باستخدام الخاصية flex-direction.\nإذا كانت القيمة row، فإن العناصر تصطف أفقيًا (في صف). إذا كانت القيمة column، فإن العناصر تصطف رأسيًا (في عمود). مثال عملي: .container { display: flex; flex-direction: row; } عند تغيير القيمة إلى column-reverse، يتم عكس ترتيب العناصر عموديًا. 3. تغيير الترتيب باستخدام الخاصية order #\rFlexbox يمنحك الحرية لتحديد ترتيب العناصر داخل الحاوية بغض النظر عن ترتيبها في HTML، باستخدام الخاصية order.\nالترتيب الافتراضي: كل العناصر تحمل القيمة order: 0. مثال على تغيير الترتيب: #one { order: 3; } #two { order: 2; } #three { order: 1; } في هذا المثال، يصبح العنصر ذو المعرف three هو الأول في الترتيب، يليه العنصر two ثم one. 4. التحكم في محاذاة العناصر #\rFlexbox يتيح لك أيضًا محاذاة العناصر داخل الحاوية باستخدام خصائص مثل:\njustify-content: تتحكم في توزيع العناصر أفقيًا. align-items: تتحكم في محاذاة العناصر عموديًا. مثال:\n.container { display: flex; justify-content: space-between; align-items: center; } 5. ملاحظات إضافية: #\rFlexbox يتيح لك تحكمًا مذهلاً في التصميم، مما يجعله أداة قوية لإنشاء تخطيطات متجاوبة ومرنة.\nمحاور واتجاهات Flexbox: فهم الأساسيات #\rFlexbox يعتمد بشكل كبير على مفهوم المحاور والاتجاهات، مما يتيح لك التحكم الكامل في توزيع العناصر ومحاذاتها داخل الحاوية. في هذا القسم، سنتعرف على المحاور (الرئيسي والبديل) وكيف يؤثر تغيير الاتجاهات على تصميمك.\n1. المحاور في Flexbox #\rFlexbox يعتمد على محورين رئيسيين:\nالمحور الرئيسي (Main Axis): يتم تحديده باستخدام الخاصية flex-direction. المحور البديل (Cross Axis): وهو المحور المعاكس للمحور الرئيسي. 2. القيم الممكنة لـ flex-direction #\rهناك أربع قيم رئيسية تؤثر على اتجاه العناصر داخل الحاوية:\nrow: المحور الرئيسي أفقي (من اليسار إلى اليمين). row-reverse: المحور الرئيسي أفقي (من اليمين إلى اليسار). column: المحور الرئيسي رأسي (من الأعلى إلى الأسفل). column-reverse: المحور الرئيسي رأسي (من الأسفل إلى الأعلى). مثال عملي:\n.container { display: flex; flex-direction: row; /* يمكن تغييرها إلى أي من القيم الأربعة */ } 3. كيف تعمل المحاور؟ #\rعند اختيار row أو row-reverse، يصبح المحور الرئيسي أفقيًا، بينما يكون المحور البديل رأسيًا. عند اختيار column أو column-reverse، يصبح المحور الرئيسي رأسيًا، بينما يكون المحور البديل أفقيًا. ملاحظات:\nالمحور الرئيسي يحدد كيفية ترتيب العناصر داخل الحاوية. المحور البديل يؤثر على المحاذاة العمودية أو الأفقية للعناصر. 4. التفاعل مع خصائص المحاذاة #\rFlexbox يقدم خصائص مثل justify-content و align-items للتحكم في توزيع العناصر ومحاذاتها على المحاور:\njustify-content: تعمل على المحور الرئيسي. align-items: تعمل على المحور البديل. مثال عملي:\n.container { display: flex; flex-direction: column; /* المحور الرئيسي عمودي */ justify-content: center; /* محاذاة العناصر على المحور الرئيسي */ align-items: flex-start; /* محاذاة العناصر على المحور البديل */ } 5. تأثير تغيير الاتجاه #\rبتغيير قيمة flex-direction، تتغير كيفية تفاعل العناصر مع المحورين. على سبيل المثال، عند التبديل من row إلى column، يصبح المحور الرئيسي عموديًا (أعلى-أسفل) والمحور البديل أفقيًا (يسار-يمين). 6. علاقة المحاور بـ Flexbox بشكل عام #\rكل خصائص Flexbox تقريبًا مثل justify-content و align-items و align-self تعتمد على المحاور التي تحددها. لذا، فهم المحاور والاتجاهات هو الخطوة الأولى لإنشاء تخطيطات مرنة ومتجاوبة.\nإعادة ترتيب العناصر باستخدام Flexbox: دليل شامل #\rFlexbox يوفر أدوات متعددة تتيح لك إعادة ترتيب العناصر داخل الحاوية بطريقة ديناميكية ومرنة. في هذا القسم، سنستعرض الطرق الثلاث الأساسية التي يمكن استخدامها لإعادة ترتيب العناصر، وسنوضح كيفية تنفيذها خطوة بخطوة.\n1. استخدام خاصية flex-direction مع القيم العكسية #\rالقيمة row-reverse: تعكس ترتيب العناصر أفقيًا، حيث يبدأ الترتيب من اليمين إلى اليسار. القيمة column-reverse: تعكس ترتيب العناصر رأسيًا، حيث يبدأ الترتيب من الأسفل إلى الأعلى. مثال عملي:\n.container { display: flex; flex-direction: row-reverse; /* أو column-reverse */ } 2. تعديل ترتيب العناصر في HTML مباشرةً #\rالطريقة الأبسط لتغيير الترتيب هي تعديل ترتيب العناصر في الكود نفسه. على سبيل المثال، إذا كانت العناصر مرتبة كالتالي: \u0026lt;div\u0026gt;العنصر 1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 3\u0026lt;/div\u0026gt; يمكن إعادة ترتيبها ببساطة إلى: \u0026lt;div\u0026gt;العنصر 2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 3\u0026lt;/div\u0026gt; 3. استخدام خاصية order في CSS #\rخاصية order تمنحك مرونة أكبر في تحديد ترتيب العناصر بشكل مخصص. هذه الخاصية مخصصة فقط لعناصر Flexbox (العناصر الموجودة داخل الحاوية التي تحتوي على display: flex). مثال عملي:\n.container { display: flex; } .item1 { order: 3; /* العنصر الأول يظهر في الترتيب الثالث */ } .item2 { order: 1; /* العنصر الثاني يظهر في الترتيب الأول */ } .item3 { order: 2; /* العنصر الثالث يظهر في الترتيب الثاني */ } مثال شامل #\rHTML: #\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item1\u0026#34;\u0026gt;Box 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item2\u0026#34;\u0026gt;Box 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item3\u0026#34;\u0026gt;Box 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; CSS: #\r.container { display: flex; flex-direction: row; /* يمكنك تجربة row-reverse أو column-reverse */ } .item1 { order: 3; } .item2 { order: 1; } .item3 { order: 2; } النتيجة: #\rيتم عرض العناصر في المتصفح بترتيب: Box 2، Box 3، Box 1. ملاحظات هامة #\rخاصية order تعتمد على القيم العددية: القيمة الأقل تظهر أولاً. إذا كانت القيم متساوية، يتم استخدام الترتيب في HTML. استخدام flex-direction مع row-reverse أو column-reverse يمكن أن يكون مفيدًا عند الحاجة لعكس الاتجاه بالكامل. التعديل في الكود HTML نفسه يظل الأسهل، لكنه يفتقر إلى المرونة مقارنة بـ order. محاذاة العناصر وتوزيعها باستخدام Flexbox #\rتُعتبر خاصية Flexbox واحدة من أهم الأدوات التي تُسهّل محاذاة العناصر وتوزيعها داخل الحاويات. كان التنسيق التقليدي باستخدام position: absolute أو relative يستغرق الكثير من الوقت، ولكن Flexbox حلّ هذه المشكلة بفضل خواصه البسيطة والفعّالة. هنا سنستعرض ميزتين رئيسيتين: align-items وjustify-content، وكيف يمكن استخدامهما بشكل عملي.\n1. خاصية justify-content: توزيع العناصر على المحور الأساسي #\rتتحكم خاصية justify-content في توزيع العناصر على المحور الأساسي (الذي يتم تحديده باستخدام خاصية flex-direction).\nالقيم الشائعة: #\rflex-start: يتم ترتيب العناصر من بداية المحور. center: يتم وضع العناصر في منتصف المحور. flex-end: يتم ترتيب العناصر في نهاية المحور. space-between: توزيع العناصر مع وجود مسافات متساوية بينها. space-around: توزيع العناصر مع وجود مسافات متساوية من الأطراف وبين العناصر. space-evenly: توزيع العناصر بحيث تكون المسافات متساوية تمامًا بين كل العناصر والأطراف. مثال عملي: #\r.container { display: flex; justify-content: space-around; /* توزيع العناصر مع وجود مسافات متساوية */ } 2. خاصية align-items: محاذاة العناصر على المحور العمودي #\rتتحكم خاصية align-items في محاذاة العناصر على المحور العمودي (وهو المحور المتعامد مع المحور الأساسي).\nالقيم الشائعة: #\rstretch: تمديد العناصر لملء المساحة المتاحة (القيمة الافتراضية). flex-start: محاذاة العناصر مع بداية المحور العمودي. center: وضع العناصر في وسط المحور العمودي. flex-end: محاذاة العناصر مع نهاية المحور العمودي. مثال عملي: #\r.container { display: flex; align-items: center; /* محاذاة العناصر في منتصف المحور العمودي */ } دمج القيم للحصول على تنسيق مثالي #\rعند استخدام justify-content مع align-items معًا، يمكن إنشاء تصميمات متطورة تُناسب جميع أنواع التخطيطات.\nمثال: #\r.container { display: flex; justify-content: center; /* توزيع العناصر في المنتصف أفقيًا */ align-items: flex-end; /* محاذاة العناصر في نهاية المحور العمودي */ } ملخص: التفكير داخل Flexbox #\rتهانينا! الآن أصبحت تفهم كيفية استخدام Flexbox ضمن نموذج الصندوق (Box Model). خلال هذه الدرس تعلمنا الكثير عن كيفية توزيع العناصر ومحاذاتها داخل الحاويات باستخدام خصائص Flexbox.\nالنقاط الأساسية التي تناولناها: #\rخاصية display: flex:\nتُستخدم على العنصر الحاوي (Container) لتحويله إلى Flex Container. تُمكّن من التحكم في توزيع ومحاذاة العناصر داخله. خاصية flex-flow:\nالتحكم في اتجاه العناصر باستخدام flex-direction (إما صفوف أو أعمدة). توزيع ومحاذاة العناصر:\njustify-content: التحكم في توزيع العناصر على المحور الأساسي. align-items: التحكم في محاذاة العناصر على المحور المتعامد. تمدد الحاوية لتناسب العناصر:\nيمكن للحاوية أن تتوسع لتناسب العناصر بداخلها أو تمنع تجاوز الحدود. الفرق بين خصائص الحاوية والعناصر:\nبعض خصائص Flexbox تُستخدم فقط على الحاوية (Parent)، مثل justify-content و**align-items**. وبعضها يُستخدم على العناصر الداخلية (Items)، مثل align-self و**flex-grow**. أهمية Flexbox: #\rFlexbox أداة قوية تُستخدم على نطاق واسع في تطوير الويب. الآن وبعد أن أتقنته، ستلاحظ وجوده في العديد من المشاريع والتصميمات. استمر في الممارسة وستجد أن بإمكانك التحكم بسهولة في محاذاة وتوزيع العناصر لتحقيق التصميم الذي تريده.\nالخاتمة #\rوالآن، بعد أن تعرفت على قوة Flexbox وكيفية استخدامه لتحقيق تصميمات جذابة ومرنة، حان الوقت لتطبيق ما تعلمته. لا تتردد في تجربة مختلف الخصائص والتلاعب بها لفهم المزيد واكتشاف إمكانياتها. Flexbox ليس مجرد أداة، بل هو حل يغير قواعد اللعبة ويجعل تصميم واجهات المستخدم أمرًا ممتعًا وسهلًا. انطلق واستمتع بابتكار تصميمات مذهلة تسحر المستخدمين وتجعل عملك أكثر احترافية. تذكر أن الإبداع لا حدود له عندما تمتلك الأدوات المناسبة. حظًا موفقًا في مغامرتك مع Flexbox!\n","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/flexbox-secrets-practical-guide-for-aligning-items-in-css/","section":"Posts","summary":"هل سبق وأن شعرت بالإحباط أثناء محاولة محاذاة العناصر على موقعك باستخدام CSS؟ ربما قضيت ساعات في تجربة مختلف القيم لتحديد المواقع، دون أن تصل إلى النتيجة المثالية.","title":"أسرار Flexbox: دليل عملي لتوزيع العناصر في CSS","type":"posts"},{"content":"هل ترغب في إتقان فن ترتيب العناصر على صفحات الويب بشكل احترافي؟ إذًا، قد حان الوقت لتتعرف على قوة CSS Grid! هذه التقنية الثورية تمنحك القدرة على بناء تخطيطات مرنة وسهلة، مما يجعل تصميم صفحات الويب أكثر إبداعًا وكفاءة. إذا كنت تسعى لإطلاق مشاريع ويب رائعة أو تحسين مواقعك الحالية، فإن CSS Grid هو أداة لا غنى عنها. دعنا نأخذك في رحلة ممتعة لاكتشاف كيف يمكن لهذه التقنية أن تحول طريقة بناء صفحات الويب الخاصة بك!\nالفرق بين CSS Grid و Flexbox: معركة الأساليب الحديثة! #\rمرحباً بكم في المقارنة التي ينتظرها الجميع بين اثنين من أعظم أدوات تصميم واجهات الويب: CSS Grid الوافد الجديد الذي أحدث ثورة في تصميم الشبكات، وFlexbox الأسلوب المخضرم الذي غيّر قواعد اللعبة سابقاً.\nولكن دعونا ننهي التكهنات مبكراً: CSS Grid لا يُلغي Flexbox، والعكس صحيح. كل أداة تمتاز بقدرات لا تستطيع الأخرى تحقيقها، بل إن الجمع بينهما يمكن أن يُنتج تصميمات مذهلة تناسب مختلف احتياجات صفحات الويب.\nCSS Grid: البطل في إنشاء التخطيطات الكاملة #\rتتميز CSS Grid بقدرتها الفائقة على إنشاء تخطيطات معقدة ومخصصة لصفحات الويب. فهي تتعامل مع التصميم على مستوى الشبكة (grid) الكاملة، مما يجعلها مثالية لتقسيم الصفحة إلى مناطق رئيسية أو إنشاء تخطيطات متناسقة.\nFlexbox: سيد تدفق المحتوى #\rعلى الجانب الآخر، يُعد Flexbox الخيار الأفضل لتوزيع العناصر داخل كل قسم من الصفحة. فهو يركز على التعامل مع العناصر الفردية داخل الحاويات، مما يضمن ترتيباً مرناً وانسيابياً يتكيف مع مختلف أحجام الشاشات.\nالعمل معاً: مزيج القوة #\rالقوة الحقيقية تكمن في الجمع بين CSS Grid وFlexbox. يُمكن استخدام Grid لتحديد الهيكل العام للصفحة، بينما يتم استخدام Flexbox داخل كل قسم من التخطيط لتوزيع العناصر بطريقة ديناميكية.\nفي هذا المقال، سنستعرض الفروق بينهما، ونشرح كيفية عمل كل منهما، وكيفية الجمع بينهما لإنشاء تصميمات مذهلة وعملية تناسب مختلف الاحتياجات. استعد للغوص في تفاصيل CSS Grid وتعلم كيفية استخدامها لإنشاء تخطيطات احترافية بسهولة.\nمثال عملي: الجمع بين CSS Grid و Flexbox #\rلنفهم كيف يمكن لـ CSS Grid و Flexbox العمل معًا، دعونا نلقي نظرة على مثال عملي قمت بإعداده. سنستعرضه سريعًا، وستتعلم خلال الدرس كيف تبني هذا المثال خطوة بخطوة.\nإعداد الحاوية #\rفي البداية، أنشأنا حاوية (container) واستخدمنا خاصية display: grid; لتحديدها كشبكة. بعد ذلك، قمنا بضبط الأعمدة والصفوف باستخدام الخاصية grid-template-areas.\nتوزيع العناصر داخل الشبكة #\rفي هذا المثال، تحتوي الحاوية على ثلاثة عناصر داخلها. الحاوية نفسها تم ضبطها لتكون شبكة (grid)، في حين أن كل عنصر داخل الحاوية تم تعيين خاصية display: flex; له.\nهذا الإعداد يجعل النصوص الموجودة داخل العناصر تظهر في المنتصف. إذا قمنا بإزالة خاصية flex من العناصر، ستعود جميع المحتويات إلى الزاوية العلوية اليسرى، ما يظهر أهمية Flexbox في توزيع العناصر. تحسين التخطيط باستخدام الخصائص المشتركة #\rرغم أن Flexbox يُستخدم داخل العناصر، إلا أن CSS Grid يدعم تحسين توزيع الحاوية بأكملها. على سبيل المثال، يمكننا استخدام خاصية justify-content: center; لتوسيط الشبكة نفسها.\nالنتيجة النهائية #\rالناتج هو تخطيط شبكي مكون من عمودين وصفين مع عناصر مرتبة بشكل جميل في المنتصف. هذا المثال يُبرز كيف يمكن لـ CSS Grid و Flexbox أن يكمل كل منهما الآخر لإنشاء تصميمات جذابة ومرنة في نفس الوقت.\nهذا مجرد بداية لما يمكن تحقيقه باستخدام هاتين الأداتين معًا!\nالصفوف والأعمدة في CSS Grid: أساس التصميم الشبكي #\rCSS Grid هو نظام تصميم ثنائي الأبعاد يتيح لك تنظيم المحتوى على هيئة صفوف وأعمدة، مما يوفر مرونة هائلة لإنشاء تخطيطات تصميمية مبتكرة. الجمع بين الصفوف والأعمدة يتيح لك إنشاء مناطق مخصصة يمكن تسميتها واستخدامها لتنظيم المحتوى بطريقة ديناميكية.\nالخطوة الأولى: تحديد الحاوية #\rابدأ بتحديد خاصية display: grid; على العنصر الحاوي (Container). بعد ذلك، استخدم الخصائص grid-template-rows وgrid-template-columns لتحديد عدد وأبعاد الصفوف والأعمدة.\nالمسافات بين العناصر (Gutters) #\rلتحديد المسافة بين الصفوف والأعمدة، يمكنك استخدام خاصية grid-gap (أو gap في الإصدارات الحديثة). هذه الخاصية تُعرف أيضًا باسم \u0026ldquo;المزاريب\u0026rdquo;، وهي تضمن توزيعًا منظمًا للعناصر داخل الشبكة.\nعلى سبيل المثال، إذا حددت قيمة 50px للـ grid-gap، فإن المسافة بين كل صف وعمود ستكون 50 بكسل. إعداد الشبكة: مثال عملي #\rافترض أن لدينا شبكة تحتوي على عمود واحد وثلاثة صفوف. في هذه الحالة:\nالصف الأول طوله 300 بكسل. الصف الثاني طوله 250 بكسل. الصف الثالث طوله 60 بكسل (لإعداد شريط صغير مثل التذييل \u0026ldquo;footer\u0026rdquo;). لتوسيع الشبكة لتحتوي على ثلاثة أعمدة:\nاستخدم الخاصية grid-template-columns وحدد القيم لكل عمود (مثال: 300px 300px 200px). إذا تجاوزت الأبعاد عرض الشبكة، قم بزيادة عرض الشبكة باستخدام width: 100%; لضمان احتواء العناصر داخلها. أمثلة على الصفوف الصغيرة #\rيمكنك تخصيص صف صغير جدًا، مثل 60 بكسل، لاستخدامه كشريط تذييل. هذا يُعتبر إعدادًا مثاليًا لتصميمات الويب الحديثة التي تعتمد على أقسام صغيرة الحجم في نهاية الصفحة.\nتطبيقات الشبكة #\rمن خلال grid-template-rows وgrid-template-columns، يمكنك إنشاء شبكات معقدة تناسب احتياجات موقعك. هذه الشبكة يمكن أن تضم صفوفًا وأعمدة بأحجام مختلفة بناءً على طبيعة المحتوى.\nفي القسم التالي، سنتعرف على كيفية الجمع بين الصفوف والأعمدة لإنشاء مناطق مخصصة داخل الشبكة، مما يمنحك القدرة على تصميم تخطيطات قوية ومبتكرة.\nالمناطق الشبكية (Grid Areas) في CSS Grid #\rإحدى أقوى ميزات CSS Grid هي القدرة على تحديد مواقع العناصر داخل الشبكة باستخدام مفهوم المناطق الشبكية (Grid Areas). تسمح لك هذه الميزة بوضع العناصر بمرونة عبر الصفوف والأعمدة باستخدام أسماء مخصصة.\nما هي المناطق الشبكية؟ #\rالمناطق الشبكية هي اختصار يتيح لك تحديد المساحات التي تشغلها العناصر عبر خصائص مثل:\ngrid-row-start grid-column-start grid-row-end grid-column-end بدلاً من استخدام هذه الخصائص بشكل منفصل، يمكنك استخدام أسماء مناطق مخصصة تُعين للعناصر من خلال الخاصية grid-area.\nكيف تعمل المناطق الشبكية؟ #\rلإنشاء شبكة تحتوي على مناطق مسماة:\nاستخدم خاصية grid-template-areas لتحديد تخطيط الشبكة باستخدام سلاسل نصية. قم بإعطاء كل عنصر داخل الشبكة معرفًا (ID) أو اسمًا يتطابق مع اسم المنطقة المخصصة في الشبكة. مثال عملي #\rلنفترض أن لدينا شبكة تحتوي على:\nصفين. عمودين. عنصر في الأعلى يشغل العمودين معًا، وعنصرين في الصف السفلي. إعداد الشبكة باستخدام grid-template-areas:\n.container { display: grid; grid-template-rows: 100px 200px; grid-template-columns: 1fr 1fr; grid-template-areas: \u0026#34;header header\u0026#34; \u0026#34;sidebar content\u0026#34;; } تعيين المناطق للعناصر:\n#header { grid-area: header; } #sidebar { grid-area: sidebar; } #content { grid-area: content; } استخدام أكثر تقدمًا #\rإذا كنت تصمم مدونة بسيطة، يمكن إعداد تخطيط يتضمن:\nرأس (Header) يمتد عبر العرض الكامل. شريط جانبي (Sidebar) على اليسار. محتوى رئيسي (Content) في المنتصف. تذييل (Footer) في الأسفل. التخطيط الكامل:\n.container { display: grid; grid-template-rows: 100px 1fr 50px; grid-template-columns: 200px 1fr; grid-template-areas: \u0026#34;header header\u0026#34; \u0026#34;sidebar content\u0026#34; \u0026#34;footer footer\u0026#34;; } ملاحظات هامة #\rتأكد من أن عدد الأعمدة في جميع الصفوف متسق في grid-template-areas. يمكنك ضبط أبعاد الأعمدة والصفوف لتناسب احتياجاتك باستخدام grid-template-columns وgrid-template-rows. خلاصة #\rتتيح لك المناطق الشبكية تصميم تخطيطات مرنة وسهلة التخصيص للويب. في الدروس القادمة، سنتعلم كيفية إنشاء صفحات مدونة متكاملة باستخدام هذا النظام، بما في ذلك الصفحات المرتبطة لكل منشور. باستخدام CSS Grid، يمكن تصميم تخطيطات مسبقة توفر الوقت وتزيد من كفاءة التصميم.\nالشبكة المتقدمة (Advanced Grid) في CSS #\rتُعد شبكة CSS من أقوى الأدوات في تصميم الويب، حيث توفر لك تحكمًا دقيقًا في كيفية ترتيب المحتوى في الصفحة. مع وجود العديد من الميزات المتقدمة، قد يصبح الأمر مربكًا بعض الشيء، ولكن هذه الميزات توفر لك إمكانيات قوية لإنشاء تخطيطات ديناميكية وسهلة التخصيص. من بين هذه الميزات المتقدمة:\n1. وحدة fr #\rوحدة fr هي وحدة خاصة في CSS Grid تسمح لك بتوزيع المساحة المتاحة على الشبكة. على سبيل المثال، إذا أردت أن تحتل العناصر المساحة المتبقية من الشبكة بعد تخصيص المساحات الثابتة للأجزاء الأخرى، يمكنك استخدام 1fr لتحديد أن العنصر يجب أن يأخذ حصة من المساحة المتبقية.\n2. استخدام minmax #\rيمكنك تحديد حد أدنى وأقصى للمسافة التي يمكن أن يشغلها الصف أو العمود باستخدام خاصية minmax. تتيح لك هذه الخاصية إنشاء تخطيطات مرنة حيث يمكنك تحديد القيم الدنيا والقصوى للأبعاد، بحيث يظل العنصر داخل هذه الحدود بغض النظر عن المحتوى.\nمثال عملي #\rلنأخذ مثالًا لتوضيح كيفية استخدام هذه الميزات:\n.container { display: grid; grid-template-rows: 350px 350px 1fr; grid-template-columns: repeat(6, 1fr); grid-gap: 15px; } في هذا المثال:\ngrid-template-rows: يتم تخصيص الصفوف الأول والثاني بارتفاع 350 بكسل، بينما الصف الثالث يأخذ المساحة المتبقية باستخدام 1fr. grid-template-columns: يتم تقسيم الأعمدة إلى ستة أعمدة متساوية باستخدام repeat(6, 1fr). استخدام repeat لتكرار الأعمدة #\rبدلاً من كتابة 1fr لكل عمود، يمكننا استخدام خاصية repeat لتكرار الأعمدة وتسهيل كتابة الكود:\ngrid-template-columns: repeat(6, 1fr); هذا الكود يكرر 1fr لستة أعمدة، مما يجعل الكود أكثر نظافة وقوة.\nالصفوف التلقائية باستخدام grid-auto-rows #\rإذا كنت تريد أن تكون الصفوف ديناميكية، بحيث تتكيف مع المحتوى، يمكنك استخدام grid-auto-rows مع minmax. هذه الطريقة مفيدة عندما لا تعرف مسبقًا عدد الصفوف التي ستكون موجودة (مثلما يحدث في خلاصة الأخبار على Facebook).\n.container { display: grid; grid-auto-rows: minmax(100px, auto); } هنا، minmax(100px, auto) تعني أن كل صف سيكون له ارتفاع لا يقل عن 100 بكسل، ولكن يمكن أن يكون أكبر إذا كان المحتوى يتطلب ذلك.\nخلاصة #\rباستخدام هذه الميزات المتقدمة في CSS Grid، يمكنك إنشاء تخطيطات مرنة وديناميكية بسهولة. ميزات مثل fr و minmax و grid-auto-rows تتيح لك بناء شبكات تتكيف مع المحتوى بشكل تلقائي، مما يساعدك في تصميم صفحات ويب أكثر تطورًا وكفاءة.\nملخص (Recap) #\rلقد بدأنا بالتعرف على كيفية استخدام CSS Grid لبناء تخطيطات مرنة ومتقدمة. في البداية، تعلمنا كيفية إنشاء شبكة باستخدام خاصية display وضبطها على grid. ثم انتقلنا إلى إنشاء قوالب للصفوف والأعمدة، بالإضافة إلى استخدام المناطق المسماة داخل الشبكة. بعد ذلك، استعرضنا بعض التقنيات المتقدمة التي تمكننا من التحكم بشكل أفضل في ترتيب العناصر.\nكل هذه الأساسيات ستقودنا إلى الدرس القادم، حيث سنتعلم كيفية استخدام كل من CSS Grid و Flexbox لإنشاء تخطيطات مرنة ومتجاوبة، وهو أمر أساسي في تطوير الويب الحديث. في الدرس التالي، سأشرح لك لماذا يُعتبر CSS Grid الخيار الأمثل وأفضل حل لإنشاء تصميمات متجاوبة (Responsive Layouts).\nخاتمة #\rوفي النهاية، يعد CSS Grid من أهم الأدوات التي يجب أن يتقنها كل مطور ويب حديث. بفضل قوته ومرونته، يمكنك تصميم أي نوع من التخطيطات بدءًا من البسيطة وصولاً إلى المعقدة، مع ضمان استجابتها على مختلف الأجهزة. سواء كنت مبتدئًا أو محترفًا، فإن هذه التقنية ستفتح أمامك أفقًا واسعًا من الإمكانيات. الآن حان دورك لتجربة ما تعلمته وتحويل أفكارك إلى واقع ملموس على صفحات الويب الخاصة بك. استمتع بالتصميم، وكن دائمًا مبدعًا!\n","date":"9 ديسمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/css-grid-design-page-professionally/","section":"Posts","summary":"هل ترغب في إتقان فن ترتيب العناصر على صفحات الويب بشكل احترافي؟ إذًا، قد حان الوقت لتتعرف على قوة CSS Grid!","title":"هل تحتاج إلى تصميم صفحة ويب احترافية؟ تعلم CSS Grid اليوم!","type":"posts"},{"content":"","date":"26 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/tags/html/","section":"Tags","summary":"","title":"HTML","type":"tags"},{"content":"تُعدّ أساسيات HTML من أهم الركائز التي يبني عليها كل مطوّر ويب موقعه. في هذا المقال، سنغطي أهم المفاهيم التي يجب على كل مبتدئ ومطور فهمها، بدءًا من رأس الصفحة وصولاً إلى الوسوم الدلالية التي تساعد في تحسين فهم محركات البحث لهيكل الصفحة.\nهل أنت مستعد لاستكشاف هذه العناصر الأساسية التي تُسهم في بناء صفحات ويب رائعة؟ تابع معنا لتتعرف على كيفية استخدامها بشكل صحيح.\nوسم head وSemantic Elements في HTML\rالوسم head في HTML #\rيُعد الوسم \u0026lt;head\u0026gt; أحد العناصر الأساسية في مستند HTML، حيث يحتوي على معلومات وبيانات لا تُعرض مباشرة للمستخدم، ولكنها تلعب دورًا حيويًا في تنظيم الصفحة وتحسين أدائها. لنفهم وظيفة هذا الوسم ومكوناته، لننظر إلى المثال التالي:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ملف HTML لا يحتوى الا على وسم \u0026lt;head\u0026gt; واحد فقط. وظيفة وسم head فى HTML #\rالبيانات أو العناصر الموجودة داخل الوسم \u0026lt;head\u0026gt; غير مرئية للمستخدم عند عرض الصفحة في المتصفح. ومع ذلك، فإن لها وظائف مهمة تتعلق بتحسين تجربة المستخدم، وتوفير معلومات لمحركات البحث، وربط الصفحة بملفات وأنماط وأكواد إضافية. يمكن تقسيم هذه الوظائف إلى:\nتعريف محتوى الصفحة: توفير معلومات وصفية تساعد محركات البحث والمستعرضات في فهم محتوى الصفحة. تحسين الأداء: ربط ملفات الأنماط (CSS) والبرمجيات (JavaScript) الخارجية. إضافة إعدادات خاصة: توفير إعدادات متعلقة بتوافق الصفحة مع المتصفحات والأجهزة المختلفة. العناصر الموجودة داخل وسم head #\rالعناصر الموجودة داخل وسم head\rيتضمن وسم \u0026lt;head\u0026gt; مجموعة من الوسوم، بعضها إلزامي والآخر اختياري، وهي:\n1. وسم title فى HTML (إجباري): #\rيحدد عنوان الصفحة الذي يظهر في شريط العنوان أو علامة التبويب في المتصفح. هذا العنوان مهم أيضًا لتحسين ترتيب الصفحة في محركات البحث.\n\u0026lt;title\u0026gt;عنوان الصفحة\u0026lt;/title\u0026gt; احرص دائمًا على تضمين وسم \u0026lt;title\u0026gt; لأنه إجباري لتحسين تجربة المستخدم وترتيب الصفحة في نتائج البحث. 2. وسم meta فى HTML (اختياري ولكن مهم): #\rيُستخدم لتحديد معلومات وصفية عن الصفحة مثل الترميز، الوصف، الكلمات المفتاحية، والإعدادات الخاصة بالمستعرض.\nأمثلة:\n\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;وصف الصفحة هنا\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;HTML, CSS, JavaScript\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; وسم \u0026lt;meta\u0026gt; الخاص بـ viewport ضروري لجعل موقعك متوافقًا مع الشاشات الصغيرة مثل الهواتف الذكية. 3. وسم style فى HTML (اختياري): #\rيُستخدم لإضافة تنسيقات CSS داخلية تؤثر على مظهر الصفحة.\n\u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; } \u0026lt;/style\u0026gt; قلل من استخدام وسم \u0026lt;style\u0026gt; داخل الصفحة نفسها، واستبدله بملفات CSS خارجية عبر وسم \u0026lt;link\u0026gt; لتحسين تنظيم الكود وسهولة التحديث. 4. وسم link فى HTML (اختياري): #\rيُستخدم لربط الصفحة بملفات خارجية مثل ملفات CSS أو أي موارد أخرى مثل favicon.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;favicon/favicon-32x32.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;favicon/favicon-16x16.png\u0026#34; /\u0026gt; 5. وسم script فى HTML (اختياري): #\rيُستخدم لإضافة أو استدعاء أكواد JavaScript التي تُنفذ وظائف تفاعلية.\n\u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 6. وسم noscript فى HTML (اختياري): #\rيُستخدم لتوفير محتوى بديل يُعرض للمستخدمين الذين لا يدعم متصفحهم JavaScript أو قاموا بتعطيله.\n\u0026lt;noscript\u0026gt; يُرجى تفعيل JavaScript لرؤية محتوى الصفحة. \u0026lt;/noscript\u0026gt; 7. الوسم base فى HTML (اختياري): #\rبالإضافة إلى العناصر الأساسية داخل وسم \u0026lt;head\u0026gt;، يوجد عنصر آخر يُعرف بـ \u0026lt;base\u0026gt;، وهو يُستخدم لتحديد المسار الأساسي (Base URL) للروابط والصور في المستند. عند تعريف هذا الوسم، تُعتبر جميع الروابط النسبية الموجودة في الصفحة امتدادًا لهذا المسار.\nوظيفة وسم base: #\rتحديد مسار الروابط النسبية: يساعد في تسهيل إدارة الروابط داخل الصفحة، حيث يُمكنك استخدام روابط نسبية بدلًا من روابط مطلقة. تحسين إدارة الموارد: عند تغيير المسار الرئيسي للموقع، يمكن تحديثه بسهولة باستخدام هذا الوسم دون الحاجة إلى تعديل جميع الروابط داخل الصفحة. كيفية استخدام وسم base: #\rيُكتب وسم \u0026lt;base\u0026gt; داخل وسم \u0026lt;head\u0026gt; ويحتوي على سمة href لتحديد المسار الأساسي. كما يمكن أن يتضمن سمة target لتحديد الهدف الافتراضي للروابط (مثل فتح الروابط في نافذة جديدة أو نفس النافذة).\nمثال على استخدام وسم base: #\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;base href=\u0026#34;https://example.com/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;title\u0026gt;مثال على وسم \u0026amp;lt;base\u0026amp;gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;about.html\u0026#34;\u0026gt;حول الموقع\u0026lt;/a\u0026gt; \u0026lt;img src=\u0026#34;images/logo.png\u0026#34; alt=\u0026#34;شعار الموقع\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;base href=\u0026quot;https://example.com/\u0026quot;\u0026gt; يحدد أن جميع الروابط النسبية ستُعتبر امتدادًا لـ https://example.com/. الرابط \u0026lt;a href=\u0026quot;about.html\u0026quot;\u0026gt; سيُفسر كالتالي: https://example.com/about.html. الصورة \u0026lt;img src=\u0026quot;images/logo.png\u0026quot;\u0026gt; ستُفسر كالتالي: https://example.com/images/logo.png. target=\u0026quot;_blank\u0026quot; يُحدد أن جميع الروابط التي تستخدم المسار الأساسي ستفتح في نافذة جديدة افتراضيًا. ملاحظات مهمة:\nيمكن أن يُستخدم وسم \u0026lt;base\u0026gt; مرة واحدة فقط داخل وسم \u0026lt;head\u0026gt;. إذا وُجد أكثر من وسم، فسيتم تجاهل الوسوم الزائدة. عند استخدام \u0026lt;base\u0026gt;، تأكد من أنه لن يؤثر سلبًا على الروابط الأخرى التي قد تتطلب مسارات مطلقة. أهمية وسم base في المشاريع: #\rإدارة الروابط بسهولة: يسهل التعامل مع الروابط النسبية خاصة في المشاريع الكبيرة حيث يتكرر المسار الأساسي في عدة صفحات. توفير الوقت: إذا تغير المسار الأساسي للموقع، يمكن تحديثه في مكان واحد فقط. استخدام وسم base مع الوسوم الأخرى: #\rعند إضافة \u0026lt;base\u0026gt; بجانب الوسوم الأخرى داخل \u0026lt;head\u0026gt;, يُصبح الكود منظمًا ويُساعد في تحسين فهم وإدارة المشروع:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;base href=\u0026#34;https://example.com/\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt; \u0026lt;title\u0026gt;تجربة وسم \u0026amp;lt;base\u0026amp;gt;\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles/main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;contact.html\u0026#34;\u0026gt;اتصل بنا\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; الرابط في المثال سيفسر كالتالي: https://example.com/contact.html. ملف CSS سيتم تحميله من: https://example.com/styles/main.css. وسم \u0026lt;base\u0026gt; يُعد خيارًا مفيدًا لإدارة الروابط النسبية في المشاريع، خاصة عندما يكون لديك مسار رئيسي ثابت ترغب في استخدامه عبر الصفحة أو الموقع بالكامل.\nباختصار، وسم \u0026lt;head\u0026gt; هو المكان الذي يُجهز فيه مستند HTML للعمل بشكل سليم ومتوافق مع المتصفحات المختلفة، ويُحسن أداء الموقع وتجربة المستخدم.\nالوسوم الدلالية وأهميتها فى HTML #\rعند تصميم صفحة ويب، يُفضل استخدام الوسوم الدلالية (Semantic Tags) لتحديد الأجزاء المختلفة من الصفحة بشكل واضح. هذه الوسوم تُسهِّل على المطورين والمتصفحات ومحركات البحث فهم محتوى الصفحة، مما يُحسن من SEO ويجعل الموقع أكثر تنظيماً.\nفي الماضي، كان يتم استخدام وسوم عامة مثل:\n\u0026lt;div id=\u0026#34;nav\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;footer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; لتمثيل الأجزاء المختلفة للصفحة مثل التنقل (Navigation) أو الرأس (Header) أو التذييل (Footer). أما الآن، فتتيح HTML وسومًا دلالية مخصصة لتلك الأغراض، مما يجعل الكود أكثر وضوحًا وسهولة في التعديل.\nالوسوم الدلالية الرئيسية فى HTML: #\r1. وسم header فى HTML #\rيُستخدم لتحديد رأس الصفحة أو رأس قسم معين. يحتوي عادةً على عناوين، شعارات، أو روابط تنقل. \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;عنوان الموقع\u0026lt;/h1\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;a href=\u0026#34;#home\u0026#34;\u0026gt;الرئيسية\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#about\u0026#34;\u0026gt;عن الموقع\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; يمكن أن يتكرر \u0026lt;header\u0026gt; في المستند، مثل رأس لكل قسم. لا يمكن وضعه داخل \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt; أو \u0026lt;header\u0026gt; آخر. 2. وسم nav فى HTML #\rيُستخدم لتجميع روابط التنقل الرئيسية للموقع. يساعد برامج قراءة الشاشة على التعرف على قائمة التنقل. \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#services\u0026#34;\u0026gt;الخدمات\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#contact\u0026#34;\u0026gt;تواصل معنا\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; يجب استخدام \u0026lt;nav\u0026gt; فقط مع روابط التنقل الأساسية وليس كل الروابط. 3. وسم main فى HTML #\rيُحدد المحتوى الرئيسي للصفحة. يجب أن يكون محتواه فريدًا وألا يتكرر في مستندات أخرى مثل التذييلات أو قوائم التنقل. \u0026lt;main\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;مقال رئيسي\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;هذا هو المحتوى الأساسي للصفحة.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; يُستخدم مرة واحدة فقط في الصفحة. لا يمكن أن يكون داخل \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;aside\u0026gt;, أو \u0026lt;nav\u0026gt;. 4. وسم article فى HTML #\rيُستخدم للمحتوى المستقل مثل منشورات المدونة أو الأخبار.\n\u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;عنوان المقال\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;هذا نص المقال.\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; يجب أن يكون للمقالة معنى مستقل ويمكن توزيعها بمفردها. 5. وسم section فى HTML #\rيُستخدم لتقسيم المحتوى إلى أقسام فرعية تحتوي على عناوين.\n\u0026lt;section\u0026gt; \u0026lt;h3\u0026gt;قسم فرعي\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;تفاصيل القسم الفرعي.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; يُفضل استخدامه مع عنوان (مثل \u0026lt;h2\u0026gt; أو \u0026lt;h3\u0026gt;). يُستخدم فقط عندما لا يكون هناك وسم أكثر تحديدًا (مثل \u0026lt;article\u0026gt; أو \u0026lt;aside\u0026gt;). 6. وسم aside فى HTML #\rيُمثل محتوى جانبي مثل الشريط الجانبي أو روابط إضافية.\n\u0026lt;aside\u0026gt; \u0026lt;h4\u0026gt;روابط ذات صلة\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link1\u0026#34;\u0026gt;رابط 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link2\u0026#34;\u0026gt;رابط 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/aside\u0026gt; 7. وسم footer فى HTML #\rيُحدد تذييل الصفحة أو القسم.\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 جميع الحقوق محفوظة.\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; أهمية إستخدام الوسوم الدلالية فى HTML #\rوضوح البنية: استخدم الوسوم المناسبة لتمثيل الوظيفة الحقيقية لكل قسم. تحسين الوصول: تُساعد الوسوم الدلالية برامج قراءة الشاشة على التنقل بسهولة. تحسين SEO: تجعل محركات البحث تفهم الصفحة بشكل أفضل. باستخدام الوسوم الدلالية مثل \u0026lt;header\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;main\u0026gt;، يمكن تصميم صفحات ويب واضحة، سهلة القراءة، ومتوافقة مع المعايير الحديثة. تجنب الوسوم العامة مثل \u0026lt;div\u0026gt; عندما يكون هناك وسوم مخصصة لوظيفتها.\nالمزيد من الوسوم الدلالية في HTML #\r1. وسم figure فى HTML #\rوسم \u0026lt;figure\u0026gt; يُستخدم لاحتواء محتوى مستقل يمكن إرفاق تعليق توضيحي به باستخدام عنصر \u0026lt;figcaption\u0026gt;. يتم التعامل مع العنصرين كوحدة واحدة، مما يتيح إمكانية نقل الشكل مع التسمية التوضيحية إلى أجزاء مختلفة من المستند دون التأثير على تدفق المحتوى الأساسي.\nاستخدامات شائعة:\nالصور الرسوم التوضيحية المخططات مقتطفات الكود البرمجي مثال عملي:\n\u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;ps.svg\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;Free Palastine - الحرية لفلسطين إن شاء الله\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; وسم figure فى HTML\rملاحظات إضافية:\nيمكن وضع \u0026lt;figcaption\u0026gt; كأول أو آخر عنصر فرعي داخل \u0026lt;figure\u0026gt;. تُعتبر أول \u0026lt;figcaption\u0026gt; داخل العنصر هي التسمية التوضيحية الرئيسية. تحسين الوصول: توفر \u0026lt;figcaption\u0026gt; وصفًا دلاليًا لمحتوى \u0026lt;figure\u0026gt;، مما يسهل فهم المحتوى من قِبل أدوات القراءة للشاشات. 2. وسم details فى HTML #\rوسم \u0026lt;details\u0026gt; يُستخدم لإنشاء عناصر تفاعلية يمكن فتحها وإغلاقها لعرض أو إخفاء محتوى إضافي، مما يجعل تجربة المستخدم أكثر ديناميكية وتنظيماً.\nمميزات العنصر:\nمغلق افتراضيًا ويمكن فتحه عند الطلب. يتيح إدراج أي نوع من المحتوى بداخله، مثل النصوص والصور وحتى عناصر HTML أخرى. تلميح: يُستخدم وسم \u0026lt;summary\u0026gt; داخل \u0026lt;details\u0026gt; لتوفير عنوان مرئي يسهل النقر عليه لفتح التفاصيل.\nمثال عملي:\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;السؤال الأول\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt;الإجابة هنا\u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; وسم details فى HTML\rفوائد إضافية:\nيُعزز سهولة القراءة والتنظيم عند التعامل مع كمية كبيرة من المعلومات. يدعم جميع أنواع المحتوى، مما يجعله مرنًا للعديد من التطبيقات. 3. وسم time فى HTML #\rوسم \u0026lt;time\u0026gt; يُستخدم لتحديد تاريخ و/أو وقت في مستند HTML بطريقة مفهومة للبشر والآلات. يسهل على المتصفحات ومحركات البحث استخدام هذا التنسيق لتوفير ميزات إضافية مثل التذكيرات أو عرض نتائج بحث أكثر دقة.\nالسمة datetime:\nتُستخدم لتحديد التاريخ والوقت بصيغة يمكن قراءتها آليًا (ISO 8601). تُفيد في تحسين فهم السياق لمحركات البحث وبرامج إدارة الأحداث. أمثلة عملية:\nتحديد وقت العمل: \u0026lt;p\u0026gt;مفتوح من \u0026lt;time\u0026gt;10:00\u0026lt;/time\u0026gt; إلى \u0026lt;time\u0026gt;21:00\u0026lt;/time\u0026gt; طوال أيام الأسبوع.\u0026lt;/p\u0026gt; تحديد موعد معين: \u0026lt;p\u0026gt;لدي موعد في \u0026lt;time datetime=\u0026#34;2024-02-14 20:00\u0026#34;\u0026gt;يوم الحب\u0026lt;/time\u0026gt;.\u0026lt;/p\u0026gt; مزايا إضافية:\nتسهيل ربط الأحداث بتطبيقات التقويم. تحسين تجربة المستخدم من خلال عرض الوقت بطريقة واضحة ومترجمة تلقائيًا وفقًا لإعدادات المستخدم. تُعد هذه الوسوم الدلالية أدوات قوية لتحسين تنظيم المحتوى وجعل المستند أكثر قابلية للفهم لمحركات البحث وأدوات القراءة المساعدة، مما يُعزز تجربة المستخدم.\nHTML5 Layout - التخطيط الكامل لصفحة الويب #\rلنقم الآن بترتيب العناصر وتنظيمها بشكل صحيح لإنشاء هيكل صفحة ويب مثالي باستخدام العلامات الدلالية التي قدمتها HTML5. عند تجميع كل القطع معًا، ستلاحظ أن الكود النهائي سيكون كالتالي:\nلاحظ أيضًا أننا قمنا بإضافة سمتين لم نُدرِج تفاصيلهما في الشرح، ولكنهما مهمتان جدًا وواضحتان:\nlang: لتحديد لغة الصفحة. dir: لتحديد اتجاه المحتوى (مثل من اليمين لليسار أو العكس). إليك الكود النهائي:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ar\u0026#34; dir=\u0026#34;rtl\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;عنوان الصفحة\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;وصف الصفحة هنا\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;HTML, CSS, JavaScript\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;عنوان الموقع\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#services\u0026#34;\u0026gt;الخدمات\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#contact\u0026#34;\u0026gt;تواصل معنا\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;section class=\u0026#34;featured-image\u0026#34;\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;/article-image.jpg\u0026#34; alt=\u0026#34;Featured Image\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;صورة النقال\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;article-meta\u0026#34;\u0026gt; \u0026lt;p\u0026gt;تم النشر بواسطة Fullstackee بتاريخ \u0026lt;time datetime=\u0026#34;2024-02-14 20:00\u0026#34;\u0026gt;2024-02-14 20:00\u0026lt;/time\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;h2\u0026gt;عنوان المقال\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;هذا نص المقال.\u0026lt;/p\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h3\u0026gt;قسم فرعي\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;تفاصيل القسم الفرعي.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;h4\u0026gt;روابط ذات صلة\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link1\u0026#34;\u0026gt;رابط 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link2\u0026#34;\u0026gt;رابط 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 جميع الحقوق محفوظة.\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; بهذا الترتيب، نكون قد أنشأنا الهيكل الأساسي لصفحة ويب باستخدام الوسوم الدلالية، مما يضمن تنظيمًا منطقيًا وسهولة في الفهم لمحركات البحث والمستخدمين على حد سواء. هذا النهج لا يُحسّن تجربة التصفح فحسب، بل يعزز أيضًا ترتيب موقعك في نتائج البحث.\nولكن للحصول على مظهر احترافي وجذاب للصفحة، يجب الاستفادة من قوة CSS لتنسيق العناصر وتصميم واجهة متكاملة. تابعنا في الدروس القادمة لتتعلم كيفية تطبيق ذلك بخطوات بسيطة وفعّالة.\nالأسئلة الشائعة #\rما معنى العلامات الدلالية في HTML؟\nالعلامات الدلالية في HTML هي عناصر توضح الغرض من محتواها بوضوح، مما يسهل على المتصفحات ومحركات البحث فهم هيكل الصفحة. لكل علامة وظيفة محددة، ويجب استخدامها وفقًا لغرضها لتجنب سوء التنظيم في الصفحة.\nما هي الفروقات بين العلامات الدلالية وغير الدلالية في HTML؟\nالعلامات الدلالية: توضح الغرض من محتواها بشكل مباشر (مثل \u0026lt;header\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;footer\u0026gt;)، مما يسهم في تحسين فهم محركات البحث وهيكل الصفحة ويعزز إمكانية الوصول. العلامات غير الدلالية: مثل \u0026lt;div\u0026gt; و \u0026lt;span\u0026gt;، لا تعطي أي دلالة على المحتوى، وتُستخدم فقط لأغراض التنسيق أو التجميع بدون إيضاح وظيفي. ما هو عنصر HTML الذي يمكن استخدامه لتجميع العناصر عندما لا ينطبق أي من العناصر الدلالية؟\nيمكن استخدام عنصر \u0026lt;div\u0026gt; لتجميع العناصر في HTML عندما لا تكون هناك حاجة لاستخدام العناصر الدلالية. يُعتبر \u0026lt;div\u0026gt; عنصرًا غير دلالي، ويُستخدم بشكل أساسي لأغراض التنسيق أو كحاوية عامة للمحتوى دون إعطاء معنى دلالي له.\nما هو الفرق بين header و h1؟\n\u0026lt;header\u0026gt;: عنصر دلالي يُستخدم لتحديد رأس قسم معين في الصفحة، مثل رأس الصفحة الرئيسية أو رأس مقال أو قسم معين. يمكن أن يحتوي على عناوين (مثل \u0026lt;h1\u0026gt; إلى \u0026lt;h6\u0026gt;)، شعارات، قوائم تنقل، أو أي محتوى تمهيدي. \u0026lt;h1\u0026gt;: عنصر خاص بالعناوين يُستخدم لتحديد العنوان الرئيسي للمحتوى. يجب أن يكون هناك \u0026lt;h1\u0026gt; واحد فقط لكل صفحة أو قسم رئيسي، ليشير إلى العنوان الأهم بالنسبة لذلك المحتوى. هل head هو نفسه header في HTML؟ لا، \u0026lt;head\u0026gt; و \u0026lt;header\u0026gt; ليسا نفس الشيء.\n\u0026lt;head\u0026gt; يحتوي على معلومات عن الصفحة مثل العنوان والروابط للملفات الخارجية (CSS، JavaScript) ولا يظهر في واجهة المستخدم. \u0026lt;header\u0026gt; يُستخدم لعرض محتوى مرئي مثل العناوين والقوائم ويظهر في واجهة المستخدم. خاتمة #\rفي النهاية، نأمل أن تكون قد استفدت من هذه الجولة في عالم أساسيات HTML. إذا كان هناك أي شيء لم نوضحه بشكل كامل أو لديك سؤال حول الموضوع، فلا تتردد في ترك تعليق وسنكون سعداء بالإجابة عليه. اترك سؤالك أدناه وكن جزءًا من مجتمعنا المتعلم الذي يسعى دائمًا لتطوير مهاراته فى عالم تطوير الويب.\nالأسئلة الشائعة #\rما معنى العلامات الدلالية في HTML؟ #\rالعلامات الدلالية في HTML هي عناصر توضح الغرض من محتواها بوضوح، مما يسهل على المتصفحات ومحركات البحث فهم هيكل الصفحة. لكل علامة وظيفة محددة، ويجب استخدامها وفقًا لغرضها لتجنب سوء التنظيم في الصفحة.\nما هي الفروقات بين العلامات الدلالية وغير الدلالية في HTML؟ #\rالعلامات الدلالية: توضح الغرض من محتواها بشكل مباشر (مثل \u0026lt;header\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;footer\u0026gt;)، مما يسهم في تحسين فهم محركات البحث وهيكل الصفحة ويعزز إمكانية الوصول. العلامات غير الدلالية: مثل \u0026lt;div\u0026gt; و \u0026lt;span\u0026gt;، لا تعطي أي دلالة على المحتوى، وتُستخدم فقط لأغراض التنسيق أو التجميع بدون إيضاح وظيفي. ما هو عنصر HTML الذي يمكن استخدامه لتجميع العناصر عندما لا ينطبق أي من العناصر الدلالية؟ #\rيمكن استخدام عنصر \u0026lt;div\u0026gt; لتجميع العناصر في HTML عندما لا تكون هناك حاجة لاستخدام العناصر الدلالية. يُعتبر \u0026lt;div\u0026gt; عنصرًا غير دلالي، ويُستخدم بشكل أساسي لأغراض التنسيق أو كحاوية عامة للمحتوى دون إعطاء معنى دلالي له.\nما هو الفرق بين header و h1؟ #\r\u0026lt;header\u0026gt;: عنصر دلالي يُستخدم لتحديد رأس قسم معين في الصفحة، مثل رأس الصفحة الرئيسية أو رأس مقال أو قسم معين. يمكن أن يحتوي على عناوين (مثل \u0026lt;h1\u0026gt; إلى \u0026lt;h6\u0026gt;)، شعارات، قوائم تنقل، أو أي محتوى تمهيدي. \u0026lt;h1\u0026gt;: عنصر خاص بالعناوين يُستخدم لتحديد العنوان الرئيسي للمحتوى. يجب أن يكون هناك \u0026lt;h1\u0026gt; واحد فقط لكل صفحة أو قسم رئيسي، ليشير إلى العنوان الأهم بالنسبة لذلك المحتوى. هل head هو نفسه header في HTML؟ #\rلا، \u0026lt;head\u0026gt; و \u0026lt;header\u0026gt; ليسا نفس الشيء.\n\u0026lt;head\u0026gt; يحتوي على معلومات عن الصفحة مثل العنوان والروابط للملفات الخارجية (CSS، JavaScript) ولا يظهر في واجهة المستخدم. \u0026lt;header\u0026gt; يُستخدم لعرض محتوى مرئي مثل العناوين والقوائم ويظهر في واجهة المستخدم. ","date":"26 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/head-and-semantic-tags-in-html/","section":"Posts","summary":"تُعدّ أساسيات HTML من أهم الركائز التي يبني عليها كل مطوّر ويب موقعه.","title":"كل ما تحتاج معرفته عن وسم الـHead والوسوم الدلالية في HTML","type":"posts"},{"content":"","date":"19 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/tags/back-end/","section":"Tags","summary":"","title":"Back-End","type":"tags"},{"content":"في عالم البرمجة وتطوير التطبيقات، يلعب الباك إند دورًا محوريًا في إدارة البيانات وضمان عمل الأنظمة بسلاسة خلف الكواليس. الباك إند هو العقل المدبر الذي يدير العمليات المنطقية ويعالج البيانات، مما يجعل واجهات المستخدم الأمامية تعمل بشكل مثالي.\nبفضل تقنيات مثل PHP وMySQL، أصبح تطوير الباك إند أحد أهم التخصصات التقنية المطلوبة في سوق العمل اليوم. إذا كنت تتطلع إلى فهم كيفية عمل التطبيقات من الداخل أو بناء مسار مهني قوي في البرمجة، فإن مجال الباك إند هو وجهتك المثالية.\nمجال تطوير الباك إند 2025: المهارات المطلوبة وفرص العمل\rما هو تخصص الباك اند - Back End؟ #\rتطوير الواجهة الخلفية (Backend Development) هو الجانب المسؤول عن العمليات التي تحدث خلف الكواليس في أي موقع ويب أو تطبيق. يركز الباك اند على معالجة البيانات، إدارة قواعد البيانات، وضمان عمل الموقع أو التطبيق بسلاسة عند التفاعل مع واجهة المستخدم (Front End).\nبعبارات بسيطة، الباك اند هو ما يحدث عندما تضغط على زر، تنتقل إلى صفحة جديدة، أو تقوم بإدخال بيانات في نموذج. يتعامل مع كل العمليات التي لا تراها بعينك بشكل مباشر ولكنها ضرورية لعمل الموقع.\nأشهر لغات البرمجة المستخدمة في تطوير الباك اند - Back End #\rعالم تطوير الباك اند يزخر بلغات برمجة متعددة تلبي احتياجات مختلفة، وتساعد على بناء تطبيقات قوية وآمنة. دعونا نستعرض أهم هذه اللغات ومميزاتها بطريقة مشوقة:\n1. PHP – عملاق الويب الخفي #\rتُعتبر PHP واحدة من أكثر لغات الباك اند شيوعًا، فهي القوة المحركة لأكثر من 80% من المواقع على الإنترنت، بما في ذلك Facebook وWordPress.\nمميزات PHP: مفتوحة المصدر وسهلة التعلم. تكامل رائع مع HTML. دعم واسع من مجتمع المطورين وأطر العمل مثل Laravel وCodeIgniter. عيوبها: بعض المكتبات القياسية قد تفتقر للتنظيم. 2. Python – البساطة والقوة في آن واحد #\rتتميز لغة Python بسهولة كتابة الأكواد وقوة الأداء، ما يجعلها خيارًا ممتازًا لتطوير الباك اند باستخدام أطر عمل مثل Django وFlask.\nلماذا Python؟ كتابة أكواد مختصرة وفعالة. دعم متكامل لتقنيات الذكاء الاصطناعي وتعلم الآلة. مجتمع غني يساعد في حل المشكلات بسهولة. 3. Java – الاستقرار والأمان #\rلغة Java معروفة بكونها قابلة للتوسع وآمنة، ما يجعلها خيارًا مثاليًا للتطبيقات الكبرى مثل الأنظمة المصرفية ومواقع التجارة الإلكترونية.\nمزايا Java: كفاءة عالية في الأداء. مكتبات جاهزة تسهّل التطوير. تعمل على مختلف الأنظمة عبر تقنية JVM. 4. Node.js – القوة وسرعة الاستجابة #\rعلى الرغم من كونها بيئة تشغيل بدلاً من لغة، فإن Node.js تعتمد على JavaScript لتطوير الباك اند، مما يسمح بالتعامل مع العديد من المهام في وقت واحد.\nلماذا Node.js؟ سرعة عالية في التنفيذ. تكلفة منخفضة للتطوير. تُستخدم من قبل عمالقة التكنولوجيا مثل Netflix وUber. 5. Ruby – لغة البساطة والتطوير السريع #\rتستخدم لغة Ruby على نطاق واسع في تطوير الويب، خاصة مع إطار العمل Ruby on Rails الذي يسهل بناء التطبيقات بسرعة وتنظيم عالي.\nمميزات Ruby: كتابة أكواد سهلة وبسيطة. إطار عمل يساعد على إنتاج تطبيقات قابلة للتطوير. مجتمع كبير يدعم التطوير التعاوني. 6. C++ – لغة الأداء العالي #\rتُستخدم C++ غالبًا في المشاريع التي تتطلب أداءً عالياً ودقة كبيرة، وهي خيار مثالي للبرمجة التنافسية أو أنظمة الباك اند المعقدة.\n7. ASP.NET – الابتكار بدعم مايكروسوفت #\rتتميز ASP.NET بأنها توفر حلولًا متكاملة لتطوير الباك اند، خاصة باستخدام لغة C#.\nما يميزها: دعم مباشر من Microsoft. أمان عالي. أداء متفوق مع قواعد بيانات معقدة. أيهما الأنسب لك؟ #\rاختيار اللغة يعتمد على طبيعة المشروع، الميزانية، والمهارات المتوفرة لديك. ولكننا سنركز على لغة PHP بإعتبارها اللغة الأساسية المفضلة إلى.\nسوف نقوم بتعلم واحدة من هذه اللغات وفى الغالب هى PHP ونقم ببناء تطبيقات رائعة تجعل من أفكارك حقيقة ملموسة!\nما هي لغات الباك إند - Back End؟ #\rلغات الباك إند هي الأساس الذي تعتمد عليه التطبيقات والمواقع الإلكترونية لتنفيذ العمليات الخلفية، مثل إدارة قواعد البيانات، معالجة الطلبات، والتحقق من البيانات. يمكن تشبيهها بالمحرك الذي يدير كل شيء خلف الكواليس لضمان عمل الموقع بكفاءة وسلاسة. دعونا نستعرض اللغات الأساسية ودورها في هذا المجال.\n1. لغة PHP: العمود الفقري لتطوير الباك إند #\rPHP (Hypertext Preprocessor) تُعتبر واحدة من أكثر لغات الباك إند شيوعًا. تُستخدم لإنشاء تطبيقات ويب ديناميكية تتفاعل مع قواعد البيانات وتوفر ميزات متقدمة.\nأُطلقت PHP لأول مرة عام 1995، وهي مفتوحة المصدر، مما ساهم في انتشارها الواسع ودعمها المجتمعي. تُعد PHP من اللغات المرنة التي تُستخدم لتطوير المواقع البسيطة إلى المشاريع الكبرى مثل إدارة المحتوى (WordPress) أو تطبيقات مخصصة باستخدام أطر مثل Laravel. بفضل سهولة تعلمها، تُعتبر PHP خيارًا مثاليًا للمبتدئين والمحترفين على حد سواء. 2. لغة MySQL: حارس البيانات #\rMySQL هي قاعدة بيانات علائقية مفتوحة المصدر تُستخدم لتخزين البيانات بطريقة منظمة واسترجاعها عند الحاجة.\nأُصدرت MySQL لأول مرة عام 1995، وتُعتبر الخيار الأكثر شيوعًا عند العمل مع PHP. تُستخدم لتخزين بيانات المستخدمين، المنتجات، الطلبات، والمزيد. ميزاتها الرئيسية: السرعة والأداء. الدعم القوي للبيانات الكبيرة. إمكانية العمل مع تطبيقات متعددة. من خلال تعلم MySQL، ستتمكن من إدارة البيانات بفعالية وبناء تطبيقات قوية. كيف تبدأ في تعلم لغات الباك إند؟ #\rابدأ مع PHP: تعلم الأساسيات مثل كتابة النصوص، التعامل مع النماذج، والتعامل مع قواعد البيانات باستخدام MySQL. تعلم MySQL: فهم كيفية إنشاء الجداول، إدارة البيانات، وتنفيذ استعلامات SQL الأساسية. انتقل إلى أطر العمل مثل Laravel: لتسريع عملية التطوير وإنشاء تطبيقات متقدمة. لماذا PHP وMySQL أساسيان؟ #\rPHP وMySQL يُعتبران ثنائيًا قويًا ومتكاملًا. PHP تُعالج الطلبات وتنشئ المحتوى الديناميكي، بينما MySQL تُخزن البيانات وتسترجعها عند الحاجة. تعلم هاتين التقنيتين يشكل الأساس لتصبح مطور باك إند محترفًا.\nولكن هذا ليس كل شيء، فإتقان لغات الباك إند يتطلب منك اكتساب المزيد من المهارات والتقنيات لتطوير تطبيقات قابلة للتوسع وآمنة. في الأقسام التالية، سنستعرض أبرز الأدوات والتقنيات التي يحتاجها مطورو الباك إند.\nمسار احتراف تطوير الواجهات الخلفية - Back End Roadmap #\rمسار احتراف تطوير الواجهات الخلفية - Back End Roadmap\rهذا المسار يعتمد على تطوير معرفتك بأساسيات الويب وصولاً إلى مهارات متقدمة تتعلق بالتصميم المعماري والنشر. سنركز على النقاط الإجبارية والاختيارية مع التركيز على PHP, MySQL, وLaravel.\nالمرحلة الأولى: أساسيات الإنترنت (إجباري) #\r1. فهم الإنترنت\nكيف يعمل الإنترنت؟ مفهوم HTTP والبروتوكولات. المتصفحات وكيف تعمل؟ نظام أسماء النطاقات (DNS). مفهوم الدومينات والاستضافة. المرحلة الثانية: تعلم لغة البرمجة (إجباري) #\r2. PHP (إجباري)\nتعلم الأساسيات: المتغيرات، الحلقات، الشروط، الدوال. البرمجة كائنية التوجه (OOP). إدارة الجلسات والكعكات (Sessions \u0026amp; Cookies). رفع الملفات ومعالجة الصور. 3. JavaScript (اختياري)\nتعلم أساسيات JavaScript لفهم التعامل مع الواجهات التفاعلية. المرحلة الثالثة: نظام التحكم في الإصدارات (إجباري) #\r4. Git\nأوامر Git الأساسية (clone, commit, push, pull). إنشاء وإدارة الفروع (branches). 5. GitHub أو GitLab (إجباري)\nرفع مشاريعك ومشاركتها. المرحلة الرابعة: قواعد البيانات (إجباري) #\r6. MySQL (إجباري)\nإنشاء قواعد البيانات والجداول. أوامر SQL الأساسية (SELECT, INSERT, UPDATE, DELETE). الفهارس (Indexes) والتطبيع (Normalization). 7. ORM مع Laravel (إجباري)\nتعلم Eloquent ORM لاستخدام قواعد البيانات بطريقة برمجية. 8. PostgreSQL وNoSQL (اختياري)\nMongoDB وRedis كمكمل للمهارات. المرحلة الخامسة: Laravel (إجباري) #\r9. أساسيات Laravel\nإعداد المشروع باستخدام Composer. إنشاء Routes وControllers وViews. نظام Blade Template. 10. المواضيع المتقدمة\nMiddleware. API Development باستخدام Laravel Passport أو Sanctum. إدارة العلاقات (Relationships). التعامل مع الأحداث (Events) والمهام (Queues). 11. توسيع التطبيق\nالحزم (Packages) الشائعة مثل Spatie. تكامل البريد الإلكتروني. المرحلة السادسة: الأمان (إجباري) #\r12. OWASP Risks\nالتعرف على التهديدات الأمنية الشائعة وكيفية حمايتها. التحقق من المدخلات، CSRF، XSS. 13. التشفير (Hashing)\nاستخدام bcrypt وargon2 لحماية كلمات المرور. المرحلة السابعة: APIs (إجباري) #\r14. RESTful APIs\nإنشاء واستهلاك REST APIs. المصادقة باستخدام JWT أو OAuth. 15. GraphQL (اختياري)\nتعلم GraphQL لاستخدامه في المشاريع المتقدمة. المرحلة الثامنة: أدوات إضافية (اختياري) #\r16. Docker\nإعداد بيئة التطوير. 17. Nginx وApache\nاستضافة التطبيقات. المرحلة التاسعة: التصميم المعماري (اختياري) #\r18. تصميم الأنظمة\nالتعرف على التطبيقات المونوليثية مقابل الميكروسيرفس. 19. تحسين الأداء\nاستراتيجيات الكاشينج (Redis). إدارة الحمل باستخدام CDN. المرحلة العاشرة: النشر وإدارة المشاريع (إجباري) #\r20. CI/CD\nإعداد خطوط نشر تلقائية باستخدام GitHub Actions أو GitLab CI. 21. إدارة المشروع\nاستخدام Trello أو Jira لإدارة تقدم المشروع. نصائح عملية: #\rقم بتطبيق المشاريع العملية في كل مرحلة (مثل إنشاء مدونة أو نظام إدارة). تابع وثائق Laravel الرسمية لتظل محدثًا. خصص وقتًا للتجربة العملية من خلال GitHub. كيف تصبح متميزاٌ فى مجال الباك اند؟ #\rلتصبح متميزًا في مجال تطوير الباك إند، عليك اتباع مسار متكامل ومخطط بعناية يتضمن الـ10 مراحل السابقة، التى تستهدف بناء المهارات الأساسية والمتقدمة التي يحتاجها أي مطور باك إند محترف.\nلا تقتصر رحلتك على التعلم النظري فقط، بل يجب أن تركز على تنفيذ مشاريع عملية متكاملة باستخدام الأدوات والتقنيات التي تتعلمها. متابعة التطورات التقنية باستمرار والتطبيق العملي هما مفتاح النجاح!\nالمجال يتطور بسرعة، والمطور المتميز هو من يبقى دائمًا على اطلاع بأحدث الأدوات والممارسات.\nخطة احتراف الباك إند - 155 يومًا من العمل الجاد #\rخطة إحتراف الباك اند - 155 يوم من العمل الجاد\rنظرًا لأن تطوير الباك إند يتطلب تعلم مهارات متنوعة وأكثر تعمقًا مقارنة بالفرونت إند، فإن هذه الخطة تمتد على مدار أكثر من 5 أشهر لضمان استيعاب المفاهيم الأساسية والمتقدمة وتطبيقها في مشاريع عملية.\nالأسبوع التمهيدى: فهم الإنترنت (5 أيام) #\rالهدف: بناء فهم شامل لكيفية عمل الإنترنت والبروتوكولات الأساسية.\n1. كيف يعمل الإنترنت؟\nالتعرف على تدفق البيانات عبر الشبكة. فهم دور الخوادم والعملاء (Servers \u0026amp; Clients). 2. مفهوم HTTP والبروتوكولات الأساسية\nHTTP وHTTPS: كيف تعمل وما الفرق بينهما؟ التعرف على طلبات GET وPOST وكيفية استجابات الخوادم. 3. المتصفحات وكيف تعمل؟\nكيفية عرض صفحات الويب. مفهوم التخزين المؤقت في المتصفح (Browser Cache). 4. نظام أسماء النطاقات (DNS)\nكيف تتم ترجمة أسماء النطاقات إلى عناوين IP؟ دور سجلات DNS. 5. الدومينات والاستضافة\nمفهوم الدومينات وكيفية حجزها. فهم أنواع الاستضافات وكيفية اختيار الأنسب للمشاريع. الشهر الأول: أساسيات البرمجة وقواعد البيانات (30 يومًا) #\rالهدف: بناء أساس قوي في البرمجة وقواعد البيانات.\n1. أسبوع 1: أساسيات البرمجة بلغة PHP\nتعلم المتغيرات، الحلقات، والشروط. بناء برامج بسيطة مثل الآلة الحاسبة. 2. أسبوع 2: قواعد البيانات باستخدام MySQL\nإنشاء قواعد بيانات وجداول. تعلم استعلامات SQL الأساسية (SELECT، INSERT، UPDATE، DELETE). 3. أسبوع 3: ربط PHP بـ MySQL\nإنشاء تطبيقات ديناميكية مثل نظام تسجيل دخول بسيط. التعامل مع النماذج (Forms). 4. أسبوع 4: تعزيز الفهم العملي\nبناء مشروع بسيط مثل دفتر عناوين. التركيز على التمارين العملية ومراجعة ما تم تعلمه. الشهر الثاني: البرمجة الكائنية (OOP) ومفاهيم متقدمة (30 يومًا) #\rالهدف: تعلم البرمجة الكائنية وفهم كيفية استخدامها في المشاريع الحقيقية.\n1. أسبوع 1: أساسيات البرمجة الكائنية (OOP)\nفهم Classes، Objects، وInheritance. كتابة برامج باستخدام OOP. 2. أسبوع 2: تطبيق البرمجة الكائنية عمليًا\nبناء نظام لإدارة المستخدمين باستخدام OOP. تنظيم الأكواد في ملفات منفصلة. 3. أسبوع 3: استكشاف تقنيات الأمان في PHP\nتعلم كيفية الحماية من SQL Injection. استخدام الاستعلامات المُعدة مسبقًا (Prepared Statements). 4. أسبوع 4: إنشاء مشروع عملي متكامل باستخدام OOP\nنظام بسيط لإدارة المنتجات. تحسين المشروع باستخدام ميزات الأمان. الشهر الثالث: أطر العمل وقواعد متقدمة (30 يومًا) #\rالهدف: إتقان إطار عمل Laravel وتعلم تقنيات متقدمة.\n1. أسبوع 1: مدخل إلى Laravel\nتثبيت Laravel والتعرف على بنيته الأساسية. فهم MVC (Model-View-Controller). 2. أسبوع 2: التعامل مع Eloquent ORM\nإنشاء نماذج وربطها بالجداول. تنفيذ استعلامات معقدة باستخدام Eloquent. 3. أسبوع 3: إنشاء واجهات برمجية (APIs)\nتعلم إنشاء RESTful APIs. بناء مشروع API صغير مثل نظام لإدارة المهام. 4. أسبوع 4: مشروع عملي باستخدام Laravel\nإنشاء نظام لإدارة محتوى بسيط (CMS). تضمين ميزات التوثيق (Authentication). الشهر الرابع: تحسين الأداء والتعامل مع التقنيات المتقدمة (30 يومًا) #\rالهدف: تحسين التطبيقات وإضافة ميزات متقدمة.\n1. أسبوع 1: تحسين الأداء\nالتعرف على التخزين المؤقت (Caching). تقليل زمن استجابة التطبيقات. 2. أسبوع 2: التعامل مع الملفات الكبيرة ورفعها\nإضافة ميزات لتحميل الملفات. تحسين أداء تحميل الملفات الكبيرة. 3. أسبوع 3: إدارة الوقت وإرسال الإشعارات\nالعمل مع المهام المجدولة (Schedulers). إرسال إشعارات البريد الإلكتروني والـ SMS. 4. أسبوع 4: مشروع متكامل باستخدام المهارات المكتسبة\nإنشاء تطبيق عملي مثل نظام حجوزات. تحسين المشروع باستخدام أفضل الممارسات. الشهر الخامس: مشاريع متقدمة والتطوير المستمر (30 يومًا) #\rالهدف: تطبيق جميع المهارات المكتسبة في مشاريع واقعية.\n1. أسبوع 1: إنشاء مشروع متقدم\nنظام تجارة إلكترونية بسيط. تضمين لوحة تحكم لإدارة المنتجات والمستخدمين. 2. أسبوع 2: إضافة ميزات متقدمة\nتقارير تفصيلية باستخدام MySQL. دمج بوابات الدفع الإلكتروني. 3. أسبوع 3: مراجعة وتوثيق المشاريع\nتحسين الأكواد وتنظيمها. إنشاء وثائق للمشاريع. 4. أسبوع 4: تطوير المهارات المستقبلية\nالتعرف على Docker وGitHub Actions. استكشاف تقنيات مثل GraphQL. مدة الخطة الإجمالية: 155 يومًا #\rهذا المسار يضمن لك فهمًا عميقًا لكل مرحلة من مراحل تطوير الباك إند، بدءًا من الأساسيات وحتى المشاريع المتقدمة، مما يمكنك من بناء تطبيقات قوية وفعالة!\nتحديد مسؤوليات مطور الباك إند #\rيركز مطور الباك إند على:\nكتابة الأكواد البرمجية التي تعالج البيانات وتخزنها في قواعد البيانات مثل MySQL. تصميم واجهات برمجة التطبيقات (APIs) التي تتواصل مع التطبيقات الأمامية. تحسين أداء الأنظمة. تأمين البيانات وتطوير الخوارزميات. أمثلة على مهام Backend:\nبناء نظام تسجيل دخول المستخدمين. تصميم قاعدة بيانات لتخزين المعلومات مثل أسماء العملاء. تحسين استعلامات البيانات لضمان سرعة الأداء. الفرق بين الفرونت إند والباك إند؟ #\rالعمل في تطوير المواقع الإلكترونية يشبه إدارة مطعم فاخر - حيث يمثل Frontend صالة الطعام التي يراها الضيوف، بينما Backend هو المطبخ الذي يُعد فيه كل شيء. دعونا نتعرف على أدوار كل منهما بشكل أوضح.\nيُعد Frontend الجزء الذي يتفاعل معه المستخدم مباشرة. عندما تفتح موقعاً إلكترونياً وترى الألوان الجذابة، والأزرار التفاعلية، والقوائم المنسدلة، والصور المتحركة - كل هذا من عمل مطور Frontend. إنه المسؤول عن تحويل التصميمات إلى واقع ملموس يمكن للمستخدم التفاعل معه بسهولة وسلاسة.\nأما Backend، فهو العقل المدبر خلف الكواليس. عندما تسجل دخولك إلى حسابك، أو تشتري منتجاً، أو ترسل رسالة - كل هذه العمليات تتم معالجتها في Backend. إنه يشبه غرفة التحكم التي تدير كل العمليات المعقدة، من حفظ بيانات المستخدمين إلى معالجة المدفوعات وتأمين المعلومات الحساسة.\nيعمل Frontend مع تقنيات بسيطة نسبياً مثل HTML لبناء هيكل الصفحة، وCSS لتجميلها، وJavaScript لجعلها تفاعلية. بينما يتعامل Backend مع لغات برمجة أكثر تعقيداً مثل PHP أو Python أو Java، وقواعد البيانات التي تخزن المعلومات، وخوادم تعالج الطلبات.\nعندما تطلب منتجاً في موقع للتسوق الإلكتروني، يقوم Frontend بإرسال طلبك إلى Backend، الذي يتحقق من توفر المنتج، ويعالج عملية الدفع، ويحفظ طلبك في قاعدة البيانات، ثم يرسل تأكيداً إلى Frontend ليعرض لك رسالة نجاح العملية.\nيركز مطورو Frontend على تجربة المستخدم والمظهر الجمالي. إنهم يهتمون بكيفية تنقل المستخدم في الموقع، وسهولة العثور على المعلومات، وجاذبية التصميم. بينما يركز مطورو Backend على كفاءة العمليات وأمان البيانات وسرعة الاستجابة.\nيمكن تشبيه العلاقة بين Frontend و Backend بالجسر الذي يربط بين عالمين: عالم المستخدم المرئي الجميل، وعالم البيانات والعمليات المعقد. كلاهما ضروري لبناء تطبيق ويب ناجح، وكلاهما يكمل الآخر بشكل مثالي.\nكل من يريد دخول مجال تطوير الويب عليه أن يختار بين هذين المسارين وفقاً لميوله - إما العمل على الجانب الإبداعي والتفاعلي مع Frontend، أو الغوص في عالم المنطق والبيانات مع Backend، أو حتى الجمع بينهما ليصبح Full Stack Developer.\nالفرق بين Backend و DevOps: شرح بسيط #\rهل DevOps هو نفسه Backend؟\nالجواب البسيط هو: لا، Backend و DevOps هما مجالان مختلفان تمامًا في تطوير البرمجيات وإدارة البنية التحتية. كل منهما له دور فريد في دورة حياة تطوير البرامج، ولكن يمكن أن يتداخل العمل بينهما في بعض النقاط.\nما هو DevOps؟\nDevOps يدمج بين التطوير البرمجي (Development) والعمليات التشغيلية (Operations) بهدف تحسين دورة حياة تطوير البرمجيات.\nيركز مهندس DevOps على:\nالأتمتة: تبسيط ونشر التحديثات البرمجية باستخدام أدوات مثل Jenkins وDocker. إدارة البنية التحتية: إعداد وإدارة الخوادم والسحابات باستخدام أدوات مثل Terraform وKubernetes. المراقبة والتحليل: متابعة أداء التطبيقات والخوادم باستخدام أدوات مثل Prometheus. ضمان استمرارية العمل: تحسين سير العمل وضمان سرعة وتسليم البرمجيات بجودة عالية. أمثلة على مهام DevOps:\nإعداد خادم جديد لتطبيق ويب باستخدام AWS. إنشاء خطوط نشر تلقائية (CI/CD Pipelines) لتسريع تحديثات البرمجيات. مراقبة أداء النظام والتأكد من استقراره تحت الضغط. هل DevOps أسهل من Backend؟\nالإجابة تعتمد على الاهتمامات والمهارات:\nBackend يتطلب مهارات برمجية قوية وفهمًا عميقًا بالخوارزميات وهياكل البيانات. DevOps يركز أكثر على الأتمتة وإدارة البنية التحتية وفهم الأدوات السحابية، مع استخدام بعض المهارات البرمجية. كيف تتداخل Backend و DevOps؟\nيمكن لمطوري الباك إند تعلم تقنيات DevOps لتوسيع نطاق مهاراتهم والمشاركة في إدارة النشر التلقائي. في المقابل، يمكن لمهندسي DevOps العمل مع أكواد الباك إند لتحسين الأداء أو حل مشكلات النشر. هل يمكن أن تبدأ كـ Backend ثم تتحول إلى DevOps؟\nبالتأكيد، العديد من مهندسي DevOps بدأوا حياتهم المهنية كمطوري Backend، حيث تساعدهم الخبرة البرمجية في التعامل مع أتمتة العمليات وإدارة البنية التحتية بشكل أفضل.\nالفرق باختصار\nBackend: يركز على بناء الأنظمة البرمجية وتعاملها مع البيانات. DevOps: يركز على تحسين دورة حياة تطوير البرامج وإدارة البنية التحتية. لكل منهما مجاله وأهميته في فريق تطوير البرمجيات، ويمكن لأي مطور اختيار المجال الذي يناسب اهتماماته وطموحاته.\nمتوسط الرواتب في وظائف مطوري الباك إند #\rتختلف رواتب مطوري الواجهة الخلفية (Back-End Developers) بشكل كبير حسب المنطقة، الخبرة، وحجم الشركة. فيما يلي نظرة عامة على متوسط الرواتب في الولايات المتحدة، أوروبا، والشرق الأوسط:\nالولايات المتحدة: يبلغ متوسط راتب مطور الواجهة الخلفية حوالي 158,122 دولار سنويًا. تتراوح الرواتب بين 111,255 دولار و224,733 دولار، اعتمادًا على الخبرة والموقع الجغرافي.\nأوروبا: تختلف الرواتب بشكل ملحوظ بين دول أوروبا:\nألمانيا: يبلغ متوسط راتب مهندس البرمجيات عن بُعد حوالي 72,900 دولار سنويًا. هولندا: يصل متوسط الراتب إلى 75,656 دولار سنويًا. إسبانيا: يبلغ متوسط الراتب حوالي 68,216 دولار سنويًا. بولندا: يصل متوسط الراتب إلى 71,327 دولار سنويًا. البرتغال: يبلغ متوسط الراتب حوالي 61,608 دولار سنويًا. الشرق الأوسط: تختلف الرواتب في هذه المنطقة بناءً على البلد والخبرة. على سبيل المثال، في تركيا، يبلغ متوسط راتب مهندس البرمجيات عن بُعد حوالي 56,658 دولار سنويًا.\nيرجى ملاحظة أن هذه الأرقام تقريبية وقد تختلف بناءً على عوامل متعددة مثل الخبرة، المهارات، وحجم الشركة.\nالخاتمة #\rسواء كنت مبتدئًا تسعى لاكتشاف عالم البرمجة، أو محترفًا ترغب في تحسين مهاراتك، فإن تطوير الباك إند يفتح أمامك آفاقًا لا حدود لها في مجال التكنولوجيا.\nبفضل الطلب المتزايد على هذا التخصص في جميع أنحاء العالم، يمكنك بناء مسيرة مهنية متميزة ومربحة. من خلال تعلم PHP، MySQL، وتقنيات الباك إند الأخرى، ستتمكن من المساهمة في إنشاء تطبيقات مبتكرة تلبي احتياجات المستخدمين وتحقق نجاحًا مستدامًا. الآن هو الوقت المثالي للانطلاق في هذا المسار المثير!\nلا تتردد في طرح أي تساؤلات أو مشاركتنا تجربتك في التعليقات – فنحن هنا لنساعدك في رحلتك نحو احتراف تطوير الباك إند. ما هو السؤال الأول الذي يخطر ببالك حول مطور الواجهات الخلفية ولم نتطرق إليه حتى الأن؟ شاركنا رأيك!\n","date":"19 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/how-to-become-backend-developer/","section":"Posts","summary":"في عالم البرمجة وتطوير التطبيقات، يلعب الباك إند دورًا محوريًا في إدارة البيانات وضمان عمل الأنظمة بسلاسة خلف الكواليس.","title":"كيف تصبح مطور باك إند - Back-End فى 2025","type":"posts"},{"content":"في العصر الرقمي الحديث، يُعتبر تطوير الواجهات الأمامية (Front-End Development) من أبرز المهارات المطلوبة لإنشاء تجارب مستخدم مميزة. رحلة احتراف هذا المجال تمر بعدة مراحل أساسية تتطلب تعلم تقنيات وأدوات متنوعة، من أساسيات HTML وCSS إلى استخدام أطر العمل المتقدمة مثل Vue.js وTailwindCSS.\nبالإضافة إلى ذلك، من الضروري فهم الدور الحقيقي لمطور الفرونت إند، ومسؤولياته التي تختلف عن مجالات أخرى مثل تصميم واجهات المستخدم (UI) وتجربة المستخدم (UX).\nفي هذا المقال، سنتعرف على مسار تعلم الفرونت إند خطوة بخطوة، ونسلط الضوء على الفروق بين مطور الفرونت إند والمجالات المتشابهة، لنقدم رؤية شاملة لمن يرغب في التميز في هذا المجال المتجدد.\nمجال تطوير الفرونت إند 2025: المهارات المطلوبة وفرص العمل\rما هو تخصص الفرونت اند - Front End؟ #\rتخيل أنك تزور موقع ويب لأول مرة؛ كل ما تراه أمامك من ألوان زاهية، أزرار جذابة، صور عالية الجودة، قوائم تنساب بسلاسة، وفيديوهات تضيف تجربة مميزة – كل ذلك هو نتيجة عمل مطور الفرونت إند.\nالفرونت إند هو فن تصميم وتنفيذ الواجهة المرئية لأي موقع أو تطبيق ويب، وهو ما يتفاعل معه المستخدم مباشرة. يعتمد هذا المجال على ثلاث ركائز أساسية: HTML لإنشاء الهيكل، CSS لإضفاء الجمال والتنسيق، وJavaScript لجعل الموقع حيويًا وتفاعليًا.\nلكن الأمر لا يتوقف عند اللغات الأساسية فقط؛ مع ظهور أطر العمل مثل React.js وVue.js، ومكتبات التصميم مثل Bootstrap وTailwind CSS، أصبح تطوير الفرونت إند أكثر سهولة وفعالية، مما يتيح للمطورين التركيز على تقديم تجربة مستخدم مذهلة بأقل وقت وجهد.\nببساطة، الفرونت إند هو الجسر الذي يربط بين تصميم الموقع وجاذبيته التقنية، مما يحول الأفكار إلى تجربة رقمية نابضة بالحياة، مليئة بالتفاصيل التي تجعل المستخدم ينجذب للبقاء والتفاعل.\nما هى لغات الفرونت اند - Front End؟ #\rلغات الفرونت إند هي الأساس الذي تعتمد عليه أي صفحة ويب لجعلها مرئية، منسقة، وتفاعلية. يمكن تشبيهها بالأركان الثلاثة لأي بناء متكامل: الهيكل، الديكور، والتفاعل. دعونا نستعرض كل لغة ودورها في هذا المجال.\n1. لغة HTML: أساس هيكل صفحة الويب #\rHTML (HyperText Markup Language) هي حجر الزاوية لتطوير المواقع. تُمثل اللغة التي تُنشئ الإطار العام لصفحات الويب، مثل العناوين، النصوص، الصور، والأزرار.\nتم ابتكار HTML عام 1993، وأحدث إصداراتها، HTML5، قدم ميزات مميزة لدعم الفيديو، الصوت، والتطبيقات التفاعلية. يمكن وصف HTML بأنها الهيكل العظمي لأي موقع؛ كل شيء تبدأ قصته من هنا. 2. لغة CSS: لمسة الجمال والتنسيق #\rCSS (Cascading Style Sheets) هي اللغة التي تضفي الحياة والجمال على هيكل HTML.\nتُستخدم لتنسيق الألوان، اختيار الخطوط، تحديد المسافات، إضافة الصور الخلفية، وتحسين التجربة البصرية بشكل عام. تخيل صفحة ويب بدون CSS: نصوص بسيطة وألوان مملة، أشبه بمستند نصي قديم. لكن بفضل CSS، يمكن تحويل الصفحة إلى تحفة فنية. أُطلقت لأول مرة عام 1996، ومنذ ذلك الحين أصبحت جزءًا لا غنى عنه لتطوير واجهات جذابة. 3. لغة JavaScript: لمسة التفاعل والذكاء #\rJavaScript هي اللغة التي تجعل الموقع ينبض بالحياة.\nتعمل على إضافة التفاعل الديناميكي مثل تحريك العناصر، التحقق من صحة النماذج، وتحديث المحتوى دون الحاجة لإعادة تحميل الصفحة. ظهرت JavaScript لأول مرة عام 1995 على يد \u0026ldquo;برندان آيخ\u0026rdquo;، وسرعان ما أصبحت العمود الفقري للتفاعل بين المستخدم والموقع. من خلال مكتبات وأطر مثل React وVue.js، تتجاوز JavaScript حدود التفاعل البسيط، لتصبح أداة لتطوير تطبيقات ويب كاملة. كيف تبدأ في تعلم لغات الفرونت إند - Front-End؟ #\rابدأ مع HTML: الخطوة الأولى لبناء هيكل أي موقع. تعلم أساسياتها بسيط وسريع. انتقل إلى CSS: أضف لمسة جمالية للهيكل الذي أنشأته باستخدام HTML. تعلم تصميم الخطوط، الألوان، وتنسيق العناصر. اختم بجافا سكريبت: بعد أن تُتقن الأساسيات، أضف التفاعل والحيوية لموقعك باستخدام هذه اللغة البرمجية القوية. لماذا هذه اللغات أساسية؟ #\rبدون HTML، لن يكون هناك هيكل. بدون CSS، ستبدو الصفحة باهتة وغير مرتبة. وبدون JavaScript، لن يكون هناك أي تفاعل أو ديناميكية. تعلم هذه اللغات الثلاث يُشكل القاعدة التي ينطلق منها أي مطور فرونت إند نحو الاحتراف.\nولكن كما ذكرنا، فإن تعلم هذه اللغات الثلاث هو مجرد البداية. مسار تطوير الواجهات الأمامية يتطلب منك اكتساب المزيد من التقنيات والمهارات لتصبح محترفًا. في الفقرة التالية، سنتعرف على أبرز الأدوات والمهارات التي يحتاجها مطورو الواجهات الأمامية.\nمسار احتراف تطوير الواجهات الأمامية - Front End Roadmap #\rمسار احتراف تطوير الواجهات الأمامية - Front End Roadmap\rإذا كنت تسعى لتصبح مطور فرونت إند محترف، فإن الطريق يتطلب التعرف على مجموعة واسعة من المهارات والأدوات، وتنظيم تعلمك في مراحل واضحة يسهل متابعتها.\nفي هذا المسار، قمنا بتقسيم الرحلة إلى 7 مراحل أساسية تبدأ من الأساسيات وتنتهي بتقنيات متقدمة ومجالات توسع. كل مرحلة مصممة لتقودك خطوة بخطوة من فهم أساسيات الويب إلى بناء تطبيقات متكاملة باستخدام Vue.js وQuasar Framework أو TailwindCSS. سواء كنت مبتدئًا أو تبحث عن تحسين مهاراتك، هذا المسار سيمنحك الأساس المتين والقدرة على بناء مشاريع احترافية.\nالمرحلة الأولى: الأساسيات (إجباري) #\r1. أساسيات الإنترنت (إجباري):\nكيف يعمل الإنترنت. بروتوكولات نقل البيانات (HTTP/HTTPS). تعريف الدومين - الاستضافة - DNS. كيف تعمل المتصفحات. 2. تعلم HTML (إجباري):\nأساسيات لغة HTML. كتابة Semantic HTML. Forms and Validations. Accessibility. أساسيات السيو التقني (Technical SEO). 3. تعلم CSS (إجباري):\nأساسيات CSS. Layouts. Flexbox و CSS Grid. Responsive Design. 4. تعلم JavaScript (إجباري):\nأساسيات JavaScript. DOM و BOM. Fetch API / Ajax. المرحلة الثانية: الإطارات والمكتبات الأساسية (اختياري) #\r5. اختيار إطار CSS (اختياري):\nTailwindCSS (موصى به). Bootstrap (اختياري). 6. CSS Architecture (اختياري):\nBEM (Block Element Modifier) 7. CSS Preprocessors (اختياري):\nSASS (موصى به). SCSS. LESS. PostCSS. المرحلة الثالثة: أدوات وأساسيات العمل (إجباري) #\r8. Git (إجباري):\nتعلم أساسيات Git. Branches و Commits. Pull Requests. GitHub Pages. 9. إدارة الحزم (إجباري):\nnpm (موصى به). pnpm (اختياري). yarn (اختياري). 10. Build Tools (إجباري):\nLinters و Formatters (Prettier و ESLint). Module Bundlers (Vite - موصى به). المرحلة الرابعة: إطار العمل الأساسي (إجباري) #\r11. اختيار إطار عمل JavaScript (Vue.js - إجباري):\nVue.js. تعلم Vue Router و Vuex (أو Pinia). 12. اختيار إطار عمل واجهة المستخدم:\nQuasar Framework (موصى به). Vuetify (اختياري). 13. SSR (اختياري):\nNuxt.js لتقديم المحتوى من السيرفر. المرحلة الخامسة: المهارات المتقدمة (اختياري) #\r14. Type Checker (اختياري):\nTypeScript. 15. Testing (اختياري):\nVitest. Jest. Cypress. 16. Web Security Basics (اختياري):\nCORS. Content Security Policy HTTPS. OWASP Security Risks. 17. Authentaction Strategies (اختياري):\nJWT OAuth Basic Auth Session Auth 18. PWAs (اختياري):\nاستخدام Lighthouse و DevTools لتحسين الأداء. العمل مع Service Workers و Web Storage. Browser API. المرحلة السادسة: العمل مع واجهات المستخدم المتقدمة (اختياري) #\r19. Web Components (اختياري):\nHTML Templates. Custom Elements. Shadow DOM. 20. GraphQL (اختياري):\nتعلم التعامل مع GraphQL APIs. 21. Static Site Generators (اختياري):\nVuePress أو Nuxt.js. المرحلة السابعة: التوسع في المنصات الأخرى (اختياري) #\r22. تطوير تطبيقات الجوال (اختياري):\nIonic (متكامل مع Vue.js). NativeScript. 23. تطوير تطبيقات سطح المكتب (اختياري):\nElectron. كيف تصبح متميزاٌ فى مجال الفرونت اند؟ #\rلتصبح متميزًا في مجال تطوير الواجهات الأمامية، عليك اتباع مسار متكامل ومخطط بعناية يتضمن 7 المراحل السابقة التى تركز على بناء المهارات الأساسية والمتقدمة كفرونت اند.\nلا تتوقف عند التعلم النظري، بل قم ببناء مشاريع عملية متكاملة باستخدام الأدوات والتقنيات التي تتعلمها، وكن على اطلاع دائم بالتقنيات الحديثة. الاستمرارية والتطبيق العملي هما مفتاح التميز!\nإليك خطة العمل التى يمكنك إتباعها لإحتراف تطوير الواجهات الأمامية.\nخطة إحتراف الفرونت اند - 120 يوم من العمل الجاد #\rخطة إحتراف الفرونت اند - 120 يوم من العمل الجاد\r1. الشهر الأول: تعلم أساسيات الإنترنت و HTML و CSS.\n2. الشهر الثاني: تعلم JavaScript الأساسية. تعلم Git و npm.\n3. الشهر الثالث:\nتعلم Vue.js و TailwindCSS. بناء مشاريع بسيطة. 4. الشهر الرابع:\nالتعرف على Quasar Framework. بناء مشروع متكامل (SPA أو PWA). هذا المسار يجمع بين المهارات الأساسية والمتقدمة بناءً على احتياجات المشاريع.\nتحديد مسؤوليات مطور الفرونت إند #\rمن خلال ما سبق، أصبح لدينا رؤية واضحة لمعظم المهارات التي يجب إتقانها لتطوير الواجهات الأمامية. ومع ذلك، يظل هناك سؤال مهم يتطلب الإجابة: ما هي مسؤوليات مطور الواجهة الأمامية؟\nبإيجاز، ما الدور المحدد الذي يلعبه مطور الفرونت إند في بناء المشروع؟ للإجابة على هذا السؤال بدقة، يجب أن نميز بين مسؤولياته وبين المجالات الأخرى التي قد تبدو متشابهة معه للوهلة الأولى، ولكن عند التعمق في التفاصيل، سنجد أن لكل منها أدوارها ومسؤولياتها الخاصة.\nمن بين هذه المجالات، يأتي مجالا تصميم واجهات المستخدم (UI) وتجربة المستخدم (UX)، اللذان قد يلتقيان مع مطور الفرونت إند في نقاط معينة، لكنهما يختلفان بشكل جوهري من حيث الوظائف والأهداف.\nالفرق بين مسؤوليات مطور الفرونت إند ومجالي UI و UX\n1. تصميم واجهات المستخدم (UI - User Interface): #\rيركز متخصص الـ UI على الجوانب البصرية لواجهة المستخدم، مثل الألوان، والخطوط، والأيقونات، والأزرار، وترتيب العناصر على الشاشة. الهدف الأساسي هو تصميم واجهة جذابة وسهلة الاستخدام. يستخدم أدوات مثل Figma وAdobe XD وSketch لتصميم النماذج الأولية (Prototypes). العلاقة مع الفرونت إند:\nيقوم مصمم الـ UI بتسليم التصميمات النهائية إلى مطور الفرونت إند لتحويلها إلى أكواد برمجية قابلة للتفاعل. 2. تجربة المستخدم (UX - User Experience): #\rيركز متخصص الـ UX على كيفية تفاعل المستخدم مع المنتج الرقمي، بدءًا من رحلته داخل الموقع أو التطبيق إلى مدى سهولة تحقيق أهدافه. يتعامل مع أبحاث المستخدمين (User Research)، وإنشاء السيناريوهات (User Flows)، وتحسين التجربة لجعلها أكثر فاعلية وراحة. العلاقة مع الفرونت إند:\nيقدم متخصص الـ UX الإرشادات المتعلقة بتجربة المستخدم لمطور الفرونت إند لضمان تنفيذ الموقع أو التطبيق بشكل يحقق الأهداف المرجوة. 3. مطور الواجهة الأمامية (Front-End Developer): #\rمسؤول عن ترجمة التصميمات المرئية وتجربة المستخدم إلى أكواد برمجية باستخدام HTML، CSS، وJavaScript. يضمن أن تكون الواجهة متجاوبة (Responsive) وتعمل بشكل صحيح على جميع الأجهزة والمتصفحات. يتكامل مع الفريق المسؤول عن الخلفية (Back-End) لجعل الموقع أو التطبيق ديناميكيًا. أبرز مسؤوليات مطور الفرونت إند:\nتنفيذ التصميمات بدقة مع مراعاة الأداء وتجربة المستخدم. تحسين سرعة الموقع (Performance Optimization). استخدام أطر العمل والمكتبات مثل Vue.js وReact لإنشاء واجهات تفاعلية. التمييز الأساسي:\nبينما يركز متخصصو الـ UI/UX على تخطيط وتصميم تجربة المستخدم ومظهرها، يركز مطور الفرونت إند على التنفيذ البرمجي لتلك الرؤية وتحويلها إلى واجهة فعلية تعمل بسلاسة.\nفرص العمل لتخصصات مطور الواجهة الأمامية Front-End #\r1. مطور JavaScript (JavaScript Developer/Engineer): #\rيتخصص مطور جافا سكريبت في استخدام هذه اللغة البرمجية القوية والمكتبات والأطر الخاصة بها مثل React، Vue.js، وNode.js. يمتلك هؤلاء المطورون مهارات متقدمة في إنشاء تطبيقات ديناميكية وقوية، مما يتيح لهم العمل كمطورين فول ستاك، حيث يمكنهم التعامل مع كل من الجوانب الأمامية والخلفية للمشروع. تعتبر خبرة مطوري جافا سكريبت مطلوبة بشكل كبير نظرًا للأهمية المتزايدة لهذه اللغة في تطوير الويب.\n2. مطور React (React Developer/Engineer): #\rمتخصص في بناء واجهات مستخدم تفاعلية باستخدام مكتبة React.js. يركز هؤلاء المطورون على تحسين الأداء وكتابة أكواد نظيفة باستخدام ميزات مثل hooks وRedux لإدارة الحالة. بالإضافة إلى ذلك، يمكن لمطوري React التوسع للعمل في بيئات متقدمة مثل Next.js لإنشاء تطبيقات الويب المتقدمة والقابلة للتوسع.\n3. مطور Vue.js (Vue.js Developer/Engineer): #\rيعتبر مطورو Vue.js خبراء في إطار العمل Vue.js الذي يتميز بالمرونة وسهولة الاستخدام. يعملون على بناء تطبيقات الويب التفاعلية التي توفر تجربة مستخدم ممتازة باستخدام مكونات قابلة لإعادة الاستخدام. Vue.js يُعد من بين الأدوات الرائدة في تطوير الواجهات الأمامية بفضل بساطته مقارنة مع أطر مثل React وAngular، ويعتمد عليه المطورون لإنشاء تطبيقات صغيرة إلى كبيرة الحجم.\n4. مطور Angular (Angular Developer/Engineer): #\rمتخصص في إطار العمل Angular الذي طورته Google. يتميز Angular بقوته في بناء تطبيقات الويب الكبيرة والمعقدة بفضل بنية مكونات قوية، إدارة الحالة المتقدمة، والتوجيه المدمج. مطورو Angular يكون لديهم القدرة على تطوير تطبيقات متكاملة ومتجاوبة، وغالبًا ما يستخدمون TypeScript لتطوير التطبيقات بشكل أكثر استقرارًا.\nمتوسط الرواتب في وظائف مطوري الواجهة الأمامية #\rتعتمد الرواتب في مجال تطوير الواجهة الأمامية على عدة عوامل، منها الموقع الجغرافي، سنوات الخبرة، المهارات المتخصصة، ونوع الشركة. إليك نظرة عامة على متوسط الرواتب بناءً على هذه العوامل:\n1. مطور الواجهة الأمامية (Front-End Developer): #\rالخبرة المبتدئة (0-2 سنوات): بين 30,000 و 50,000 دولار سنويًا. الخبرة المتوسطة (3-5 سنوات): بين 50,000 و 80,000 دولار سنويًا. الخبرة المتقدمة (5+ سنوات): بين 80,000 و 120,000 دولار سنويًا. 2. مطور JavaScript (JavaScript Developer): #\rالخبرة المبتدئة: بين 40,000 و 60,000 دولار سنويًا. الخبرة المتوسطة: بين 60,000 و 90,000 دولار سنويًا. الخبرة المتقدمة: بين 90,000 و 130,000 دولار سنويًا. 3. مطور React (React Developer): #\rالخبرة المبتدئة: بين 45,000 و 65,000 دولار سنويًا. الخبرة المتوسطة: بين 65,000 و 95,000 دولار سنويًا. الخبرة المتقدمة: بين 95,000 و 140,000 دولار سنويًا. 4. مطور Vue.js (Vue.js Developer): #\rالخبرة المبتدئة: بين 40,000 و 60,000 دولار سنويًا. الخبرة المتوسطة: بين 60,000 و 85,000 دولار سنويًا. الخبرة المتقدمة: بين 85,000 و 120,000 دولار سنويًا. 5. مطور Angular (Angular Developer): #\rالخبرة المبتدئة: بين 45,000 و 65,000 دولار سنويًا. الخبرة المتوسطة: بين 65,000 و 100,000 دولار سنويًا. الخبرة المتقدمة: بين 100,000 و 150,000 دولار سنويًا. الموقع الجغرافي:\nالرواتب تختلف أيضًا حسب الموقع. على سبيل المثال:\nفي الولايات المتحدة: يمكن أن تكون الرواتب أعلى بسبب الطلب الكبير على مطوري الويب. في أوروبا: الرواتب أقل بشكل عام، ولكن قد تختلف حسب الدولة. في دول الشرق الأوسط: قد تكون الرواتب أقل مقارنة بأمريكا الشمالية ولكنها في تزايد مع تطور السوق. المهارات المطلوبة:\nالمهارات المتقدمة في JavaScript أو React أو Vue.js يمكن أن تزيد من قيمة راتب المطور، حيث أن الشركات تبحث عن مطورين لديهم معرفة عميقة بأحدث الأطر وأدوات التطوير.\nالخاتمة #\rتطوير الواجهات الأمامية ليس مجرد مجال تقني، بل هو مزيج من الفن والتكنولوجيا، حيث يسهم في تقديم تجارب مستخدم مريحة وجذابة. من خلال اتباع مسار التعلم المنهجي واكتساب المهارات المطلوبة، يمكن لأي شخص أن يخطو خطوات ثابتة نحو الاحتراف.\nومع فهم الدور الحقيقي لمطور الفرونت إند والتفرقة بين مسؤولياته ومسؤوليات المجالات الأخرى، يصبح من السهل تحديد هدفك وتطوير مسيرتك المهنية بشكل أفضل.\nاستمر في التعلم، ولا تتوقف عن استكشاف التقنيات والأدوات الجديدة، فالعالم الرقمي مليء بالفرص والإمكانات التي تنتظرك لتحقيقها.\nلا تتردد في طرح أي تساؤلات أو مشاركتنا تجربتك في التعليقات – فنحن هنا لنساعدك في رحلتك نحو احتراف تطوير الويب. ما هو السؤال الأول الذي يخطر ببالك حول مطور الواجهات المرئية ولم نتطرق إليه حتى الأن؟ شاركنا رأيك!\n","date":"18 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/how-to-become-frontend-developer/","section":"Posts","summary":"في العصر الرقمي الحديث، يُعتبر تطوير الواجهات الأمامية (Front-End Development) من أبرز المهارات المطلوبة لإنشاء تجارب مستخدم مميزة.","title":"كيف تصبح مطور فرونت إند - Front-End فى 2025","type":"posts"},{"content":"بعد أن تعرفنا على أساسيات تطوير الويب، حان الوقت لنتعلم أساسيات لغة HTML، العمود الفقري لعالم تطوير الويب. وخصوصا تخصص الفرونت إند.\nتعلم لغة HTML\rتتميز HTML بأنها تمنحنا القدرة على التحكم في كيفية عرض المحتوى على المتصفح، وتفتح أمامنا مجالات واسعة لتنسيق النصوص والصور والعناصر الأخرى بطريقة تفاعلية وفعّالة.\nملف HTML يحتوي على أكواد تُعرف باسم \u0026ldquo;الوسوم\u0026rdquo; (Tags)، وهي تتيح لنا توجيه المتصفح لتنفيذ أوامر معينة، مثل كيفية عرض النصوص أو تنظيم الصفحة.\nما هي HTML؟ فهم أساسيات الترميز والوسوم للمبتدئين #\rفي HTML، يتم الترميز باستخدام نصوص ذات دلالة خاصة تُسمى \u0026ldquo;وسوم\u0026rdquo;. تظهر معظم الوسوم بشكل معين،\n\u0026lt;Opening-Tag\u0026gt; نص معين \u0026lt;/Closing-Tag\u0026gt; حيث يُحاط النص برموز أقل من \u0026lt; وأكبر من \u0026gt;. على سبيل المثال، وسم \u0026lt;strong\u0026gt; يُستخدم لجعل النص بداخله بارزًا.\n\u0026lt;strong\u0026gt;Bold Text\u0026lt;/strong\u0026gt; وهذا مثال آخر لوسم يُستخدم للتأكيد على النص، ويُسمى \u0026lt;em\u0026gt;. هذا الوسم يجعل النص المضمن مائلاً ليعبر عن أهميته، كما في:\n\u0026lt;em\u0026gt;Italic Text\u0026lt;/em\u0026gt; إستخدام الوسوم فى HTML\rشرح بنية الوسوم في HTML #\rيبدأ كل عنصر بوسم بداية (Opening Tag) وينتهي بوسم إغلاق (Closing Tag). على سبيل المثال، وسم البداية \u0026lt;em\u0026gt; يتبعه وسم الإغلاق \u0026lt;/em\u0026gt;، حيث يتميز الأخير بشرطة مائلة /.\nفي HTML، تُعتبر الوسوم التي تأتي كأزواج أمرًا ضروريًا؛ إذ لا يمكن فتح وسم دون إغلاقه، وهذا يشبه الأقواس الرياضية حيث لا يمكن إغلاق قوس دون فتحه أولاً.\nهذا الأسلوب يساعد على بناء بنية سليمة للمحتوى، وهو مفهوم أساسي في لغات البرمجة.\nالعنصر مقابل الوسم: فهم الفرق #\rفي HTML، يُطلق على الوحدة الكاملة التي تحتوي على وسم البداية ووسم الإغلاق، بالإضافة إلى المحتوى بداخلها، \u0026ldquo;عنصر\u0026rdquo; (Element).\nالعنصر والوسم فى HTML\rأما وسم البداية ووسم الإغلاق فقط فيُطلق عليهما \u0026ldquo;وسم\u0026rdquo; (Tag). ورغم أن بعض الأشخاص يستخدمون مصطلح \u0026ldquo;وسم\u0026rdquo; للإشارة إلى العنصر كاملًا، إلا أن معرفة هذا التمييز أمر مهم في البرمجة لضمان التفاعل الصحيح مع المتصفح.\nالتعامل مع الفواصل والعناصر الفارغة في HTML: ما تحتاج معرفته #\rفي HTML، قد تلاحظ أن المتصفح يعامل الفواصل والفراغات البيضاء بطريقة مختلفة عن محرر النصوص.\nتعامل المتصفح مع الفواصل والفقرات\rفعندما تُدخل عدة فراغات أو أسطر جديدة في الكود، يقوم المتصفح بدمجها في فراغ واحد عند العرض. هذه الظاهرة تُعرف بدمج \u0026ldquo;الفراغات البيضاء\u0026rdquo;.\nيقصد بالفراغات البيضاء المسافات الفارغة وفواصل الأسطر التي نضيفها داخل الكود لجعله منظمًا.\nومع ذلك، لا يأخذ المتصفح بعين الاعتبار هذه الفراغات تلقائيًا، لذلك إذا أردت تقسيم النصوص على أسطر متتالية في المتصفح، فعليك استخدام وسم مخصص لذلك.\nوسم br (Break Line) - كسر السطر\nوسم br فى لغة HTML\rوسم \u0026lt;br\u0026gt; هو مثال جيد على كيفية التحكم بتنسيق النصوص؛ فهو يكسر السطر ويبدأ سطرًا جديدًا دون الحاجة إلى وسم إغلاق،\nنظرًا لأنه لا يحتوي على محتوى داخلي. مثل هذه الوسوم تُسمى \u0026ldquo;عناصر فارغة\u0026rdquo; أو \u0026ldquo;عناصر خالية\u0026rdquo; لأنها تؤدي وظائف بسيطة دون الحاجة لإضافة محتوى بين الوسمين.\nإلى جانب \u0026lt;br\u0026gt;, هناك أيضًا وسم \u0026lt;img\u0026gt; المستخدم لإدراج الصور، والذي يعتبر أيضًا عنصرًا فارغًا سنستعرضه لاحقًا.\nكيفية إنشاء الفقرات في HTML لتنظيم محتوى الويب #\rرغم أن وسم \u0026lt;br\u0026gt; مفيد لإضافة فواصل أسطر، إلا أن تنظيم محتوى الويب يتطلب أحيانًا تقسيم النص إلى فقرات واضحة ومنسقة، خاصة عند كتابة مقالات أو قصص.\nفي HTML، يُستخدم عنصر \u0026lt;p\u0026gt; لإنشاء فقرة جديدة. هذا الحرف اختصار لكلمة \u0026ldquo;فقرة\u0026rdquo; (Paragraph) ويعتمد على وسم افتتاحي ووسم إغلاق أيضا كما فى المثال.\n\u0026lt;p\u0026gt;New Paragraph\u0026lt;/p\u0026gt; لنقم بتحويل هذه النصوص إلى فقرات.\nإستخدام الفقرات فى HTML\rعند إعادة تحميل الصفحة، ستظهر الفقرات مفصولة بشكل مرتب بهوامش صغيرة بين كل فقرة وأخرى، مما يُعطي النص مظهرًا منظمًا وسهل القراءة.\nاستخدام عناصر \u0026lt;p\u0026gt; لتنظيم الفقرات يساعد المتصفح على فهم بنية النص وليس فقط عرضه بصريًا. ستتعلم لاحقًا كيفية تخصيص مظهر الفقرات باستخدام CSS للتحكم الكامل في تنسيق النص.\nالفرق بين الفواصل والفقرات في HTML: فهم أساسي لتنسيق المحتوى #\rفي HTML، لدينا طريقتان لتقسيم النص إلى أسطر: وسم \u0026lt;br\u0026gt;, ووسم الفقرة \u0026lt;p\u0026gt;. بينما يعمل \u0026lt;br\u0026gt; كعنصر فارغ لإضافة فاصل أسطر فقط، فإن عنصر \u0026lt;p\u0026gt; يُستخدم لإنشاء فقرة تحتوي على نص كامل.\nوسم \u0026lt;br\u0026gt; يقوم ببساطة بإنهاء السطر الحالي والانتقال إلى السطر التالي، بينما وسم \u0026lt;p\u0026gt; يُعطي الفقرة خاصية إضافية عبر إنشاء \u0026ldquo;كتلة\u0026rdquo; تحتوي النص.\nالكتل تساعد في تنسيق المحتوى، حيث يكون لكل فقرة مساحة خاصة بها على الصفحة. هذه الكتلة تتضمن هوامش تلقائية فوق وتحت الفقرة، مما يسهل القراءة ويفصل النصوص بشكل مريح للعين.\nتحسين تصميم النصوص في HTML باستخدام الوسوم الأساسية #\rوسوم sub \u0026 sup \u0026 mark فى HTML\rبعد التعرف على الفواصل، الفراغات، والفقرات، دعونا نستكشف بعض عناصر HTML الأخرى التي تضيف تحسينات إلى النص. هذه العناصر تُعرف بـ \u0026ldquo;العناصر الطباعية\u0026rdquo; وتستخدم لتوجيه المتصفح لعرض النص بتنسيق مختلف.\nلنبدأ بنص عادي. إذا حفظناه وفتحناه في المتصفح، سيظهر النص ببساطته. ولكن، ماذا لو أردنا إضافة تأثيرات للتأكيد؟ يمكننا استخدام وسم \u0026lt;em\u0026gt; أو \u0026lt;strong\u0026gt; لإبراز النص بشكل مائل أو بخط عريض كما رأينا مسبقاٌ، لكن هذه المرة سنتعرف على عنصر HTML آخر: \u0026lt;mark\u0026gt;. هذا الوسم يُستخدم لتظليل النص كما لو تم تمرير قلم ملون عليه.\nويعتبر أحد الوسوم الدلالية (Semantic Elements) فى HTML والتى تعبر عن وظيفتها بشكل مباشر.\nThis is a \u0026lt;mark\u0026gt;Highlight Text\u0026lt;/mark\u0026gt; عند تجربة الوسم في المتصفح، ستلاحظ أن النص يظهر مظللاً باللون الأصفر! يمكنك أيضًا تجربة عناصر أخرى مثل \u0026lt;sub\u0026gt; و\u0026lt;sup\u0026gt; التي تضيف رموزًا على شكل نص منخفض (أسفل النص العادي) أو نص مرتفع (أعلى النص العادي).\n\u0026lt;p\u0026gt;H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;2\u0026lt;sup\u0026gt;4\u0026lt;/sup\u0026gt;\u0026lt;/p\u0026gt; HTML: العناصر الكتلية مقابل العناصر السطرية – دليلك لفهم الفروق #\rمع التعمق في مشاريع HTML، ستواجه نوعين أساسيين من العناصر: العناصر الكتلية والعناصر السطرية. عنصر \u0026lt;p\u0026gt;، على سبيل المثال، يُعد \u0026ldquo;عنصر كتلة\u0026rdquo; لأنه يُنشئ مربعًا غير مرئي حول محتواه.\nأما العناصر التي لا تنشئ كتلاً، مثل \u0026lt;em\u0026gt;, \u0026lt;mark\u0026gt;, و\u0026lt;br\u0026gt;, فتُعرف بـ \u0026ldquo;العناصر المضمنة\u0026rdquo;. العناصر الكتلية، مثل القوائم، الجداول، والعناوين، تُنشئ مساحات منفصلة، حيث يقوم المتصفح بتخصيص مربع خاص لكل منها. في المقابل، العناصر المضمنة، مثل الروابط والصور، تتدفق ضمن النص ولا تشغل مساحة منفصلة.\nبمرور الوقت ومع تطور معرفتك في HTML، ستتعرف على كيفية استخدام العناصر الكتلية والمضمنة لبناء صفحات ويب متناسقة وفعّالة.\nالتداخل في HTML: استخدام العناصر المدمجة بذكاء #\rالتداخل فى لغة HTML\rالتداخل هو مفهوم مهم في HTML ويعني وضع عنصر داخل عنصر آخر. مثال بسيط يشبه هذا التداخل هو \u0026ldquo;الدمى الروسية\u0026rdquo;؛ حيث يمكنك فتح الدمية الأكبر لتجد بداخلها أخرى أصغر، وهكذا. وبالمثل، يمكن وضع عناصر HTML داخل عناصر أخرى، ولكن يجب الالتزام ببعض القواعد.\nعلى سبيل المثال، يمكن أن تحتوي الفقرة على عناصر \u0026lt;em\u0026gt; بداخلها لتأكيد النص. هذا التداخل شائع في مستندات HTML؛ حيث توضع العناصر الكبيرة، مثل الفقرات و\u0026lt;div\u0026gt;, وتحتوي على عناصر أصغر لتنسيق النص.\nيمكنك وضع عنصر \u0026lt;sup\u0026gt; داخل \u0026lt;em\u0026gt;، مثلاً، ليظهر النص مميزًا ومرتفعًا في آنٍ واحد.\nومع ذلك، هناك بعض التركيبات غير المسموحة؛ فلا يمكن وضع فقرة داخل فقرة أخرى، كما لا يمكن أن تتداخل العناصر دون ترتيب صحيح.\nعمومًا، هذه القواعد طبيعية ومنطقية، لكنها تسهم في تنظيم هيكل المستند بشكل أنيق وواضح.\nدليل HTML: أهمية وسم li في إنشاء القوائم المنظمة #\rبعض عناصر HTML تُستخدم فقط داخل عناصر معينة أخرى؛ إذ لا تكون ذات معنى بمفردها. من أمثلة هذه العناصر عنصر القائمة \u0026lt;li\u0026gt;.\nيعد \u0026lt;li\u0026gt; عنصرًا لقائمة تتضمن عناصر مثل قائمة تسوق، أو قائمة مهام، أو جدول محتويات. وهذا العنصر لا يمكن أن يظهر بمفرده؛ فهو يتطلب أن يكون ضمن قائمة مرتبة أو غير مرتبة.\nأنواع القوائم في HTML #\rالقوائم المرقمة وغبر المرقمة فى لغة HTML\rهناك نوعان من القوائم التي يمكن أن تحتوي على عناصر \u0026lt;li\u0026gt;:\nالقائمة المرتبة \u0026lt;ol\u0026gt;: تُستخدم عندما تكون هناك حاجة لترتيب عناصر القائمة بأرقام أو أحرف تلقائيًا. القائمة غير المرتبة \u0026lt;ul\u0026gt;: تُستخدم لإنشاء قوائم تعرض نقاطًا أو دوائر أمام كل عنصر، دون الحاجة لترتيب العناصر. لماذا يجب أن تكون عناصر li داخل قوائم؟ #\rالسبب في عدم ظهور عناصر \u0026lt;li\u0026gt; بمفردها هو أن القوائم المرتبة وغير المرتبة تُعرض بشكل مختلف؛ فبدون إدراجها ضمن \u0026lt;ol\u0026gt; أو \u0026lt;ul\u0026gt;, لن يعرف المتصفح إذا كان ينبغي وضع رقم أو نقطة أمام العنصر. لذلك، تشترط HTML أن تكون عناصر \u0026lt;li\u0026gt; داخل إما \u0026lt;ol\u0026gt; أو \u0026lt;ul\u0026gt; لضمان ظهورها بالشكل المناسب.\nالتداخل في القوائم #\rيمكنك أيضًا تداخل القوائم ضمن قوائم أخرى. فمثلاً، قد تحتاج إلى قائمة مهام تحتوي على خطوات داخلية لتنفيذ بعض المهام. مثال على ذلك: \u0026ldquo;تعلم لغة HTML\u0026rdquo;، قد تحتوي على خطوات مثل \u0026ldquo;تعلم الوسوم\u0026rdquo;، ويكون ذلك العنصر \u0026lt;li\u0026gt; متداخلًا داخل عنصر \u0026lt;ul\u0026gt; داخل عنصر \u0026lt;li\u0026gt; آخر.\nعلامات إغلاق عناصر li #\rوسم الإغلاق فى عنصر القائمة غير ضرورى\rنظرًا لأن عنصر \u0026lt;li\u0026gt; يُستخدم فقط ضمن قائمة ولا يمكن أن يظهر مباشرةً داخل \u0026lt;li\u0026gt; آخر، فإن HTML لا تتطلب منك كتابة علامات الإغلاق لعناصر \u0026lt;li\u0026gt;. إذا وجد المتصفح علامة فتح \u0026lt;li\u0026gt; جديدة داخل قائمة، فإنه يفترض انتهاء العنصر السابق تلقائيًا. ومع ذلك، قد يفضل بعض مطوري الويب كتابة علامات الإغلاق لعناصر \u0026lt;li\u0026gt; دائمًا لجعل الشيفرة أكثر وضوحًا.\nتذكر أنه يجب دائمًا كتابة علامات إغلاق لعناصر \u0026lt;ul\u0026gt; و \u0026lt;ol\u0026gt;, لأن المتصفح يحتاج إلى هذه العلامات ليعرف متى تنتهي القائمة بشكل كامل ولا يقوم بإدراج أي محتوى إضافي ضمن القائمة بالخطأ.\nفهم بنية عناوين الويب (URLs) لتصفح أفضل باستخدام HTML #\rلتعلم كيفية إضافة روابط وصور إلى صفحات الويب الخاصة بك، هناك شيء يجب تغطيته في الطريق: عناوين الويب. لن تكون شبكة الويب شبكة الويب بدون عناوين الويب. كل موقع، صفحة، صورة، وملف على الويب له عنوان خاص به.\nهذه العناوين هي الطريقة التي يتبع بها المتصفح الروابط من واحد إلى آخر، وهي أيضًا جزء كبير من كيفية توجيه المستخدمين لمتصفحهم للذهاب إلى موقع ويب في المقام الأول.\nكلما أضفت رابطًا في كود الـ HTML، ستستخدم هذه العناوين. في وسم \u0026lt;a\u0026gt;، هناك مصطلحات تقنية لهذه العناوين.\n\u0026lt;a href=\u0026#34;URL\u0026#34;\u0026gt;Click here\u0026lt;/a\u0026gt; ما هو URL؟ #\rكل صفحة على الإنترنت لها عنوان فريد يسمى \u0026ldquo;عنوان الويب\u0026rdquo; أو \u0026ldquo;URL\u0026rdquo; اختصاراً. هذا العنوان هو عبارة عن مجموعة من الحروف والأرقام التي تخبر الكمبيوتر أين يجد هذه الصفحة.\nهذا يعني ببساطة أنه عنوان يُخبر متصفحك بكيفية تحديد موقع مورد معين، مثل ملف، بطريقة موحدة. كلمة \u0026ldquo;موحد\u0026rdquo; هنا تعني ببساطة أنه متسق. هناك طرق مختلفة لكتابة URLs، وعندما يقرأ الناس هذه العناوين، سترى أحيانًا \u0026ldquo;http://\u0026rdquo; أو \u0026ldquo;https://\u0026rdquo; في المقدمة،\nالعنوان يتكون من عدة أجزاء أساسية:\nالبروتوكول (http:// أو https://) اسم النطاق (مثل example.com) المسار (path) الإستخدام الصحيح للروابط فى لغة HTML\rقد ترى www.example.com. يعمل ذلك بشكل جيد إذا كتبته في المتصفح لأن المتصفح يعرف أنك تريد الذهاب إلى ذلك الموقع. لكن إذا استخدمت ذلك في كود HTML، فلن يعمل لأن المتصفح يحتاج إلى معرفة كيفية الإشارة إلى ملف بهذا الاسم.\nأنواع URLs #\rالروابط المطلقة:\nتبدأ بـ (http:// أو https://) تستخدم للإشارة إلى مواقع خارجية مثال: https://example.com/page.html الروابط النسبية:\nتستخدم للإشارة إلى ملفات في نفس الموقع لا تحتاج إلى كتابة النطاق كاملاً مثال: images/photo.jpg عند كتابة URLs في HTML، يجب أن نكون حذرين لنقدم للمتصفح كل المعلومات التي يحتاجها. يمكنك أحيانًا اتخاذ اختصارات، ولكن في الوقت الحالي، سنكتب URLs بالشكل الكامل. أو ما يطلق عليه بالروابط مطلقة.\nربما رأيتها من قبل، ولكن دعنا نستعرض شكلها المطلق. تبدأ عناوين الويب عادةً بـ http:// أو https://، مما يُخبر المتصفح ما إذا كان يجب استخدام تشفير آمن للاتصال بخادم الويب.\nيبدأ URL لملف على محرك محلي (جهاز الكمبيوتر خاصتك) بـ file://.\n\u0026ldquo;HTTP\u0026rdquo; و\u0026quot;HTTPS\u0026quot; و\u0026quot;file\u0026quot; هي جميعها بروتوكولات، أو طرق يمكن للمتصفح من خلالها الحصول على شيء ما. بعد البروتوكول، نرى دائمًا نقطتين وشرطتين تفصلان البروتوكول عن بقية URL.\nالجزء التالي الذي سترى هو اسم النطاق، الذي يُخبر المتصفح بالخادم الذي يجب الاتصال به. لن تحتوي عناوين URL المحلية على هذا، لأنه لا يوجد خادم، بل إن المتصفح يقرأ من جهاز الكمبيوتر الخاص بك.\nلهذا السبب، إذا أعطيت شخصًا ما عنوان URL لملف على جهازك، فمن المحتمل ألا يتمكن من رؤيته، لأن الملف ليس على جهاز الكمبيوتر الخاص به.\nآخر شيء يظهر في عنوان URL الكامل هو مسار الملف، أي اسم الدليل والملف الذي يشير إليه عنوان URL. قد يكون هذا أحيانًا فارغًا أو شريحة مفردة (/) إذا كنت تربط الصفحة الرئيسية أو الصفحة العلوية من موقع ويب كما سنرى.\nإنشاء الروابط في HTML: خطوات فعالة باستخدام وسم a #\rتجربة النصوص الفائقة تعني أنه يمكنك أن تمتلك مستندات نصية مثل صفحات الويب، ولكنها تحتوي أيضًا على إشارات بينها وبين بعضها البعض. على الويب، هذه الإشارات هي الروابط. كل مرة تنقر فيها على رابط في صفحة ويب، فإنك تستخدم هذه الروابط.\nعندما تكتب HTML، يمكنك الربط بين صفحات الويب، سواء كانت صفحتك الخاصة أو صفحات الآخرين. هذه كيفية عمل محرك البحث، على سبيل المثال.\n\u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt;Visit Link\u0026lt;/a\u0026gt; إليك كيف تصنع رابطًا في HTML الخاص بك. العنصر الذي يُستخدم لإنشاء الروابط يُسمى \u0026lt;a\u0026gt;. ليس مُسمى \u0026ldquo;رابط\u0026rdquo;، بل هو \u0026ldquo;a\u0026rdquo; لأنه يشير إلى \u0026ldquo;Anchor\u0026rdquo; (مرساة)، حيث يربط عنصر \u0026lt;a\u0026gt; عنوانًا مع قطعة نصية على الصفحة. قد يبدو هذا غريبًا، لكن هكذا هو الأمر.\nلا يمكننا استخدام \u0026lt;a\u0026gt; بمفردها. هناك بعض الأشياء التي يجب أن يتضمنها عنصر \u0026lt;a\u0026gt; لإنشاء رابط: النص الذي ينقر عليه المستخدم لاتباع الرابط ورابط URL للصفحة المرتبطة. وإليك كيف سنقوم بذلك: تبدأ العلامة الافتتاحية لعنصر \u0026lt;a\u0026gt; مع جزء إضافي لم نره من قبل في نص HTML، وهو href=\u0026quot;رابط URL\u0026quot;.\nهذا مثال على سمة HTML، وهي قطعة إضافية من البيانات تأتي مع العنصر وتمنحه معنى إضافيًا. الجزء الذي قبل علامة المساواة هو اسم السمة، والجزء الذي بعده في علامات اقتباس مزدوجة هو قيمة السمة. هنا الاسم هو href، والقيمة هي http://example.net.\nhref تعني \u0026ldquo;مرجع النص الفائق\u0026rdquo; وتُستخدم مع علامات \u0026lt;a\u0026gt; وبعض العلامات الأخرى التي ترتبط بآخرين. لن تراها أبدًا في علامة فقرة أو علامة تأكيد أو شيء من هذا القبيل.\nثم هناك محتويات عنصر \u0026lt;a\u0026gt;، والتي تصبح النص الذي يظهر على الصفحة، ثم هناك علامة الإغلاق \u0026lt;/a\u0026gt;. قد تلاحظ أنها لا تحتوي على أي سمات.\nسمات href دائمًا تكون في العلامة الافتتاحية في بداية العنصر. هذا هو كل ما يتعلق بإنشاء الروابط في HTML.\nلقد أنشأت عنصرًا مع علامة بدء وعلامة إغلاق. تحتوي علامة البدء على سمة href مع علامة مساواة وبداخل علامات اقتباس مزدوجة رابط URL للصفحة التي نريد الربط بها، ومحتويات العنصر تكون النص الذي ينقر عليه المستخدم، ثم هناك علامة الإغلاق \u0026lt;/a\u0026gt;.\nكيفية إدراج الصور في HTML لجعل صفحاتك أكثر جاذبية #\rما كانت صفحات الويب لتكون بدون صور الدببة، أو الخرائط، أو الأخبار، أو الرسوم البيانية، أو إعلانات البانر. الصور جزء كبير من نجاح الويب، لذلك قد تتساءل عن كيفية تضمين الصور في صفحات الويب الخاصة بك،\nومن المحتمل أن يفاجئك أنه يوجد عنصر HTML مخصص لذلك. هذا العنصر هو \u0026lt;img\u0026gt; للصورة، ويعمل بشكل مشابه لعنصر \u0026lt;a\u0026gt; للروابط، لكن مع بعض الاختلافات المهمة.\n\u0026lt;img src=\u0026#34;path/to/image.jpg\u0026#34; alt=\u0026#34;وصف الصورة\u0026#34;\u0026gt; يستخدم عنصر \u0026lt;a\u0026gt; للروابط سمة واحدة تُسمى href، وقيمتها هي عنوان URL للصفحة التي تريد الربط بها. لكن عنصر \u0026lt;img\u0026gt; يستخدم سمتين: src و alt.\nsrc تعني \u0026ldquo;المصدر\u0026rdquo;، وهي عنوان URL للصورة التي تريد ظهورها في صفحة الويب الخاصة بك. و\nalt تعني \u0026ldquo;بديل\u0026rdquo;، وهي وصف نصي لتلك الصورة يظهر إذا لم يتم جلب الصورة بشكل صحيح. النص الذي يظهر هنا يُسمى عادة \u0026ldquo;نص البديل\u0026rdquo;.\nتحتاج إلى تضمين كلا السمتين عند كتابة HTML. سمة src تُخبر المتصفح من أين يحصل على الصورة، ومصدر الصورة، بينما سمة alt تُخبر المتصفح بالنص الذي يجب عرضه إذا لم يتمكن من عرض الصورة.\nعلى سبيل المثال، سيتم عرض كلمة \u0026ldquo;وصف الصورة\u0026rdquo; إذا كان الملف مفقودًا من الخادم فى المثال السابق، أو إذا توقفت اتصال الشبكة للمستخدم قبل تحميل الصورة، مثلما يحدث على الهواتف المحمولة، أو إذا كان المستخدم لا يمكنه رؤية الصور، مثل المستخدمين المكفوفين.\nشيء يجب أن تضعه في اعتبارك هو أن وضع عنصر \u0026lt;img\u0026gt; في ملف HTML الخاص بك لا يُدخل ملف الصورة في ملف HTML، بل يُخبر المتصفح أين يجد ذلك الملف.\nيجب أن يكون المصدر موجودًا في مكان ما، سواء كان على القرص المحلي الخاص بك أو على خادم.\nعنصر \u0026lt;img\u0026gt; هو عنصر فارغ أو \u0026ldquo;بدون محتوى\u0026rdquo;، مثل \u0026lt;br\u0026gt;. ليس له نص كمحتوى، ولا توجد علامة إغلاق له. تذكر أن محتويات عنصر HTML ستكون نصًا بين علامة فتح وعلامة إغلاق، مثل عنصر \u0026lt;p\u0026gt;.\nولكن في حالة استخدامنا هنا، فإن src وalt في علامة الصورة ليست محتويات، بل هي سمات HTML لهذا العنصر.\nوعنصر \u0026lt;img\u0026gt; هو عنصر سطري، يمكنك وضع صورة مباشرة في وسط قطعة من النص. إذا كانت الصورة أطول من النص المحيط بها، فسوف تؤثر على تنسيق النص\nالروابط النسبية والمطلقة في HTML: الفرق وأفضلية الاستخدام #\rمن موقع يسمى placebear.com الذي يحتوي على الكثير من صور الدببة. إذا كنت تريد صورة بحجم معين، مثل 800 × 600 بكسل، سيوفر لك placebear.com واحدة، طالما أنك موافق على أن تكون صورة قط. لوضع هذه الصورة في ملف testing.html, الخاص بي،\nإدراج الصور من موقع PLACEBEAR\rسأستخدم علامة \u0026lt;img\u0026gt; كما يلي، وعندما يفتح المتصفح هذا الملف HTML، سوف يذهب إلى خادم placebear.com ويجلب لك تلك الصورة ويضعها في الصفحة.\nلكن ماذا لو كان لدي ملف صورة هنا على جهاز الكمبيوتر الخاص بي، في الواقع ماذا لو كان موجودًا في نفس المجلد الذي يحتوي على ملف HTML الخاص بي؟ هل يجب أن أضعه على خادم في مكان ما لأشير إليه باستخدام علامة الصورة؟ تبين لي أنه لا، بدلاً من ذلك يمكنني وضع اسم الملف فقط في علامة الصورة.\nلماذا يعمل ذلك؟ حسنًا، ينظر المتصفح إلى سمة src هنا ولا يرى عنوان URL كامل. لا يبدأ بـ http:// أو file:// أو شيء من هذا القبيل. بالتحديد، لا يوجد :// في أي مكان.\nولدى المتصفح قاعدة لما يجب فعله عندما يحدث ذلك. في HTML، ينظر إلى اسم الملف هذا كنوع من مستند HTML. هذا يُسمى عنوان URL النسبي.\nحاليًا، ملف HTML الخاص بي على جهاز الكمبيوتر الخاص بي، ويراه المتصفح بعنوان URL مثل file:///C:/Users/Mahmoud/Downloads/testing.html. لذا عندما يشير هذا الملف إلى عنوان URL النسبي bear.jpg،\nسيبحث عن ذلك الملف في نفس الدليل، حتى وإن كان يتعين علي كتابة bear.jpg فقط في HTML. سيقوم المتصفح بتحميل نفس عنوان URL كـ file:///C:/Users/Mahmoud/Downloads/bear.jpg.\nالروابط النسبية\rمتى تختار الروابط النسبية أو الكاملة في تطوير صفحات HTML؟ #\rاستخدام عناوين URL النسبية يتطلب كتابة أقل، لكن هذه ليست الميزة الوحيدة. إذا كنت أرغب في إرسال هذه الصفحة الإلكترونية إلى شخص آخر،\nحسنًا، فإن HTML نفسها لا تحتوي على ملف صورة الدببة. يجب أن أرسل لهم ملف الصورة أيضًا. ولكن إذا أرسلت هذا الملف إلى صديقى، فلن يظهر على جهاز الكمبيوتر الخاص به في مسار يسمى Users/Mahmoud/Downloads/.\nإذا كانت لدي عناوين URL في HTML التي تتعلق بجهاز الكمبيوتر الخاص بي، فلن تعمل على جهاز كمبيوتر شخص آخر.\nلذا كقاعدة عامة، إذا كنت تشير إلى صورة أو رابط على خادم ويب مثل placebear.com، فمن المعتاد استخدام عنوان URL كامل مثل https://placebear.com/800/600. إذا كنت تشير إلى صورة أو ملف آخر تتبادله مع ملف HTML الخاص بك، يجب أن تستخدم عناوين URL النسبية.\nبالمناسبة، عناوين URL النسبية هي السبب وراء عدم تمكنك من إنشاء رابط \u0026lt;a\u0026gt; إلى Google بكتابة google.com داخل سمة href فقط في HTML.\nعلى الرغم من أن google.com يعمل إذا كتبته مباشرة في متصفحك، فإن عنوان URL بدون :// يُعتبر دائمًا عنوان URL نسبي. لذا سينظر المتصفح إلى ملف يسمى google.com، وهو عادة ليس ما تريده.\nلذلك إذا كنت تريد إنشاء رابط لموقع آخر، يجب عليك وضع http:// أو https:// في المقدمة.\nبنية وثيقة HTML: العناصر الأساسية في كل وثيقة HTML #\rما كنت تكتبه في هذا الدرس هو في الحقيقة ما يُسمى \u0026ldquo;مقتطفات HTML\u0026rdquo;. إنها قطع من HTML يمكن للمتصفح عرضها، لكن هناك بعض الأشياء الإضافية التي تحتاج إلى إضافتها لتحويلها إلى مستند HTML كامل، أي صفحة ويب.\nالـ HTML الذي كتبته حتى الآن يشبه جملًا قليلة من وسط قصة، لكن القصة عادةً ما تحتوي على أشياء مثل عنوان ومؤلف، وليس مجرد جمل. وبالمثل، هناك بعض الأشياء التي تحتاج إلى إضافتها إلى مستند HTML لجعله مكتملًا.\nأولاً، كيف يعرف المتصفح نوع المستند؟ فقط بامتداد اسم الملف؟ لا، الأمر أكثر تعقيدًا من ذلك. لقد كانت HTML موجودة لسنوات عديدة، وظهرت العديد من الإصدارات المختلفة من HTML.\nنحدد نوع HTML الذي نستخدمه عن طريق وضع علامة DOCTYPE في أعلى الملف. وتبدو مختلفة عن النصوص الأخرى. في الإصدارات السابقة من HTML، كانت علامات DOCTYPE طويلة ومعقدة.\nفي النهاية، قرر المهندسون الذين صمموا HTML تبسيطها إلى الأساسيات فقط. في HTML الحديثة، تبدو علامة DOCTYPE هكذا:\n\u0026lt;!DOCTYPE html\u0026gt; يجب أن تكتبها بالضبط بهذه الطريقة في كل مستند HTML تكتبه.\nماذا تفعل علامة DOCTYPE؟ إنها تُخبر المتصفح أننا نريد أن يُعالج هذا المستند كـ HTML حديث، بدلاً من واحد من تلك الإصدارات القديمة.\nليست هذه مسألة كبيرة بالنسبة لـ HTML البسيط، لكنها تمنع حدوث مشاكل عندما يصبح HTML الخاص بك أكثر تعقيدًا. بدون علامة DOCTYPE، سيدخل المتصفح فيما يُسمى \u0026ldquo;وضع التوافق\u0026rdquo;،\nحيث يحاول أن يكون أكثر توافقًا مع الأشكال القديمة من HTML، وهو عمومًا ليس شيئًا نريده اليوم. لذا، فإن وضع علامة DOCTYPE في مستنداتك هو الطريقة الصحيحة للقيام بذلك.\nهيكل HTML: مكونات الرأس والجسم لتحقيق تصميم مثالي #\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;عنوان الصفحة\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- المحتوى هنا --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; كل مستند HTML يتكون من جزئين. حتى الآن في هذه الدروس، عدا علامة DOCTYPE، كنت تعمل في الجزء الثاني من هذه الأجزاء، وهو جسم المستند. هنا يتم وضع محتويات المستند، مثل الفقرات، والصور، والقوائم، وأشياء أخرى ستظهر على الشاشة للمستخدم. الجزء الآخر من مستند HTML يُسمى الرأس.\nنضع بعض المعلومات المهمة حول المستند في الرأس، وكلا من الرأس والجسم يحدثان داخل عنصر HTML واحد مع علامة افتتاحية وأخرى إغلاق. إليك بعض العناصر التي يمكن أن تظهر في رأس ملف HTML:\nالعنوان: هو الجزء الوحيد المطلوب في الرأس، ويخبر المتصفح بعنوان الصفحة الذي يجب وضعه على علامة التبويب التي تعرض المستند. نضع العنوان داخل عنصر \u0026lt;title\u0026gt; مع علامة افتتاحية وأخرى إغلاق.\nكيفية التحقق من صحة أكواد HTML لتحسين تجربة المستخدم #\rهناك الكثير من القواعد حول كيفية كتابة HTML، وهذه القواعد تشبه قواعد الإملاء والنحو في اللغة. لكن كيف يمكنك التأكد حقًا من أن HTML الخاصة بك مكتوبة بشكل صحيح من حيث الإملاء والنحو؟\nللبداية، يمكنك استخدام المتصفح. إذا كانت الصفحة تبدو صحيحة في متصفحك، فهل يعني ذلك أنها جيدة؟ ليس بالضرورة. قد تحتوي على أخطاء يمكن لمتصفحك التعامل معها، لكن بعض المتصفحات الأخرى قد لا تستطيع.\nمن المهم أن تجعل المتصفحات تعمل بشكل متسق مع HTML الصحيح، وسيكون من الصعب اختبار كل شيء على كل متصفح موجود. لحسن الحظ، هناك وسيلة للتحقق من HTML الخاصة بك.\nهناك أدوات تُسمى \u0026ldquo;مدققات HTML\u0026rdquo; (HTML validators) التي ستتحقق من جميع التفاصيل، بدءًا من التحقق من أن العلامات مكتوبة بشكل صحيح، إلى بعض القواعد المعقدة، مثل ضرورة وجود عناصر القائمة داخل قائمة.\nأشهر مدقق HTML هو validator.w3.org، الذي يديره الـ W3C (منظمة الويب العالمية). هذه المنظمة هي التي تكتب المعايير لـ HTML ومكونات الويب الأخرى، لذا فهي في وضع جيد لتخبرك ما إذا كانت HTML الخاصة بك صحيحة أم لا.\nHTML Validation\rهناك ثلاث طرق مختلفة يمكنك من خلالها استخدام خدمة المدقق على خادم ويب عام: يمكنك ببساطة إعطاء عنوان URL وسيتولى تنزيل والتحقق من HTML. ولكن إذا كنت تعمل على ملف HTML على جهاز الكمبيوتر الخاص بك، فستحتاج إلى استخدام إحدى الخيارات الأخرى: يمكنك رفع الملف أو نسخ المحتوى من محررك ولصقه في المدقق مباشرة.\nعند القيام بذلك، ستحصل على رسالة مثل هذه تخبرك ما إذا كانت هناك أخطاء في HTML الخاصة بك. إذا كانت هناك أخطاء، فستحصل على رسالة مثل: عنصر \u0026lt;head\u0026gt; مفقود عنصر فرعي مطلوب وهو \u0026lt;title\u0026gt;. بسبب خطأ فى كتابة وسم العنوان.\nهذه طريقة تقنية جدًا لقول إن مستند HTML الكامل يحتاج إلى عنصر \u0026lt;title\u0026gt; داخل عنصر \u0026lt;head\u0026gt;.\nHTML Validation Error\rعندما تحصل على أخطاء مثل هذه، قم بإصلاحها في محرر النصوص الخاص بك، ثم الصق أو ارفع النسخة الجديدة وتحقق منها مرة أخرى. عندما تكون صحيحة، ستحصل على رسالة خضراء لطيفة مثل هذه، تقول إنه لم تكن هناك أخطاء أو تحذيرات لتظهر.\nHTML Validation Success\rالخاتمة #\rوختامًا، تعلم لغة HTML هو خطوة مثيرة نحو بناء مهارات جديدة فى مجال تطوير الويب.\nلا تتردد في طرح أي تساؤلات أو مشاركتنا تجربتك في التعليقات – فنحن هنا لنساعدك في رحلتك نحو الاحتراف. ما هو السؤال الأول الذي يخطر ببالك حول لغة HTML ولم نتطرق إليه حتى الأن؟ شاركنا رأيك!\nالأسئلة الشائعة #\rكم احتاج من الوقت لتعلم HTML؟ #\rيمكنك تعلم أساسيات HTML في أقل من أسبوع إذا خصصت بضع ساعات يوميًا، بينما الإحتراف سوف يتطلب منك ممارسة مستمرة.\nهل يمكن تعلم HTML من الهاتف؟ #\rنعم، يمكنك تعلم HTML من الهاتف باستخدام تطبيقات تحرير الكود والبرامج التعليمية المتاحة عبر الإنترنت.\nهل لغة HTML سهلة؟ #\rنعم، HTML تُعتبر من أسهل لغات البرمجة، وهي مناسبة للمبتدئين بسبب بساطتها وقواعدها الواضحة.\nكيف أستخدم HTML؟ #\rتُستخدم HTML لإنشاء هيكل صفحات الويب. يمكنك البدء بكتابة الأكواد في أي محرر نصوص وعرضها في متصفح.\n","date":"2 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/beginner-guide-learn-html/","section":"Posts","summary":"بعد أن تعرفنا على أساسيات تطوير الويب، حان الوقت لنتعلم أساسيات لغة HTML، العمود الفقري لعالم تطوير الويب.","title":"دليل المبتدئين لتعلم HTML: أول خطوة في عالم تطوير الويب","type":"posts"},{"content":"للبدء في رحلة تعلم برمجة الويب، من الضروري أن يكون لديك معرفة بأساسيات البرمجة. في هذا الدليل، سنجيب عن بعض الأسئلة التي تدور في ذهن أي مبتدئ ينوي الدخول إلى عالم تطوير المواقع الإلكترونية، وأولها: ما هو تطوير الويب؟\nمقدمة فى تطوير الويب\rسنتعرف معًا على مفهوم الويب، ثم سنستعرض لغة الهيكلة الأساسية في هذا المجال، وهي HTML. سنبدأ بتعلم أساسيات HTML، اللغة المستخدمة لبناء صفحات الويب وكتابتها.\nكما سنتطرق إلى مفهوم الروابط أو URLs، التي تمثل عناوين تشير إلى مستندات ومواقع أخرى على الإنترنت. خطوة بخطوة، سنصل إلى مرحلة إنشاء صفحتك الأولى على الويب. ولكن قبل كل شيء، دعونا نبدأ بفهم أساسيات الويب وأين يجب أن نبدأ في هذا المجال الواسع.\nما المقصود بتطوير الويب (Web Development) #\rهو أحد أشهر مجالات البرمجة والعمل الحر. ويختص مجال تطوير الويب بإنشاء وبرمجة المواقع الإلكترونية وتطبيقات وصفحات الويب.\nما هى مجالات تطوير الويب؟ #\rوبالنسبة لك تعلم برمجة الويب هو أحد أهم القرارات التي ستتخذها في حياتك إذا كنت شغوفاٌ بهذا المجال. وعندها سيتعين عليك الأختيار من بين أهم ثلات مجالات في تطوير المواقع الإلكترونية:\nتطوير الواجهة الأمامية Front-End تطوير الواجهة الخلفية Back-End المطور المتكامل أو الشامل Fullstack سيتم شرح كل هذا في تدوينات مستقلة. في هذا المقال سنأخذ فكرة عامة عن المجال فقط بدون الدخول في تفاصيل كثيرة.\nالمهتم بهذا المجال عليه أن يأخذ نظرة سريعة على بعض المفاهيم الأساسية ومنها تعريف الويب.\nما هو الويب: كيف يعمل وكيف يُبنى؟ #\rما هو web\rعرفنا سابقاٌ ما هو تخصص تطوير الويب. ولكن يجب علينا الأن أن نقوم بتعريف الويب ومعرفة أيضاٌ البنية الأساسية له.\nالويب هو مجموعة من المستندات المكتوبة بلغة HTML، إلى جانب موارد أخرى مثل الصور والفيديوهات، وكذلك البرامج والخدمات التي تتفاعل مع بعضها البعض لتنتج صفحة ويب مميزة.\nكل شيء يمكنك الوصول إليه باستخدام متصفح الويب الخاص بك هو جزء من الويب، وهذه الموارد موزعة على آلاف الأنظمة الحاسوبية المختلفة وهو ما يطلق عليه (السيرفر).\nالويب هو نظام HyperText (نص تشعبي)، مما يعني أن صفحات الويب يمكن أن تحتوي على روابط لصفحات أخرى، ويمكن للمستخدمين اتباع تلك الروابط للوصول إلى المعلومات المطلوبة.\nهذا ما تفعله في كل مرة تنقر فيها على رابط في منشور مدونة أو مقال إخباري. نسمي هذه الروابط التشعبية (HyperLinks)، إختصاراٌ بمصطلح “اللينك”. والقدرة على الإنتقال من صفحة الى أخرى هي ما يجعل الويب مميزًا.\nتُستخدم هذه القدرة أيضًا عند تضمين صورة أو فيديو أو جزء من الكود في صفحة الويب. يعتبر HyperText عنصرًا مهمًا للغاية، حيث تُبنى جميع تقنيات الويب حول فكرة المستندات والبيانات التي يمكن أن ترتبط ببعضها البعض بطريقة تشعبية (HyperText).\nلهذا السبب يُطلق على الويب اسم “الشبكة العنكبوتية” نظرًا لتشعب وترابط الصفحات والمواقع والموارد الأخرى مع بعضها البعض مثل شبكة العنكبوت. كيف يعمل ذلك بالضبط؟ هذا ما سوف نتعلمه في هذا المقال.\nHTML: لغة بناء صفحات الويب الأساسية ولماذا هي مهمة؟ #\rلماذا تعتبر HTML أساس كل صفحة ويب\rلغة HTML، ليست لغة برمجة ولكن بدونها لا يمكن أن يتواجد الويب كما نعرفه الآن. فهي الهيكل الرئيسي لبناء صفحة الويب وأساس لتخطيط وبناء أي موقع ويب.\nكما سوف نتعرف مستقبلًا على الوسوم الخاصة بـلغة HTML، سوف نكتشف مدى أهمية هذه الوسوم في تشكيل صفحة الويب وتصميم الهيكل الرئيسى الخاص بها بالصورة التى تريدها بالضبط. وهي أول لغة سوف نقوم بتعملها من ضمن أساسيات تطوير الويب.\nتطور HTML: كيف شكلت مستقبل تطوير الويب؟ #\rشهدت لغة HTML (HyperText Markup Language) تطورات كثيرة منذ نشأتها لتصبح الركيزة الأساسية في تطوير الويب. فمنذ بداياتها، حين كانت تقديم القليل من الوسوم التي لا تكفي إلا لتنسيق النصوص وإدراج الروابط والصور وعمل صفحة ويب بسيطة،\nإلى أن ظهرت النسخة الأخيرة منها، HTML5 (الإصدار الخامس)، الذي جلب العديد من المميزات مثل التخزين المحلي (LocalStorage)، وCanvas API، وSVG.\nهذه المميزات مكّنت مطوري ومصممي الويب من تنفيذ أفكار إبداعية تتضمن رسومات متحركة وتفاعلية مثيرة على المتصفح مباشرة. ولا نعرف ماذا يخبئ لنا المستقبل!\nكيف يتواصل الإنترنت: فهم العلاقة بين المتصفحات والخوادم #\rكيف تعمل المتصفحات والخوادم معًا\rخادم الويب يتكون من؟ #\rفي الغالب. هذه الخوادم هي في الأساس أجهزة كمبيوتر، رغم أنها ليست مثل الجهاز الذي تستخدمه الآن، حيث تقوم بتشغيل برامج تستجيب لطلبات المتصفح.\nما وظيفة الخادم؟ #\rوظيفة الخادم (أو السيرفر) هي استقبال طلبات المتصفح والرد عليها. عندما يجد الخادم ما طلبه المستخدم – سواء كان صفحة، صورة، فيديو، أو أي عنصر آخر – يُرسل إليه المحتوى المطلوب بنجاح. أما في حال عدم توفر العنصر المطلوب، فيرد الخادم بكود خاص يُعرف بكود \u0026ldquo;404\u0026rdquo; ليشير إلى عدم العثور على المحتوى.\nومن المحتمل أن يكون جهازك متصلًا بالعديد من الخوادم على الإنترنت، بما في ذلك خوادم مثل YouTube أو Blogger.\nإحدى الميزات المدهشة للويب هي أنك تستطيع إنشاء روابط لملفات أو مستندات مستضافة على خوادم مختلفة. على سبيل المثال، عندما تشاهد فيديو على مدونة Fullstackee.com، قد يقوم متصفحك بتشغيل هذا الفيديو وهو مستضاف على قناتنا على سيرفرات YouTube.\nيمكن أن تحتوي صفحة الويب الواحدة على محموعة متنوعة من الفيديوهات والصور والخطوط أو الأكواد البرمجية من السيرفر الخاص بك أو من سيرفرات خارجية.\nHTTP و HTTPS: الفرق وكيف يؤثر على أمان موقعك #\rالقواعد التي تحكم تلك الطلبات والردود تُعرف ببروتوكول نقل النص الفائق (HTTP - HyperText Transfer Protocol). وعادةً ما تبدأ عناوين المواقع بـ \u0026ldquo;http\u0026rdquo; أو \u0026ldquo;https\u0026rdquo;، مما يشير إلى كيفية تواصل المتصفح مع الخادم.\nولكي نعرف الفرق بين كل من HTTP (HyperText Transfer Protocol) وHTTPS (HyperText Transfer Protocol Secure)، يجب أن نتعرف على مميزات وعيوب كل بروتوكول.\nHTTP vs HTTPS\rبروتوكول HTTP: #\rمميزاته:\nالبساطة والسرعة سهولة وسرعة نقل البيانات. عدم التشفير، وتعتبر ميزة هنا لأنها تؤدي إلى سرعة نقل البيانات نسبيًا. عيوبه:\nعدم الأمان: نتيجة لعدم التشفير، يكون من السهل لأي شخص اعتراض الاتصال بين المتصفح والخادم وقراءة البيانات الحساسة مثل كلمات المرور أو المعلومات المالية.\nبروتوكول HTTPS: #\rمميزاته:\nالتشفير: يتم باستخدام SSL/TLS (Secure Sockets Layer/Transport Layer Security) لتشفير البيانات أثناء نقلها بين المتصفح والخادم، مما يوفر أمانًا وحماية أكبر للبيانات. المصادقة: يضمن HTTPS أن الموقع الذي يتصل به المستخدم هو الموقع الصحيح وليس موقعًا محتالًا (من خلال شهادات SSL التي تُصدر من جهات موثوقة). سلامة البيانات: يضمن HTTPS أن البيانات المرسلة لم تتعرض للتعديل أثناء النقل. عيوبه:\nأبطأ قليلاً من HTTP: بسبب عمليات التشفير وفك التشفير، قد يكون HTTPS أبطأ نسبيًا من HTTP، على الرغم من أن الفرق في السرعة أصبح غير ملحوظ مع تطور التكنولوجيا. التكلفة: بعض المواقع تحتاج إلى شراء شهادات SSL لتفعيل HTTPS، مما قد يُضيف تكلفة. من خلال المميزات والعيوب لكل بروتوكول، نجد أن الفرق بين بروتوكول HTTP وHTTPS هو كما يلي:\nالتشفير: HTTP لا يستخدم أي نوع من التشفير، بينما HTTPS يعتمد على SSL/TLS لتشفير البيانات. الأمان: HTTPS يوفر مستوى عاليًا من الأمان ضد الهجمات مثل التنصت أو Man-in-the-Middle (MITM)، بينما HTTP عرضة لتلك الهجمات. شهادة SSL: لا يحتاج HTTP إلى شهادة، بينما يتطلب HTTPS شهادة SSL يتم إصدارها من جهات موثوقة لتفعيل البروتوكول. لذلك، يجب استخدام بروتوكول HTTPS بشكل عام:\nفي المواقع التي تتعامل مع بيانات حساسة مثل كلمات المرور، معلومات الدفع، أو المعلومات الشخصية. في أي موقع يحتاج إلى توفير ثقة وأمان للمستخدمين. يُفضل استخدام HTTPS بشكل عام لضمان أمان الاتصال حتى في المواقع البسيطة. ومع ذلك، عند إنشاء صفحة ويب لأول مرة، لن تحتاج إلى تشغيل سيرفر أو استخدام HTTP. بدلاً من ذلك، يمكنك حفظ صفحة الويب كملف على جهاز الكمبيوتر الخاص بك وفتحها في متصفحك بشكل سهل وبسيط.\nيمكن لمتصفحك عرض المستندات المخزنة محليًا على جهاز الكمبيوتر الخاص بك، وكذلك تلك الموجودة على الإنترنت. لاحقًا، عندما تكون جاهزًا لمشاركة صفحة الويب مع العالم، ستقوم بتحميلها إلى خادم.\nأهم مفاهيم برمجة الويب: التراكيب، الشكلية، والتداخل #\rتعتبر برمجة الويب مجالًا مثيرًا للاكتشاف، حيث تقدم لك مفاهيم أساسية وتوفر تغذية بصرية فورية. مع تقدمك في الدروس، يمكنك رؤية كل شيء يتجسد في متصفح الويب الخاص بك. إليك بعض المفاهيم الرئيسية التي يجب التركيز عليها؛ فهم هذه المفاهيم سيعزز مهاراتك البرمجية بشكل كبير.\nSyntax - Formalism - Nesting\rالمفهوم الأول هو التركيب ( Syntax ): #\rوهو المفهوم الذي يشير إلى قواعد اللغة في البرمجة. تمامًا كما تمتلك اللغات الطبيعية مثل الإنجليزية أو العربية قواعد نحوية، فإن لغات البرمجة مثل HTML أو PHP تتبع أيضًا قواعد معينة.\nعلى سبيل المثال، عندما نقول “الكلب جرى في الحديقة”، وليس “الحديقة جرى الكلب”، لأن ذلك غير صحيح نحويًا.\nهذا المفهوم ينطبق أيضًا على البرمجة. كل لغة برمجة لها مجموعة من قواعد التركيب التي تحدد كيفية هيكلة الكود بها.\nمع تعلمك لغة برمجة جديدة، ستبدأ بالتدريج في اكتساب هذه القواعد، والتي قد يتم تقديمها بشكل صريح أو يتم تعلمها من خلال أمثلة عملية لفهم عميق لها.\nالمفهوم الثاني هو الشكلية ( Formalism ): #\rوغالبًا ما يُشار إليه بـ “العقلية الحرفية” في البرمجة. تفهم الحواسيب الكود حرفيًا. كل كلمة، حرف، ورمز له أهمية. لا يمكن للحواسيب استنتاج نواياك؛ بل تنفذ الأوامر البرمجية تمامًا كما كتبتها أنت.\n\u0026lt;!-- Wrong --\u0026gt; \u0026lt;tilte\u0026gt;\u0026lt;/tilte\u0026gt; \u0026lt;!-- Correct --\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; على سبيل المثال، الوسم الخاص بعنوان الصفحة إذا كتبته بشكل خاطئ لن يقوم جهاز الكمبيوتر بفهم نيتك والقيام بالتعديل بشكل تلقائى.\nالدقة في الإملاء أمر بالغ الأهمية، لأن البرمجة عادةً ما تفتقر إلى ميزات التصحيح التلقائي.\nالمفهوم الثالث هو التداخل ( Nesting ): #\rوهو المفهوم الذي يتعلق بكيفية وضع بعض أجزاء الكود داخل أجزاء أخرى بشكل منظم. نواجه هذا في اللغة البشرية أيضًا.\nعلى سبيل المثال، في جملة مثل، “قالت مريم إن أدم أخبرها بشيء عن صديقتها”، نستخدم علامات اقتباس متداخلة.\nسوف تصادف أنماط التداخل المماثلة في لغات البرمجة، والتي قد تبدو غريبة في البداية ولكنها شائعة وأساسية. سنشير إلى هذه الحالات أثناء دروسنا القادمة.\nوأخيرًا، تذكر أن هناك موارد ومعلومات وفيرة متاحة لمساعدتك في رحلتك البرمجية. العديد من الأشخاص حول العالم يتعلمون البرمجة معك.\nواحدة من أكثر الأدوات قيمة لديك هي الوثائق—الدلائل والدروس المتاحة للغات البرمجة التي تقوم بدراستها. على سبيل المثال، يمكنك العثور على معلومات شاملة حول HTML على موقع شبكة مطوري Mozilla (MDN). بالإضافة إلى الموارد التي تقدمها YouTube.\nهناك ثروة من المساعدة عبر الإنترنت يمكنك الوصول إليها من خلال محرك البحث المفضل لديك ومن ضمنها مدونة Fullstackee التي سوف نتعلم فيها معظم لغات البرمجة الخاصة بتطوير الويب في الدروس القادمة.\nاختيار أدواتك: الفرق بين محررات النصوص والأكواد #\rالفرق بين محرر النصوص والأكواد\rHTML مثل معظم لغات البرمجة يتم كتابتها فى ملفات نصية لنلقى نظرة على هذا.\nالملفات النصية تحتوى على أحرف أرقام وSymbols وفراغات ولا تحتوى على أى تنسيق مميز كالنص العريض أو المائل أو حتى لون للنص ذاته. أيضا فإنها لا تحتوى على أى صور أو icons أو أى عناصر مرئية.\nيمكنك اعتبار النص أي شيء يمكنك كتابته على آلة كاتبة قديمة. وعلى الرغم من أن النص قد يبدو محدودًا للغاية، إلا أنه مرن للغاية ويمكن استخدامه لأغراض لا حصر لها.\nعندما تنظر الى كود HTML تعتقد إنه معقد وملئ باللأشياء الغريبة ولكن فى الحقيقة هو أولاٌ وأخيراٌ عبارة عن نص. والمظهر الذى يظهر للشخص عندما يتصفح صفحة الويب هو عبارة عن ترجمة لتلك النصوص من قبل المتصفح.\nالمتصفح يقوم بترجمة لغة html\rعندما تحتوي صفحة ويب على صورة أو فيديو، مثل تلك الصور الموجودة داخل هذا المقال، يتم عرضها من خلال تضمين عنوان نصي داخل كود الصفحة. يقوم المتصفح بقراءة هذا العنوان، ثم بتحميل الصور أو الفيديوهات المطلوبة لعرضها في الصفحة.\n\u0026lt;img src=\u0026#34;path/to/image\u0026#34; alt=\u0026#34;alternative text\u0026#34; \u0026gt; عند فتح ملف HTML في محرر نصوص مخصص للمبرمجين، غالبًا ستجده معروضًا بألوان وتنسيقات خاصة؛ يُطلق على هذه الميزة اسم “تسليط الضوء على الصيغة” أو “التظليل النحوي.” وتساعد هذه الميزة في فهم التركيب النحوي أثناء التحرير.\nتجدر الإشارة إلى أن هذه الألوان ليست مخزنة داخل الملف نفسه؛ بل يعرف المحرر صيغة HTML ويطبق الألوان لتوجيهك أثناء الكتابة.\nمن الشائع استخدام اسم ملف ينتهي بالامتداد “.html” عند التعامل مع ملفات HTML، مما يساعد البرامج، مثل المحررات والمتصفحات، على التعرف على الملف ومعالجته بشكل صحيح.\nإنشاء أول ملف HTML: #\rلنلعب قليلًا مع لغة HTML باستخدام محرر الأكواد الخاص بك، مثل Atom أو VS Code، وأيضا هناك Sublime Text.\nاتبع الخطوات التالية لإنشاء ملف جديد في محرر الأكواد الخاص بك واحفظه؛ يمكنك تسميته testing.html مثلاً،\nثم ابدأ العمل داخله. يتيح لك المحرر العمل على عدة ملفات في نفس الوقت إذا كنت ترغب بذلك، لكن تأكد من حفظ كل ملف بعد إجراء التعديلات.\nقم بفتح محرر الأكواد Sublime Text وقم بالضغط على File \u0026gt; New File قم بكتابة بعض الأكواد بداخله واضغط حفظ قم بتسمية الملف testing.html واحفظه فى مكان ما على جهازك قم بالضفط الى فتح الملف بواسطة متصفح ما أو أنقر عليه ضغطتين فقط مبروك لقد قمت بإنشاء أول صفحة ويب 1. قم بفتح محرر الأكواد Sublime Text وقم بالضغط على New File #\rإنشاء ملف html على sublime\r2. قم بكتابة بعض الأكواد بداخله واضغط حفظ #\rكتابة بعض أكواد HTML داخل الملف\r3. قم بتسمية الملف testing.html واحفظه فى مكان ما على جهازك #\rحفظ ملف HTML جديد\r4. قم بالضفط الى فتح الملف بواسطة متصفح ما أو أنقر عليه ضغطتين فقط #\rإفتح ملف HTML\r5. مبروك لقد قمت بإنشاء أول صفحة ويب #\rعرض ملف html داخل المتصفح\rالخاتمة #\rوختامًا، تعلم برمجة الويب هو خطوة مثيرة نحو بناء مهارات جديدة وفتح آفاق إبداعية لا حدود لها.\nلا تتردد في طرح أي تساؤلات أو مشاركتنا تجربتك في التعليقات – فنحن هنا لنساعدك في رحلتك نحو الاحتراف. ما هو السؤال الأول الذي يخطر ببالك حول عالم تطوير الويب؟ شاركنا رأيك!\nالأسئلة الشائعة #\rما هي وظيفة مطور الويب؟ #\rهو الشخص الذى يختص بإنشاء وبرمجة المواقع الإلكترونية وتطبيقات وصفحات الويب.\nما هو موقع الويب؟ #\rموقع الويب هو عبارة عن مجموعة من الصفحات التى تقدم محتوى معين والمربوطة ببعضها البعض بطرييقة معينة والتى تم إنشاءُها بواسطة أحد لغات البرمجة وهى HTML.\nويتكون بشكل أساسى من صفحة ويب رئيسية وصفحات فرعية متصلة ببعضها البعض من خلال عناوين الويب (الروابط). موقع الويب يجب أن يحتوى على الأقل على صفحة ويب واحدة. وفى تلك الحالة يسمى الموقع الإلكترونى ذو الصفحة الواحدة. أو المعنى الأكثر شعبية وهو ما يطلق عليه صفحة الهبوط؟\nما هو الفرق بين الخادم والمتصفح؟ #\rالخادم (السيرفر) والمتصفح هما عنصران أساسيان في عملية تصفح الإنترنت، لكن لكل منهما دور مختلف.\nالمتصفح هو التطبيق الذي يستخدمه المستخدمون للوصول إلى المواقع، مثل Google Chrome أو Firefox، وهو يعرض صفحات الويب ويتيح التفاعل معها. عندما يطلب المستخدم صفحة معينة، يقوم المتصفح بإرسال طلب إلى الخادم. أما الخادم فهو الجهاز أو النظام الذي يستضيف موقع الويب ويحتوي على الملفات والبيانات الخاصة به، ويقوم بتجهيز المحتوى وإرساله إلى المتصفح عند الطلب. ببساطة:\nالمتصفح يعرض المحتوى للمستخدم. الخادم يُخزِّن هذا المحتوى ويخدمه عندما يُطلب منه ذلك. ","date":"1 نوفمبر 2024","externalUrl":null,"permalink":"/blog/ar/posts/web-development-101-basics-to-start-your-journey/","section":"Posts","summary":"للبدء في رحلة تعلم برمجة الويب، من الضروري أن يكون لديك معرفة بأساسيات البرمجة.","title":"تطوير الويب 101: أساسيات لبدء رحلتك فى 2025","type":"posts"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/tags/eloquent/","section":"Tags","summary":"","title":"Eloquent","type":"tags"},{"content":"\rHow to delete data from one-to-many relationship in Laravel?\rDelete data using the user form. #\rFirst go to routes/web.php file and add this route: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/posts/delete to find that the post has been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Delete data using the publication form. #\rFirst go to routes/web.php file and add this path: Route::get(\u0026#39;/posts/user/delete\u0026#39;, function () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $post-\u0026gt;delete(); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/user/delete. We see that the post has been successfully deleted. Rcord has deleted\rConclusion #\rThis article is a continuation of the entire series on Laravel Eloquent Relationships Relationships within Laravel. We have covered one-to-many relationship in a complete manner. We have not spared any information for you, and, God willing, we will learn in the following explanation about the relationship of many to many.\nYou can find the repo of this series on github here: ","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-delete-data-from-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How to delete data from one-to-many relationship in Laravel?","title":"How to delete data from one to many relationship in Laravel?","type":"posts"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/categories/laravel/","section":"Categories","summary":"","title":"Laravel","type":"categories"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships","type":"series"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships","type":"categories"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/tags/laravel10/","section":"Tags","summary":"","title":"Laravel10","type":"tags"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/tags/relationships/","section":"Tags","summary":"","title":"Relationships","type":"tags"},{"content":"","date":"20 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\rHow to update one to many relationship in Laravel?\rUpdate data using the user form. #\rUsing push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. #\rUsing push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: ","date":"19 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-update-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How to update one to many relationship in Laravel?","title":"How to update a one-to-many relationship in Laravel?","type":"posts"},{"content":"\rHow do you retrieve data from one to many relationship in Laravel?\rWe saw how data is saved in multiple different ways within the database using the One-To-Many relationship in Laravel. But how to fetch data from the database? There are several ways in which data can be fetched from a database. These methods are divided into two basic methods:\nThrough the user User Model #\rThis method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. #\rWe go first to the routes/web.php file so that we can test these methods and make the following modifications. use App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:id,firstname,lastname,user_id\u0026#39;, \u0026#39;posts:title,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $users contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } ] } ] Here we see the difference between the two cases in the size of the data that was processed, and the matter increases if the size of the data is much larger than that. When selecting specific columns in relationships, you must choose foreignKey because without choosing it, the data will not be returned correctly from the database.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts\rBy using API Resources. #\rWe will create an API Resource for the Post form by executing this command in the command prompt. php artisan make:resource PostResource You go to the following path App/Http/Resources and we begin to modify each of the following: PostResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, ]; } } We first go to the routes/api.php file to add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34; } ] } ] We also see here that we fetch only the required data.\nThrough the post Post Model #\rThis method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. #\rWe first go to the routes/web.php file so that we can test these methods and add this new route. use App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user\u0026#39;, \u0026#39;user.profile\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user:username,id\u0026#39;, \u0026#39;user.profile:firstname,lastname,user_id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $posts contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } } ] When choosing specific columns in the relationships, you must choose id and you must choose the user relationship, because without you choosing it, the user will not return with the post.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts Private for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts\rBy using API Resources. #\rYou go to the following path App/Http/Resources and we start editing the file PostResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } We first go to the routes/web.php file to add a new route. use App\\Models\\Post; use App\\Http\\Resources\\PostResource; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $postsResource = PostResource::collection($posts); return response()-\u0026gt;json($postsResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/posts to see what results will appear. [ { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } } ] We also see here that we fetch only the required data.\nYou can find the repo of this series on github here: ","date":"18 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How do you retrieve data from one to many relationship in Laravel?","title":"How can you retrieve data from a one-to-many relationship in Laravel?","type":"posts"},{"content":"\rHow to insert data in a one-to-many relationship in the database?\rAfter we created a One-To-Many relationship between both Users table and Posts table and added hasMany inside User Model, also we added the inverse relationship inside Post Model by adding belongsTo to it.\nThe time has come to find out how the data is saved in the database while we use this relationship. What are the methods used in this?\nThese methods are divided into three basic methods:\nWithout using function post. By using function post. By using the inverse relationship function user. 1.Without using function post. #\rHere there are two scenarios:\nFirst: Add only one post for the user. Second: Add more than one post for the user. First: Add only one post for the user. #\rWe first go to the routes/web.php file and add a new route so that we can test these methods. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); Post::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 1\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to user NoisyId No. 1. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; } ] } Second: Add more than one post for the user. #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); Post::insert( [ [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 2\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 2\u0026#39;, ], [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 3\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 3\u0026#39;, ], ] ); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null } ] } 2. By using function post. #\rHere also there are two scenarios: First: Add only one post for the user Second: Add more than one post for the user\nFirst: Add only one post for the user #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(3); $user-\u0026gt;posts()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 4\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 4\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to the user with ID No. 3. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34; } ] } Second: Add more than one post for the user #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); $user-\u0026gt;posts()-\u0026gt;createMany([ [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 5\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 5\u0026#39;, ], [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 6\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 6\u0026#39;, ] ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 1. In addition to these posts, there is another post that was added in a previous step, and therefore there should be 3 posts for this user. This is actually the data obtained from the database in the following response.\n{ \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; } ] } 3. By using the inverse relationship function user. #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); $post = new Post([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 7\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 7\u0026#39;, ]); $post-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $post-\u0026gt;user-\u0026gt;username, \u0026#39;title\u0026#39; =\u0026gt; $post-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $post-\u0026gt;body, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that a post has been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34; } You can find the repo of this series on github here: ","date":"17 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-insert-data-in-one-to-many-relationship-in-database/","section":"Posts","summary":"How to insert data in a one-to-many relationship in the database?","title":"How to insert data in one to many relationship in database?","type":"posts"},{"content":"After we learned about the types of relationships within Laravel in the previous part. We discussed the first type of these relationships, which is the One-To-One relationship.\nToday we continue the series we started learning about Laravel Eloquent Relationships.\nWe are talking about the second type, which is called One-To-Many or hasMany.\nlaravel one to many relationship\rHow to create a One-To-Many relationship in Laravel? #\rHow to create a One-To-Many relationship in Laravel?\rThe One-To-Many relationship is one of the most important types of relationships inside Laravel Eloquent. We also learned in the previous lesson that it is the connection of a row from the first table to more than one row from the second table.\nAnd as a continuation of the practical application (content management system), which we started in the previous lesson. We create a One-To-One relationship between the user and the personal profile.\nToday we are going to create One-To-Many relationship between user and post. Each user can own one or more publications.\nWe create Post Model with its own table. php artisan make:model Post -m We go to this path database/migrations and modify the publications table by adding some columns as follows: Schema::create(\u0026#39;posts\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We modify the Post.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;, ]; We execute this command to update the database and add the Posts table. php artisan migrate We go to the User.php file and set the hasMany relationship. public function posts() { return $this-\u0026gt;hasMany(Post::class); } Let\u0026rsquo;s learn how hasMany works\n$this-\u0026gt;hasMany(Post::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); We go to the file Post.php and set the inverse relationship belongsTo. public function user() { return $this-\u0026gt;belongsTo(User::class); } We have explained belongsTo in this part of the previous article and we are explaining the One-To-One relationship.\nYou can find the repo of this series on github here: ","date":"16 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-create-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"After we learned about the types of relationships within Laravel in the previous part.","title":"How to create a One-To-Many relationship in Laravel?","type":"posts"},{"content":"\rHow to delete data from one to one relationship in Laravel?\rDelete data using User Model. #\rWe first go to the routes/web.php file and add this route: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/users/profile/delete to find that the profile have been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } Refresh the page twice to show that this user\u0026rsquo;s profile has been deleted.\nDelete data Using Profile Model. #\rWe first go to the routes/web.php file and add this route: Route::get(\u0026#39;/profiles/user/delete\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/profiles/user/delete. We see that both the user and the profile have been deleted successfully. Rcord has deleted\rConclusion #\rThis article is the start of a whole series on Laravel Eloquent Relationships - Relationships within Laravel. We have covered the One TO One relationship in a complete way. We did not spare you any information, and God willing, in the following explanation, we will learn about the One To Many relationship.\nYou can find the repo of this series on github here: ","date":"15 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-delete-data-from-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to delete data from one to one relationship in Laravel?","title":"How to delete data from one to one relationship in Laravel?","type":"posts"},{"content":"\rHow to update one to many relationship in Laravel?\rUpdate data using the user form. #\rUsing push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. #\rUsing push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: ","date":"14 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-update-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to update one to many relationship in Laravel?","title":"How to update a one-to-one relationship in Laravel?","type":"posts"},{"content":"\rHow can you retrieve data from a one-to-one relationship in Laravel?\rWe have seen how data is saved in several different ways in the database using the one-to-one relationship in Laravel. But how do we retrieve the data from the database? There are several ways to retrieve data from the database.\nThese methods can be divided into two main categories:\nDirect retrieval: This method involves directly querying the database for the data that you need. This is the most efficient way to retrieve data, but it can be difficult to use if you are not familiar with SQL.\nEloquent ORM: Laravel\u0026rsquo;s Eloquent ORM provides a more user-friendly way to retrieve data from the database. Eloquent ORM uses a set of methods to map database tables to objects in PHP. This makes it easy to retrieve data from the database without having to know SQL. In this tutorial, we will focus on using Eloquent ORM to retrieve data from the database.\nWhile retrieving users data: #\rWhile collecting user data, we will obtain their personal profiles. After that, the matter of displaying that data is divided into two forms, not a third. The type of application you are working on and the theme used will determine which form to use.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. #\rWe first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen choosing specific columns from relationships, you must always choose the foreign key column. Without choosing it, the data will not be returned correctly from the database.\nInside the views folder, we add another folder named users. Inside the users folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the users: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/users to see what results will appear. Users Table\rSecond: Depends on Api Routes. #\rWhat are API Resources?\nSimply, it is an intermediate layer between Eloquent and the API response, converting data obtained from the database into JSON with the ability to specify specific data without others or manipulate that data.\nWe will create an API Resource for users and profiles. Execute this command at the command prompt. php artisan make:resource UserResource php artisan make:resource ProfileResource Go to the following path: App\\Http\\Resources and edit both: The file ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } The file UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] We also see here that we have obtained the required data specified within the API Resources files only.\nWhile retrieving profiles data: #\rWhile obtaining profile data, we will obtain each user associated with those profiles. After that, the data can be displayed in two forms, not three. The type of application you are working on and the theme used will determine which form of data display is most appropriate.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. #\rWe first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen selecting specific columns in relationships, you must include the id field when choosing the user relationship. Otherwise, the user will not be returned with the profile.\nInside the views folder, we add another folder named profiles. Inside the profiles folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the profiles: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/profiles to see what results will appear. Profiles Table\rSecond: Depends on Api Routes. #\rGo to the following path: App\\Http\\Resources and edit the file ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/profiles to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] How to improve Eloquent queries in Laravel? #\rHow to improve Eloquent queries in Laravel?\rWhen dealing with a large database with a lot of data, it is important to consider performance. This means not only how long it takes to get the data, but also how many queries are executed per page.\nTo test the performance of your application, you can use a library called Laravel Debugbar. Debugbar will show you all the queries that are executed on each page, as well as how long each query takes to execute. This information can help you to identify performance bottlenecks and optimize your application.\nLet\u0026rsquo;s run this command. composer require barryvdh/laravel-debugbar --dev Make sure that APP_DEBUG=true is inside the .env file.\nThe difference between the two cases is as follows: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); We open the browser and go to the following URL: http://127.0.0.1:8000/users to see what results will appear in the library bar. (Lazy Loading) - Retrieve data without using with. laravel debugbar lazy loading\rAt the bottom of the page, we will now find a bar for the Laravel Debugbar library. When you click on it, we will find that it works with a lot of data. The thing that interests us here is the number of SQL queries on this page, and as shown, they are 4 queries.\nAnd we only retrieved 3 users, imagine with me if there are tens of thousands or millions of users inside this database, the time to load this page will be very slow because of the huge number of queries.\nThis is called the N+1 problem in Laravel. It is caused by lazy loading relationships, which means that the associated data is not loaded until it is actually needed. In this case, we are lazy loading the posts relationship for each user. This means that we are making a separate query for each user to get their profiles.\nIf there are 1000 users, we will make 1001 queries: 1 query to get the users, and 1000 queries to get their profiles. This is a waste of server resources and can make your application slow.\nTo solve the N+1 problem, you can eager load the relationships. This means that you will load the associated data when you first retrieve the data. In this case, you would use the with() method to eager load the profiles relationship. This would only make one query to get the users and their profiles.\nEager loading can improve the performance of your application by reducing the number of queries. It is a good practice to eager load relationships whenever possible.\n(Eager Loading) - Retrieve data using with. laravel debugbar eager loading\rAs you can see, by adding the with() method with the name of the relationship, each user\u0026rsquo;s data will be fetched with their own profile without the N+1 problem.\nSo the number of queries was reduced from 4 to 2 only. This will clearly have an effect if this database is of medium size or large. This is what is called eager loading.\nYou can find the repo of this series on github here: ","date":"13 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How can you retrieve data from a one-to-one relationship in Laravel?","title":"How can you retrieve data from a one-to-one relationship in Laravel?","type":"posts"},{"content":"\rHow to insert data in one to one relationship in database?\rAfter we created a one-to-one relationship between the users table and the profiles table, and added the hasOne() method to the User model, and the belongsTo() method to the Profile model, it\u0026rsquo;s time to find out how the data is saved in the database when we use this relationship. And what are the methods used for that?\nThese methods are divided into three main ways:\nWithout using method profile. By using method profile. By using the inverse method user. The best method to use depends on the specific needs of your application. If you only need to save the profile associated with the user, then the first method is the simplest option. If you need to get, update, or delete the profile, then the second method is a better option. If you need to get, update, or delete the user, then the third method is a better option.\n1. Without using method profile. #\rWe first go to the routes/web.php file and add a new route so that we can test these method. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We opened the browser and went to the link http://127.0.0.1:8000/one-to-one. To our satisfaction, the user had been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. By using method profile. #\rWe first go to the routes/web.php file and edit this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. By using the inverse method user. #\rWe first go to the routes/web.php file and update this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } You can find the repo of this series on github here: ","date":"12 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-insert-data-in-one-to-one-relationship-in-database/","section":"Posts","summary":"How to insert data in one to one relationship in database?","title":"How to insert data in one to one relationship in database?","type":"posts"},{"content":"\rHow to create a One-To-One relationship in Laravel?\rOne-to-One relationships are the simplest type of relationship offered by Laravel. They join two tables such that one row in the first table is associated with only one row in the other table, or the same table.\nlaravel one to one relationship\rTo see this in action, we\u0026rsquo;ll start by creating a content management system.\nTo see this in action, let\u0026rsquo;s start by creating a content management system. Let\u0026rsquo;s say each user has their own single profile. In some cases, you can store all profile information in the Users table. However, this is not ideal.\nIn our example, we want to create a separate table for personal profiles. This will allow us to transfer a profile from one user to another easily if we need to.\nBy default, the Users table exists in Laravel. The columns that it contains do not matter for this example.\nLet\u0026rsquo;s say we have a users table with the following columns: Schema::create(\u0026#39;users\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); We edit the User.php file. protected $fillable = [\u0026#39;username\u0026#39;]; We create Profile Model with its table. php artisan make:model Profile -m In a one-to-one relationship, we have the freedom to choose one of these two methods to establish the relationship:\nAdd user_id in the profiles table. Add profile_id in the users table. Usually, the column that joins the two tables is added to the second table. So, we will add it to the profiles table as follows:\nSchema::create(\u0026#39;profiles\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We edit the Profile.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; Let\u0026rsquo;s run this command to update the database. php artisan migrate Let\u0026rsquo;s go to the User.php file to define the relationship. public method profile() { return $this-\u0026gt;hasOne(Profile::class); } Let\u0026rsquo;s see how the hasOne() method works. This method is used to save the id of the related model in the foreign key column of the parent model.\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); Let\u0026rsquo;s go to the Profile.php file to define the inverse relationship. public method user() { return $this-\u0026gt;belongsTo(User::class); } Let\u0026rsquo;s find out how the belongsTo() method works. This method is used to save the id of the parent model in the primary key column of the related model.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); Let\u0026rsquo;s say you want to name the relationship something like admin, we need to add the foreignKey property to the relationship method.\npublic method admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } The foreignKey property is used to specify the name of the column in the child model that is used to reference the parent model.\nIf you do not add the foreignKey property to the relationship method when changing the relationship name, you will see the following error: Attempt to read property X on null\rYou can find the repo of this series on github here: ","date":"11 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-create-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to create a One-To-One relationship in Laravel?","title":"How to create a One-To-One relationship in Laravel?","type":"posts"},{"content":"Often, developers need to interact with databases. If you are using the Laravel framework, you should know about one of its most important features: Eloquent, an object-relational mapper (ORM) that makes this process simple and easy.\nLaravel Eloquent is one of the main features in the Laravel framework. This is due to its great support for defining, creating, and managing relationships between different tables. In this series of articles, I will show you how to create and use Eloquent relationships.\nIt is important to note that you can start using Eloquent without any prior knowledge of relationships.\nAs a professional programmer, it is necessary to understand the types of relationships. However, before that, you must ask yourself an important question: what are relationships in the first place?\nWhat are relationships in databases? #\rWhat are relationships in databases?\rWhen working with tables in a database that have relationships between them, we can describe these relationships as links between those tables. This helps you organize and structure data effortlessly, allowing for faster data reading and processing.\nWhat types of relationships are there in Laravel? #\rWhat types of relationships are there in Laravel?\rThere are three main types of relationships in databases that are commonly used in practice:\none-to-one: A one-to-one relationship means that one record in one table can only be related to one record in another table. For example, a customer table might have a one-to-one relationship with an address table. This means that each customer can only have one address, and each address can only be associated with one customer.\none-to-many: A one-to-many relationship means that one record in one table can be related to many records in another table. For example, an order table might have a one-to-many relationship with a product table. This means that one order can have many products, but each product can only be associated with one order.\nmany-to-many: A many-to-many relationship means that many records in one table can be related to many records in another table. For example, a student table might have a many-to-many relationship with a course table. This means that many students can take many courses, and many courses can be taken by many students.\nBesides these relationships, Laravel offers more relationships, namely:\nHas Many Through: This relationship allows you to relate a model to another model through a third model. For example, a user model might have a has many through relationship with a post model, where the third model is a category model. This means that a user can have many posts, where each post belongs to a category.\nPolymorphic Relations: This relationship allows you to relate a model to multiple other models of different types. For example, a comment model might have a polymorphic relationship with a model, where the model could be a blog post, a product, or a user. This means that a comment can be associated with any of these three types of models.\nMany-to-many Polymorphic: This relationship is a combination of the has many through and polymorphic relationships. It allows you to relate a model to many other models of different types, where the relationship is mediated by a third model. For example, a user model might have a many-to-many polymorphic relationship with a model, where the third model is a role model. This means that a user can have many roles, where each role could be a user, a product, or a blog post.\nThe number of relationships that we will explain is 6 types. We will build a simple content management system to explain all of those relationships.\nDo I need specific knowledge of Eloquent before reading this?\nIn response to your question about whether you need specific knowledge of Eloquent before reading this, I would say that it is not strictly necessary, but it would be helpful. The examples in the article do not use any complex Eloquent methods or techniques, but it would be helpful to have a basic understanding of how Eloquent works before reading the article.\nIf you are new to Laravel, I would recommend reading the Laravel documentation: https://laravel.com/docs/ before reading this article. The documentation provides a good overview of Eloquent and how it works.\nOnce you have a basic understanding of Eloquent, you should be able to follow the examples in the article without any problems. However, if you get stuck, you can always refer to the documentation for more help.\nIn the examples below, I have tried to explain everything as clearly as possible, without using too many tricky Eloquent methods and complex techniques. This means that prior knowledge is not strictly necessary. However, it is always best to learn the basics first and then pursue more complex topics such as relationships.\n","date":"10 أغسطس 2023","externalUrl":null,"permalink":"/blog/ar/posts/what-types-of-relationships-are-there-in-laravel/","section":"Posts","summary":"Often, developers need to interact with databases.","title":"What types of relationships are there in Laravel?","type":"posts"},{"content":"","date":"1 مايو 2023","externalUrl":null,"permalink":"/blog/ar/tags/full-stack/","section":"Tags","summary":"","title":"Full Stack","type":"tags"},{"content":"\rPreview #\rLaravel 10 Vue 3\rWhat is Laravel #\rLaravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details. What is Vue js! #\rVue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript. It Helps you efficiently develop user interfaces, be they simple or complex. What is Vite js! #\rVite is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\nA dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).\nA build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production. We conclude from the above that the most important thing that distinguishes vite is the speed at the start of the server, as well as making a bundle of files upon completion of the project.\rStep 1: Create New Laravel Project #\rcomposer create-project laravel/laravel laravel10-vue3 Step 2: How To Install Vue 3 on Laravel 10 #\rnpm install npm install npm create vue@latest Step 3: Install Plugin Vue From Vite #\rnpm i @vitejs/plugin-vue Step 4: Edit File vite.config.js #\r// vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); Step 5: Edit File app.js Inside Folder resources/js #\rimport {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) Step 6: Create File app.blade.php Inside Folder resources/views #\rMake sure to add the css file and javascript as shown and also the div with id=app\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Step 7: Create File App.vue Inside Folder resources/js #\r\u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Step 8: Edit File web.php Inside Folder routes #\r\u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); Step 9: Run PHP Local Server #\rphp artisan serve Step 10: Run Node Local Server #\rnpm run dev Go to the following link http://127.0.0.1:8000/ and you will find the following\rLaravel 10 Vue 3\rYou will find the repo for this project on github here [ ","date":"1 مايو 2023","externalUrl":null,"permalink":"/blog/ar/posts/how-to-install-vue3-in-laravel10-with-vite/","section":"Posts","summary":"Preview #\rLaravel 10 Vue 3\rWhat is Laravel #\rLaravel is a web application framework with expressive, elegant syntax.","title":"How To Install Vue 3 In Laravel 10 With Vite","type":"posts"},{"content":"","date":"1 مايو 2023","externalUrl":null,"permalink":"/blog/ar/tags/spa/","section":"Tags","summary":"","title":"Spa","type":"tags"},{"content":"","date":"1 مايو 2023","externalUrl":null,"permalink":"/blog/ar/tags/vue3/","section":"Tags","summary":"","title":"Vue3","type":"tags"},{"content":"","date":"1 مايو 2023","externalUrl":null,"permalink":"/blog/ar/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs","type":"categories"},{"content":"","externalUrl":null,"permalink":"/blog/ar/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"مرحبًا بك في FullStackee!\nتوضح هذه الشروط والأحكام القواعد واللوائح الخاصة باستخدام موقع FullStackee الإلكتروني، الموجود على http://fullstackee.com.\nمن خلال الوصول إلى هذا الموقع الإلكتروني، نفترض أنك تقبل هذه الشروط والأحكام. لا تستمر في استخدام FullStackee إذا كنت لا توافق على جميع الشروط والأحكام المذكورة في هذه الصفحة.\nتطبق المصطلحات التالية على هذه الشروط والأحكام وبيان الخصوصية وإشعار إخلاء المسؤولية وجميع الاتفاقيات: \u0026ldquo;العميل\u0026rdquo; و\u0026quot;أنت\u0026quot; و\u0026quot;خاصتك\u0026quot; تشير إليك، الشخص الذي يسجل الدخول إلى هذا الموقع الإلكتروني والمتوافق مع شروط وأحكام الشركة. \u0026ldquo;الشركة\u0026rdquo; و\u0026quot;أنفسنا\u0026quot; و\u0026quot;نحن\u0026quot; و\u0026quot;خاصتنا\u0026quot; و\u0026quot;لنا\u0026quot; تشير إلى شركتنا. \u0026ldquo;الطرف\u0026rdquo; أو \u0026ldquo;الأطراف\u0026rdquo; أو \u0026ldquo;نحن\u0026rdquo; تشير إلى كل من العميل وأنفسنا. تشير جميع المصطلحات إلى العرض والقبول والاعتبارات المتعلقة بالدفع اللازمة للقيام بعملية مساعدتنا للعميل بالطريقة الأكثر ملاءمة للغرض الصريح المتمثل في تلبية احتياجات العميل فيما يتعلق بتقديم الخدمات المعلنة للشركة، وفقًا للقانون السائد في مثل هذه الحالات. أي استخدام للمصطلحات المذكورة أعلاه أو كلمات أخرى في صيغة المفرد أو الجمع أو الأحرف الكبيرة و/أو ضمير المتكلم أو ضمير المتكلم، يتم التعامل معها على أنها قابلة للتبادل وبالتالي تشير إلى نفس الشيء.\nملفات تعريف الارتباط #\rنحن نستخدم ملفات تعريف الارتباط. من خلال الوصول إلى FullStackee، فإنك توافق على استخدام ملفات تعريف الارتباط وفقًا لسياسة الخصوصية الخاصة بـ FullStackee.\nتستخدم معظم المواقع التفاعلية ملفات تعريف الارتباط للسماح لنا باسترداد تفاصيل المستخدم لكل زيارة. يستخدم موقعنا ملفات تعريف الارتباط لتمكين وظائف مناطق معينة لتسهيل الأمر على الأشخاص الذين يزورون موقعنا. قد يستخدم بعض شركائنا التابعين/الإعلانيين ملفات تعريف الارتباط أيضًا.\nالترخيص #\rما لم يُنص على خلاف ذلك، فإن FullStackee و/أو المرخصين لها يمتلكون حقوق الملكية الفكرية لجميع المواد الموجودة على FullStackee. جميع حقوق الملكية الفكرية محفوظة. يمكنك الوصول إلى هذه المواد من FullStackee لاستخدامك الشخصي وفقًا للقيود الواردة في هذه الشروط والأحكام.\nلا يجوز لك:\nإعادة نشر المواد من FullStackee\rبيع أو تأجير أو الترخيص من الباطن للمواد من FullStackee\rإعادة إنتاج أو تكرار أو نسخ المواد من FullStackee\rإعادة توزيع المحتوى من FullStackee\rتوفر أجزاء من هذا الموقع الإلكتروني فرصة للمستخدمين لنشر وتبادل الآراء والمعلومات في مناطق معينة من الموقع الإلكتروني. لا يقوم FullStackee بتصفية أو تحرير أو نشر أو مراجعة التعليقات قبل ظهورها على الموقع الإلكتروني. لا تعكس التعليقات وجهات نظر وآراء FullStackee ووكلائها و/أو الشركات التابعة لها. تعكس التعليقات وجهات نظر وآراء الشخص الذي ينشر وجهات نظره وآرائه. إلى الحد الذي تسمح به القوانين المعمول بها، لن تكون FullStackee مسؤولة عن التعليقات أو عن أي مسؤولية أو أضرار أو نفقات ناجمة و/أو متكبدة نتيجة لأي استخدام و/أو نشر و/أو ظهور التعليقات على هذا الموقع.\nتحتفظ FullStackee بالحق في مراقبة جميع التعليقات وإزالة أي تعليقات يمكن اعتبارها غير مناسبة أو مسيئة أو تسبب خرقًا لهذه الشروط والأحكام.\nأنت تضمن وتقر بما يلي:\nأنت مخول بنشر التعليقات على موقعنا الإلكتروني ولديك جميع التراخيص والموافقات اللازمة للقيام بذلك؛\rلا تنتهك التعليقات أي حق من حقوق الملكية الفكرية، بما في ذلك على سبيل المثال لا الحصر حقوق الطبع والنشر أو براءات الاختراع أو العلامات التجارية لأي طرف ثالث؛\rلا تحتوي التعليقات على أي مواد تشهيرية أو قذفية أو مسيئة أو غير لائقة أو غير قانونية بأي شكل من الأشكال والتي تعد انتهاكًا للخصوصية\rلن تُستخدم التعليقات لتشجيع أو الترويج للأعمال أو العادات أو تقديم أنشطة تجارية أو أنشطة غير قانونية.\rبموجب هذا، تمنح FullStackee ترخيصًا غير حصري لاستخدام وإعادة إنتاج وتحرير وتفويض الآخرين لاستخدام وإعادة إنتاج وتحرير أي من تعليقاتك بأي شكل أو تنسيق أو وسائط.\nإنشاء روابط تشعبية إلى المحتوى الخاص بنا #\rيجوز للمنظمات التالية إنشاء روابط إلى موقعنا الإلكتروني دون الحصول على موافقة كتابية مسبقة:\nالهيئات الحكومية؛\rمحركات البحث؛\rالمؤسسات الإخبارية؛\rيجوز لموزعي الدليل عبر الإنترنت إنشاء روابط إلى موقعنا الإلكتروني بنفس الطريقة التي يقومون بها بإنشاء روابط تشعبية إلى مواقع الويب الخاصة بالشركات الأخرى المدرجة؛ و\rالشركات المعتمدة على مستوى النظام باستثناء المنظمات غير الربحية التي تروج للتبرعات، ومراكز التسوق الخيرية، ومجموعات جمع التبرعات الخيرية التي لا يجوز لها إنشاء روابط تشعبية إلى موقعنا الإلكتروني.\rيجوز لهذه المنظمات إنشاء روابط إلى صفحتنا الرئيسية، أو إلى المنشورات أو إلى معلومات أخرى على الموقع الإلكتروني طالما أن الرابط: (أ) ليس مضللاً بأي شكل من الأشكال؛ (ب) لا يعني ضمناً رعاية أو تأييد أو موافقة الطرف الذي يقوم بإنشاء الروابط ومنتجاته و/أو خدماته؛ و(ج) يتناسب مع سياق موقع الطرف الذي يقوم بإنشاء الروابط.\nيجوز لنا النظر في طلبات الارتباط الأخرى والموافقة عليها من الأنواع التالية من المنظمات:\nمصادر معلومات المستهلك و/أو الأعمال المعروفة بشكل عام؛\rمواقع مجتمع dot.com؛\rالجمعيات أو المجموعات الأخرى التي تمثل الجمعيات الخيرية؛\rموزعو الدليل عبر الإنترنت؛\rبوابات الإنترنت؛\rشركات المحاسبة والقانون والاستشارات؛ و\rالمؤسسات التعليمية والجمعيات التجارية.\rسنوافق على طلبات الارتباط من هذه المنظمات إذا قررنا أن: (أ) الرابط لن يجعلنا نبدو بشكل غير مواتٍ لأنفسنا أو لشركاتنا المعتمدة؛ (ب) المنظمة ليس لديها أي سجلات سلبية معنا؛ (ج) الفائدة التي تعود علينا من ظهور الرابط التشعبي تعوض غياب FullStackee؛ و(د) الرابط في سياق معلومات الموارد العامة.\nيجوز لهذه المنظمات الارتباط بصفحتنا الرئيسية طالما أن الرابط: (أ) ليس مضللاً بأي شكل من الأشكال؛ (ب) لا يعني ضمناً رعاية أو تأييد أو موافقة الطرف الذي يربط أو منتجاته أو خدماته؛ و(ج) يتناسب مع سياق موقع الطرف الذي يربط.\nإذا كنت أحد المنظمات المدرجة في الفقرة 2 أعلاه وكنت مهتمًا بالارتباط بموقعنا الإلكتروني، فيجب عليك إبلاغنا عن طريق إرسال بريد إلكتروني إلى FullStackee. يرجى تضمين اسمك واسم مؤسستك ومعلومات الاتصال بالإضافة إلى عنوان URL الخاص بموقعك وقائمة بأي عناوين URL تنوي الارتباط بها بموقعنا الإلكتروني وقائمة بعناوين URL على موقعنا الإلكتروني التي ترغب في الارتباط بها. انتظر لمدة 2-3 أسابيع للحصول على رد.\nيجوز للمنظمات المعتمدة الارتباط بموقعنا الإلكتروني على النحو التالي:\nباستخدام اسم شركتنا؛ أو\rباستخدام محدد الموارد الموحد الذي يتم الارتباط به؛ أو\rباستخدام أي وصف آخر لموقعنا الإلكتروني المرتبط به والذي يكون منطقيًا في سياق وتنسيق المحتوى على موقع الطرف المرتبط.\rلن يُسمح باستخدام شعار FullStackee أو أي عمل فني آخر للربط في غياب اتفاقية ترخيص العلامة التجارية.\niFrames #\rبدون موافقة مسبقة وإذن كتابي، لا يجوز لك إنشاء إطارات حول صفحات الويب الخاصة بنا والتي تغير بأي شكل من الأشكال العرض المرئي أو مظهر موقعنا الإلكتروني.\nمسؤولية المحتوى #\rلن نتحمل المسؤولية عن أي محتوى يظهر على موقع الويب الخاص بك. أنت توافق على حمايتنا والدفاع عنا ضد جميع المطالبات التي تنشأ على موقع الويب الخاص بك. لا ينبغي أن يظهر أي رابط (روابط) على أي موقع ويب يمكن تفسيره على أنه تشهيري أو فاحش أو إجرامي، أو ينتهك أو ينتهك بطريقة أخرى أو يدعو إلى انتهاك أو انتهاك أي حقوق لطرف ثالث.\nتحفظ الحقوق #\rنحتفظ بالحق في طلب إزالة جميع الروابط أو أي رابط معين لموقعنا الإلكتروني. أنت توافق على إزالة جميع الروابط إلى موقعنا على الفور عند الطلب. كما نحتفظ بالحق في تعديل هذه الشروط والأحكام وسياسة الربط الخاصة به في أي وقت. من خلال الارتباط المستمر بموقعنا على الويب، فإنك توافق على الالتزام بشروط وأحكام الربط هذه واتباعها.\nإزالة الروابط من موقعنا على الويب #\rإذا وجدت أي رابط على موقعنا على الويب مسيء لأي سبب من الأسباب، فيمكنك الاتصال بنا وإبلاغنا في أي وقت. سننظر في طلبات إزالة الروابط ولكننا لسنا ملزمين بذلك أو بالرد عليك بشكل مباشر.\nلا نضمن أن المعلومات الموجودة على هذا الموقع صحيحة، ولا نضمن اكتمالها أو دقتها؛ ولا نعد بضمان بقاء الموقع على الويب متاحًا أو تحديث المواد الموجودة على الموقع.\nإخلاء المسؤولية #\rإلى الحد الأقصى المسموح به بموجب القانون المعمول به، نستبعد جميع التصريحات والضمانات والشروط المتعلقة بموقعنا الإلكتروني واستخدام هذا الموقع الإلكتروني. لا شيء في إخلاء المسؤولية هذا من شأنه:\nتقييد أو استبعاد مسؤوليتنا أو مسؤوليتك عن الوفاة أو الإصابة الشخصية؛\rتقييد أو استبعاد مسؤوليتنا أو مسؤوليتك عن الاحتيال أو التصريح الاحتيالي؛\rتقييد أي من مسؤولياتنا أو مسؤولياتك بأي طريقة غير مسموح بها بموجب القانون المعمول به؛ أو\rاستبعاد أي من مسؤولياتنا أو مسؤولياتك التي لا يجوز استبعادها بموجب القانون المعمول به.\rالقيود والمحظورات المفروضة على المسؤولية المنصوص عليها في هذا القسم وفي أماكن أخرى في إخلاء المسؤولية هذا: (أ) تخضع للفقرة السابقة؛ و(ب) تحكم جميع المسؤوليات الناشئة بموجب إخلاء المسؤولية، بما في ذلك المسؤوليات الناشئة عن العقد، والتقصير، وانتهاك الواجب القانوني.\nطالما يتم تقديم الموقع والمعلومات والخدمات الموجودة على الموقع مجانًا، فلن نكون مسؤولين عن أي خسارة أو ضرر من أي نوع.\n","externalUrl":null,"permalink":"/blog/ar/terms-and-conditions/","section":"Dev Mahmoud","summary":"مرحبًا بك في FullStackee!","title":"الشروط والأحكام","type":"page"},{"content":"شكرًا لك على قراءة مدونتي!\nاشترك في نشرة بريدي الإلكتروني أو استخدم موجز ويب RSS هذا للحصول على إشعارات بمنشورات المدونة الجديدة.\n","externalUrl":null,"permalink":"/blog/ar/subscribe/","section":"Dev Mahmoud","summary":"شكرًا لك على قراءة مدونتي!","title":"تابعنى","type":"page"},{"content":"\rإذهب الأن الى الفورم\r","externalUrl":null,"permalink":"/blog/ar/contact-us/","section":"Dev Mahmoud","summary":"\rإذهب الأن الى الفورم\r","title":"تواصل معى","type":"page"},{"content":"في FullStackee، التي يمكن الوصول إليها من https://fullstackee.com، تعد خصوصية زوارنا إحدى أولوياتنا الرئيسية. تحتوي وثيقة سياسة الخصوصية هذه على أنواع المعلومات التي يتم جمعها وتسجيلها بواسطة FullStackee وكيفية استخدامها.\nإذا كانت لديك أسئلة إضافية أو كنت بحاجة إلى مزيد من المعلومات حول سياسة الخصوصية الخاصة بنا، فلا تتردد في الاتصال بنا.\nتنطبق سياسة الخصوصية هذه فقط على أنشطتنا عبر الإنترنت وهي سارية على زوار موقعنا فيما يتعلق بالمعلومات التي يشاركونها و/أو يجمعونها في FullStackee. لا تنطبق هذه السياسة على أي معلومات يتم جمعها دون اتصال بالإنترنت أو عبر قنوات أخرى غير هذا الموقع.\nالموافقة #\rباستخدام موقعنا، فإنك توافق بموجبه على سياسة الخصوصية الخاصة بنا وتوافق على شروطها.\nالمعلومات التي نجمعها #\rسيتم توضيح المعلومات الشخصية التي يُطلب منك تقديمها، والأسباب التي يُطلب منك تقديمها، لك عند النقطة التي نطلب منك فيها تقديم معلوماتك الشخصية. إذا اتصلت بنا بشكل مباشر، فقد نتلقى معلومات إضافية عنك مثل اسمك وعنوان بريدك الإلكتروني ورقم هاتفك ومحتويات الرسالة و/أو المرفقات التي قد ترسلها إلينا وأي معلومات أخرى قد تختار تقديمها. عند تسجيلك للحصول على حساب، قد نطلب معلومات الاتصال الخاصة بك، بما في ذلك عناصر مثل الاسم واسم الشركة والعنوان وعنوان البريد الإلكتروني ورقم الهاتف.\nكيف نستخدم معلوماتك #\rنستخدم المعلومات التي نجمعها بطرق مختلفة، بما في ذلك:\nتوفير موقعنا الإلكتروني وتشغيله وصيانته\rتحسين موقعنا الإلكتروني وتخصيصه وتوسيعه\rفهم وتحليل كيفية استخدامك لموقعنا الإلكتروني\rتطوير منتجات وخدمات وميزات ووظائف جديدة\rالتواصل معك، إما بشكل مباشر أو من خلال أحد شركائنا، بما في ذلك خدمة العملاء، لتزويدك بالتحديثات والمعلومات الأخرى المتعلقة بالموقع الإلكتروني، ولأغراض التسويق والترويج\rإرسال رسائل بريد إلكتروني إليك\rالبحث عن الاحتيال ومنعه\rملفات السجل #\rتتبع FullStackee إجراءً قياسيًا لاستخدام ملفات السجل. تسجل هذه الملفات الزوار عندما يزورون مواقع الويب. تقوم جميع شركات الاستضافة بذلك كجزء من تحليلات خدمات الاستضافة. تتضمن المعلومات التي يتم جمعها بواسطة ملفات السجل عناوين بروتوكول الإنترنت (IP)، ونوع المتصفح، ومزود خدمة الإنترنت (ISP)، وختم التاريخ والوقت، وصفحات الإحالة/الخروج، وربما عدد النقرات. لا ترتبط هذه بأي معلومات يمكن التعرف عليها شخصيًا. الغرض من المعلومات هو تحليل الاتجاهات، وإدارة الموقع، وتتبع حركة المستخدمين على الموقع، وجمع المعلومات الديموغرافية.\nملفات تعريف الارتباط ومنارات الويب #\rمثل أي موقع ويب آخر، يستخدم FullStackee \u0026ldquo;ملفات تعريف الارتباط\u0026rdquo;. تُستخدم ملفات تعريف الارتباط هذه لتخزين المعلومات بما في ذلك تفضيلات الزوار والصفحات الموجودة على الموقع التي قام الزائر بالوصول إليها أو زيارتها. تُستخدم المعلومات لتحسين تجربة المستخدمين من خلال تخصيص محتوى صفحة الويب الخاصة بنا بناءً على نوع متصفح الزوار و/أو معلومات أخرى.\nملف تعريف ارتباط Google DoubleClick DART #\rيعد Google أحد البائعين الخارجيين على موقعنا. كما يستخدم ملفات تعريف الارتباط، المعروفة باسم ملفات تعريف ارتباط DART، لتقديم الإعلانات لزوار موقعنا بناءً على زيارتهم لموقع www.website.com ومواقع أخرى على الإنترنت. ومع ذلك، يجوز للزوار اختيار رفض استخدام ملفات تعريف الارتباط DART من خلال زيارة سياسة الخصوصية الخاصة بشبكة إعلانات ومحتوى Google على عنوان URL التالي - https://policies.google.com/technologies/ads\nشركاؤنا الإعلانيون #\rقد يستخدم بعض المعلنين على موقعنا ملفات تعريف الارتباط ومنارات الويب. يتم إدراج شركائنا الإعلانيين أدناه. كل من شركائنا الإعلانيين لديه سياسة خصوصية خاصة به لسياساتهم بشأن بيانات المستخدم. لتسهيل الوصول، قمنا بإنشاء ارتباط تشعبي لسياسات الخصوصية الخاصة بهم أدناه.\nGoogle\rhttps://policies.google.com/technologies/ads\rسياسات خصوصية شركاء الإعلان #\rيمكنك الرجوع إلى هذه القائمة للعثور على سياسة الخصوصية لكل من شركاء الإعلان في FullStackee.\nتستخدم خوادم الإعلانات التابعة لجهات خارجية أو شبكات الإعلانات تقنيات مثل ملفات تعريف الارتباط أو JavaScript أو إشارات الويب التي تُستخدم في إعلاناتها وروابطها التي تظهر على FullStackee، والتي يتم إرسالها مباشرة إلى متصفح المستخدمين. تتلقى تلقائيًا عنوان IP الخاص بك عندما يحدث هذا. تُستخدم هذه التقنيات لقياس فعالية حملاتها الإعلانية و/أو لتخصيص محتوى الإعلان الذي تراه على مواقع الويب التي تزورها.\nيرجى ملاحظة أن FullStackee ليس لديها إمكانية الوصول إلى ملفات تعريف الارتباط التي يستخدمها المعلنون التابعون لجهات خارجية أو التحكم فيها.\nسياسات الخصوصية الخاصة بالجهات الخارجية #\rلا تنطبق سياسة الخصوصية الخاصة بـ FullStackee على المعلنين أو مواقع الويب الأخرى. وبالتالي، ننصحك باستشارة سياسات الخصوصية الخاصة بخوادم الإعلانات التابعة لجهات خارجية للحصول على معلومات أكثر تفصيلاً. قد تتضمن ممارساتهم وتعليماتهم حول كيفية إلغاء الاشتراك في خيارات معينة.\nيمكنك اختيار تعطيل ملفات تعريف الارتباط من خلال خيارات المتصفح الفردية الخاصة بك. لمعرفة معلومات أكثر تفصيلاً حول إدارة ملفات تعريف الارتباط مع متصفحات ويب محددة، يمكن العثور عليها على مواقع الويب الخاصة بالمتصفحات.\nحقوق الخصوصية بموجب قانون CCPA (عدم بيع معلوماتي الشخصية) #\rبموجب قانون CCPA، يحق للمستهلكين في كاليفورنيا، من بين حقوق أخرى، ما يلي:\nطلب من الشركة التي تجمع بيانات شخصية عن المستهلك الكشف عن الفئات والبيانات الشخصية المحددة التي جمعتها الشركة عن المستهلكين.\nطلب من الشركة حذف أي بيانات شخصية عن المستهلك جمعتها الشركة.\nطلب من الشركة التي تبيع بيانات شخصية عن المستهلك عدم بيع بياناته الشخصية. إذا قدمت طلبًا، فلدينا شهر واحد للرد عليك. إذا كنت ترغب في ممارسة أي من هذه الحقوق، يرجى الاتصال بنا.\nحقوق حماية البيانات بموجب اللائحة العامة لحماية البيانات #\rنود التأكد من أنك على دراية كاملة بجميع حقوق حماية البيانات الخاصة بك. يحق لكل مستخدم ما يلي:\nالحق في الوصول - لديك الحق في طلب نسخ من بياناتك الشخصية. يجوز لنا فرض رسوم صغيرة عليك مقابل هذه الخدمة.\nالحق في التصحيح - لديك الحق في طلب تصحيح أي معلومات تعتقد أنها غير دقيقة. لديك أيضًا الحق في طلب استكمال المعلومات التي تعتقد أنها غير كاملة.\nالحق في المحو - لديك الحق في طلب محو بياناتك الشخصية، في ظل ظروف معينة.\nالحق في تقييد المعالجة - لديك الحق في طلب تقييد معالجة بياناتك الشخصية، في ظل ظروف معينة.\nالحق في الاعتراض على المعالجة - لديك الحق في الاعتراض على معالجتنا لبياناتك الشخصية، في ظل ظروف معينة.\nالحق في نقل البيانات - لديك الحق في طلب نقل البيانات التي جمعناها إلى منظمة أخرى، أو إليك مباشرة، في ظل ظروف معينة.\nإذا قدمت طلبًا، فلدينا شهر واحد للرد عليك. إذا كنت ترغب في ممارسة أي من هذه الحقوق، يرجى الاتصال بنا.\nمعلومات الأطفال #\rجزء آخر من أولويتنا هو إضافة الحماية للأطفال أثناء استخدام الإنترنت. نشجع الآباء والأوصياء على مراقبة نشاطهم عبر الإنترنت والمشاركة فيه و/أو مراقبته وتوجيهه.\nلا تقوم FullStackee بجمع أي معلومات تعريف شخصية عن الأطفال دون سن 13 عامًا عن عمد. إذا كنت تعتقد أن طفلك قدم هذا النوع من المعلومات على موقعنا، فنحن نشجعك بشدة على الاتصال بنا على الفور وسنبذل قصارى جهدنا لإزالة هذه المعلومات على الفور من سجلاتنا.\nالتغييرات على سياسة الخصوصية هذه #\rقد نقوم بتحديث سياسة الخصوصية الخاصة بنا من وقت لآخر. وبالتالي، ننصحك بمراجعة هذه الصفحة بشكل دوري لمعرفة أي تغييرات. سنخطرك بأي تغييرات من خلال نشر سياسة الخصوصية الجديدة على هذه الصفحة. تسري هذه التغييرات فورًا، بعد نشرها على هذه الصفحة.\nاتصل بنا #\rإذا كانت لديك أي أسئلة أو اقتراحات حول سياسة الخصوصية الخاصة بنا، فلا تتردد في الاتصال بنا.\n","externalUrl":null,"permalink":"/blog/ar/privacy-policy/","section":"Dev Mahmoud","summary":"في FullStackee، التي يمكن الوصول إليها من https://fullstackee.","title":"سياسة الخصوصية","type":"page"},{"content":"مرحبًا، أنا محمود عادل.\nمرحبًا بك في مدونتى: موطن الدروس التعليمية ومقاطع الفيديو والنصائح حول إطار عمل Laravel. بدأت في عام 2023 كمدونة شخصية صغيرة، ونمت لتصبح مركزًا للمعلومات المفيدة لجميع المستويات.\nأدير أيضًا قناة على YouTube تحمل نفس اسم FullStackee.\nيمكنك متابعة أحدث دروس Laravel التعليمية على Twitter أو بالاشتراك في النشرة الإخبارية الأسبوعية الخاصة بنا.\nإذا كنت تريد التواصل، راسلنا على البريد الإلكتروني dev.mahmoud.adel@gmail.com\n","externalUrl":null,"permalink":"/blog/ar/about-us/","section":"Dev Mahmoud","summary":"مرحبًا، أنا محمود عادل.","title":"من نحن","type":"page"}]