


[{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/tags/css/","section":"Tags","summary":"","title":"CSS","type":"tags"},{"content":"If you want a deeper understanding of how websites and designs work, you need to look beyond the code.\nIn this article, we’ll take you on a journey that starts with the developer tools inside the release, through understanding how the browser converts text into an element tree, and then, to always having access to a tool application using CSS.\nYou’ll also learn how to write instructions, work with directories, and understand kernels, making it possible for you to design websites in a completely effective way.\nCSS from Beginner to Pro: How to Design Flexible and Stunning Web Pages\rDeveloper Tools Within a Web Browser #\rMost web browsers come with Developer Tools which are a powerful tool for any web developer. These tools allow you to edit HTML and CSS code directly in the browser and see the results instantly.\nHowever, it is important to note that these changes are not automatically saved; they are simply a way to preview the impact of code or test ideas on a web page under development.\nHow to access Developer Tools #\rHow to access Developer Tools\rYou can easily open the developer tools by right-clicking on any part of the page and then choosing Inspect, depending on the language of the browser used. A window will appear containing a set of tabs, the most important of which is the Elements tab.\nOr by using the following shortcut ctrl + shift + c.\nExplore the Elements - Inspector tab #\rThrough the Elements tab, or in some browsers you will find it called Inspector, you can browse the HTML and CSS codes for the page. Many modifications can be made, such as:\nChanging the colors of texts and backgrounds. Modifying the sizes of fonts and page elements. Activating or disabling CSS properties using the checkbox next to each property. Using the developer tools regularly will help you understand how websites work more deeply and improve your skills as a professional web developer.\nFrom Text to Trees #\rFrom Text to Trees\rWhen you write an HTML document and display it in a browser, the display is different from what you wrote in the code page. This is because of an internal transformation called the DOM or Document Object Model.\nThe browser converts the HTML code into a tree of code so that it can interpret it correctly. For example:\nNumbered lists in HTML are automatically converted to elements with numbers, even if those numbers are not written in the original code. Ordered lists in HTML\rTree Structure #\rTree structure is not just a concept of HTML, it is a fundamental part of computer science. The tree consists of parts known as Nodes, which are connected by relationships called Branches.\nExample\nLet\u0026rsquo;s imagine an apartment with multiple rooms:\nThe bedroom contains a bed and a wardrobe. The bed contains a pillow, and the closet contains shelves. Each element here represents a Node, and the arrows connecting these elements are Branches.\nIn the same way, HTML codes are written according to the tree structure. For example:\nThe root node is the tag \u0026lt;html\u0026gt;. The root contains the tags \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt;. Inside \u0026lt;head\u0026gt; we can find \u0026lt;title\u0026gt; tag. Inside \u0026lt;body\u0026gt; we can find paragraphs, lists and other elements. Tree Structure\rBasic rules of tree structure: #\rA tree must have only one root. Each Node can have branches that lead to other nodes. Each Node has only one parent except the root. Trees to Boxes #\rTrees to Boxes\rAfter the browser converts the HTML code into a tree structure, this tree is converted into boxes that appear on the user\u0026rsquo;s screen.\nEach Node in the tree is converted into a box, and the box may contain smaller boxes inside it or be part of a larger box.\nWorking example\nLet\u0026rsquo;s assume that we write the following code:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Two\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Three\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; The \u0026lt;ul\u0026gt; list is converted to a large box. Each \u0026lt;li\u0026gt; element represents a smaller box inside the large box. With the help of CSS, you can modify how these boxes are displayed, such as placing them next to each other instead of arranging them vertically.\nCSS Syntax #\rA CSS rule consists of two main parts: the Selector and the Declaration Block.\nThe Selector is the part that specifies which elements in the HTML the rule will be applied to. The Declaration Block contains instructions that specify how these elements are to be modified. CSS Syntax\rFor example, if we wanted to turn all \u0026lt;li\u0026gt; elements green, the selector would be li, and the declaration block would contain:\ncolor: green; How to write CSS rules #\rCSS rules are written in the following format:\nIt starts with the selector, which is the part that defines the target elements. The brackets {} are used to define the declaration block. Inside the brackets, the declarations are placed, and each declaration consists of: Property: such as color or font-size. Value: such as green or larger. Each declaration ends with a semicolon (;). Examples:\nThe first example: Formatting all elements of the paragraph \u0026lt;p\u0026gt;: In this example:\nSelector: p (applies the formatting to all paragraphs). Declarations: color: purple; and font-size: larger;. p { color: purple; font-size: larger; } Example 2: Formatting elements with the class \u0026ldquo;weird\u0026rdquo;: .weird { width: 50%; color: blue; } Here, elements are targeted using a period (.) followed by the class name.\nApplying styles directly to HTML (Styling HTML Directly) #\r1. Style using the style attribute #\rYou can apply styles directly to HTML elements using the style attribute.\nFor example, if you want to change the color of all \u0026lt;li\u0026gt; elements to green, you can write:\n\u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026#34;color: green;\u0026#34;\u0026gt;Item 3\u0026lt;/li\u0026gt; Disadvantages of this method\nDuplicate: You need to manually add the attribute for each element, which causes a lot of duplicate work. Complexity: If an error occurs in one element, it will be difficult to detect and correct it. Maintenance: Making changes to the layouts becomes cumbersome if you need to manually modify all the elements. 2. Solution: Use CSS to avoid duplication #\rYou can avoid these drawbacks by using CSS to apply the rules centrally. Instead of specifying the style attribute for each element, you can:\nCreate a CSS rule inside the \u0026lt;style\u0026gt; element in the \u0026lt;head\u0026gt;: \u0026lt;style\u0026gt; li { color: green; } \u0026lt;/style\u0026gt; This rule will be applied to all \u0026lt;li\u0026gt; elements on the page automatically. How does a browser work? #\rWhen building a page, the browser uses the DOM tree to select elements and apply rules. CSS determines colors, shapes, and page layouts based on these rules.\nSelectors Type #\rIn CSS, selectors are the way you tell the browser which elements you want to apply rules to. The simplest type of selector is the Type Selector, which is used to select a specific element based on its HTML name, such as p (for paragraphs) or em (for italics), and even body (to apply the style to the entire document).\nHow ​​to Use a Type Selector #\rFor example, we could write a CSS rule that changes the font of text throughout a document:\nbody { font-family: Arial, sans-serif; color: #333; } This rule will make the font used throughout the document Arial, and the text color dark gray.\nImportance of Type Selector #\rWide Application: If you are writing an article that contains many headings like h1 and h2, you can use the type selector to apply styles to all elements of a particular type at once. Ease of Use: Instead of writing separate styles for each element, one rule can be used to cover all elements of the same type: h1 { font-size: 24px; font-weight: bold; } h2 { font-size: 20px; font-weight: bold; } Selectors: Class and ID #\rIt is not always necessary to apply the same style to all elements of the same type. For example, if you have an article that contains a sidebar, you may want to assign different styles to the paragraphs within the article compared to the sidebar.\nWhat is a Class? #\rA class is an attribute added to tags in HTML to define a group of elements that share the same properties. A class is written in CSS using a period (.) followed by the class name:\n\u0026lt;p class=\u0026#34;article-text\u0026#34;\u0026gt;This is text in the article.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;sidebar-text\u0026#34;\u0026gt;This is text in the sidebar.\u0026lt;/p\u0026gt; .article-text { color: #000; } .sidebar-text { color: #777; } What is an ID? #\rAn ID is similar to a class but is for unique elements. Each ID should have only one value on the page. An ID is written in CSS using a hash tag (#):\n\u0026lt;p id=\u0026#34;main-heading\u0026#34;\u0026gt;This is a main heading.\u0026lt;/p\u0026gt; #main-heading { font-size: 28px; text-align: center; } Difference between Class and ID #\rClass: Used for multiple elements. ID: Used for unique elements. Combining Selectors #\rCSS allows combining selectors to apply specific styles to elements according to their sequence or relationship to other elements. For example:\nli em { color: red; } This style applies to italicized elements (em) inside list elements (li). If you have the following code:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;em\u0026gt;Featured Element\u0026lt;/em\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Normal Element\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; The red style will be applied to text inside the italicized element only.\nOther types of built-in selectors #\rDescendant Selector: Targets all children of specific elements. Child Selector: Targets only direct elements. Why is it called \u0026ldquo;Cascading\u0026rdquo;? #\r\u0026ldquo;Cascading\u0026rdquo; in CSS refers to the way styles are determined for each element based on the relationships between nodes in the DOM tree.\nHow ​​do cascading rules work? #\rWhen a rule is defined for a specific node, the styles are inherited to all child nodes unless they are overridden:\nbody { color: #333; } h1 { color: orange; } em { color: red; } Main node (body): All text starts in dark gray. Headings (h1): Gets orange. Italics (em): Gets red if the rule is not overridden. Style priority #\rWhen there is a conflict between rules, styles are applied according to the priority principle:\nStyles defined inside the element (Inline). Styles with the most specific selectors. Global styles. CSS is a very powerful tool for styling web pages, and understanding how selectors and the concept of cascading work helps you create more organized and efficient websites. If you want to go deeper, check out Mozilla\u0026rsquo;s comprehensive CSS guide.\nA comprehensive guide to CSS units, boxes, and percentages. #\r1. CSS Units: Understanding the Basics #\rCSS (Cascading Style Sheets) gives you the ability to modify the layout of elements on a page in terms of size, shape, and location. To understand where elements are located and how they are organized, we need units of measurement.\nBasic Units in CSS:\nPixel (PX): This is the basic unit of measurement. In CSS, a pixel is defined as 1/96 of an inch, regardless of the screen resolution. Points (PT): These are primarily used to specify font sizes, with a point representing 1/72 of an inch. Relative Units (EM and REM): EM: Depends on the font size of the parent element. REM: Depends on the root font size. Working example:\n.skinny { width: 192px; /* Element width */ height: auto; } An element with the class skinny will appear 2 inches (192 pixels) wide.\n2. The concept of boxes in CSS #\rWhen rendering HTML, each element has an invisible \u0026ldquo;box\u0026rdquo; that can be modified using CSS. The basic elements you can adjust include:\nSize: width and height. Padding: the space between the content and the element\u0026rsquo;s border. Border: its thickness, color, and style can be specified. Margin: the space between the element and the surrounding elements. Working example:\n.box { width: 100px; height: 50px; border: 5px solid green; margin: 1em; padding: 0.5em; } This code creates a box with a width of 100px, a height of 50px, and a green border, with an inner spacing and an outer margin.\n3. Percentages in CSS #\rCSS allows values ​​to be specified as a percentage of the size of the parent element. For example:\nWhen an element is specified as 50%, it will take half the width of the parent element. Borders and paddings: Note that percentages do not include the border and padding. Working example:\n.parent { width: 500px; } .child { width: 50%; /* half the width of the parent element */ } 4. Separate formatting from structure #\rTo save effort and improve project management, CSS formatting can be placed in a separate file and linked to the HTML file using the \u0026lt;link\u0026gt; element.\nWorking example:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; This approach makes updates easier and enhances reusability.\nIntroduction to Fonts in CSS #\rFonts play a major role in improving the user experience and making the site visually distinctive. Using CSS, you can have complete control over the appearance of the texts on your site, from choosing the font type to specifying its size and style.\nWhat is a font in CSS? #\rIn the world of CSS, what we know as a font is known as a Font Family, which refers to the type of font such as \u0026ldquo;Times New Roman\u0026rdquo;, \u0026ldquo;Helvetica\u0026rdquo;, or \u0026ldquo;Impact\u0026rdquo;. When the font-family rule is applied to a specific element, the text will be displayed using that font if it is available on the user\u0026rsquo;s device. If it is not available, the text will fall back to the default font, which is usually a simple and uncomplicated font such as \u0026ldquo;Times\u0026rdquo;.\nTo avoid problems caused by unavailable fonts, you can use a set of fonts called a Font Stack. For example:\nfont-family: \u0026#34;Constantia\u0026#34;, \u0026#34;Georgia\u0026#34;, serif; In this example, if the font \u0026ldquo;Constantia\u0026rdquo; is not available, \u0026ldquo;Georgia\u0026rdquo; will be used, and if neither is available, any \u0026ldquo;Serif\u0026rdquo; font will be used.\nGeneric Font Families #\rCSS provides five generic font families that you can rely on as a backup plan:\nSerif: Fonts with decorative edges. Sans-serif: Simple fonts without decorations. Monospace: Fonts with a fixed width for each character. Cursive: Italic fonts that resemble handwriting. Fantasy: Decorative fonts. Controlling Font Properties #\rCSS allows you to control additional properties of fonts:\nFont Size: Using the font-size property. You can use units like px, em, or even rem. Line thickness: Using the font-weight property like bold. Line slant: Using the font-style property like italic. Underline: Using the text-decoration property like underline. Writing font properties on one line #\rTo combine all font properties on one line, you can use the font property. But you must stick to a specific order:\nfont: italic bold 16px/1.5 \u0026#34;Helvetica\u0026#34;, sans-serif; In this example:\nitalic to specify the slant. bold to specify the thickness. 16px to specify the size. 1.5 to specify the line height. \u0026ldquo;Helvetica\u0026rdquo;, sans-serif to specify the font family. Flexbox: Flexible Design with CSS #\rThe default layout techniques of browsers were based on traditional document design, where elements are arranged vertically from top to bottom. However, web technologies have evolved and require more flexible designs, which Flexbox enables.\nFlexbox allows for dynamic design that adapts to different screen sizes, making it ideal for designing responsive websites.\nKey Features of Flexbox #\rOrder Elements Horizontally: Once you set the display: flex property on the container, the elements inside it will be arranged horizontally. Wrapping Elements: Using the flex-wrap: wrap property, elements can move to a new line if there is not enough space. Space Distribution: Using the justify-content and align-items properties, you can control the alignment of elements and the distribution of spaces between them. Designing an XO game without Flexbox #\rHave you ever wondered how you could design an XO game board using simple CSS tools? Let\u0026rsquo;s do a fun exercise where we go through the traditional way of designing a game board, and then compare it to a design using Flexbox to understand the difference.\nStep 1: Build the Structure with HTML We\u0026rsquo;ll start by creating an HTML file containing the game elements: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;XO Game\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;X\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;O\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Step 2: Design using CSS We\u0026rsquo;ll add a little styling to make the elements look like they\u0026rsquo;re part of a real game: body { background-color: #333; color: #ccc; } ul { width: 300px; height: 300px; margin: auto; } li { width: 90px; height: 90px; margin: 5px; float: left; list-style: none; font-size: 70px; font-family: sans-serif; text-align: center; background-color: lightgray; color: blue; } Final result: When you open the file in a browser, you will get a grid that simulates the XO game board, but relies on the traditional technique of using float to arrange the elements. XO game\rDesigning XO Game Using Flexbox #\rNow, let\u0026rsquo;s review the modern and effective way to design the same game board using CSS Flexbox. You will be amazed at how easy and flexible this method is compared to the traditional method.\nStep 1: Setting up the design using Flexbox Using Flexbox, we will redesign the game board in a more organized and less complicated way: body { background-color: #333; color: #ccc; display: flex; justify-content: center; align-items: center; height: 100vh; } ul { width: 300px; height: 300px; display: flex; flex-wrap: wrap; } li { width: 90px; height: 90px; margin: 5px; display: flex; justify-content: center; align-items: center; list-style: none; font-size: 70px; font-family: sans-serif; background-color: lightgray; color: blue; } The end result: A sleek, flexible design that can be easily adjusted to fit different screen sizes, making it ideal for modern web requirements. XO game\rWhat makes Flexbox special:\ndisplay: flex creates a flexible system for arranging elements. flex-wrap: wrap ensures that elements move to the next line automatically. justify-content: center and align-items: center make boxes and text easily centered. By comparing the two methods, we can see the power and flexibility of Flexbox compared to the traditional method. Designing with Flexbox is not only easier, but it also opens up more possibilities for adding improvements and adapting to perfectly responsive designs.\nConclusion #\rCongratulations! You have taken an exciting journey through the depths of browser developer tools and the tree structure to boxes. You have taken another step forward in the world of web development.\nYou have learned how to write CSS rules, understand selectors, their types and importance, and learned how to use Flexbox to achieve flexible and attractive designs.\nWith this knowledge, you are now ready to apply it to your next projects as a front-end developer with confidence and professionalism. Remember, creativity begins with understanding, and excellence comes with practice. Keep learning, and enjoy creating great designs!\nCSS is a vast ocean. The most important advice is to rely on reliable references such as:\nMozilla Developer Network (MDN). Search using search engines to access practical examples and documentation of features. ","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/posts/css-from-beginner-to-expert-flexible-stunning-web-pages/","section":"Posts","summary":"If you want a deeper understanding of how websites and designs work, you need to look beyond the code.","title":"CSS from Beginner to Pro: How to Design Flexible and Stunning Web Pages","type":"posts"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/","section":"Dev Mahmoud","summary":"","title":"Dev Mahmoud","type":"page"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/tags/front-end/","section":"Tags","summary":"","title":"Front-End","type":"tags"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/blog/en/categories/web-development/","section":"Categories","summary":"","title":"Web Development","type":"categories"},{"content":"هل سبق وأن شعرت بالإحباط أثناء محاولة محاذاة العناصر على موقعك باستخدام CSS؟ ربما قضيت ساعات في تجربة مختلف القيم لتحديد المواقع، دون أن تصل إلى النتيجة المثالية. هنا يأتي دور Flexbox، التقنية السحرية التي أحدثت ثورة في عالم تصميم المواقع. بفضل خصائصها البسيطة والمرنة، يمكنك الآن توزيع العناصر ومحاذاتها بسهولة مذهلة. سواء كنت مبتدئًا أو محترفًا في تطوير الويب، فإن تعلم Flexbox سيفتح لك آفاقًا جديدة في تصميم واجهات المستخدم بشكل أنيق وفعال. في هذه المقالة، سنأخذك في رحلة شيقة لاكتشاف أسرار Flexbox وكيف يمكنك الاستفادة منها لتبسيط حياتك كمطور.\nمقدمة Flexbox: الخطوة نحو إتقان التوزيع والمحاذاة في CSS #\rمن هنا نبدأ رحلتنا نحو المستوى المتوسط في استخدام CSS مع أداة رائعة ومبتكرة تُعرف باسم Flexbox، أو كما يسميها الجميع ببساطة \u0026ldquo;فليكس\u0026rdquo;. تعتبر هذه التقنية ثورة حقيقية في كيفية توزيع ومحاذاة العناصر داخل الحاويات، حيث تجعل من السهل جدًا تحقيق نتائج بصرية مذهلة تُشبه تلك التي تجدها في أدوات التصميم مثل Adobe Illustrator، ولكن باستخدام الكود فقط.\nقبل ظهور Flexbox، كان ترتيب العناصر داخل الصفحة ومحاذاتها بشكل مثالي يمثل تحديًا كبيرًا للمطورين. ومع ذلك، جاءت هذه التقنية لتغيير كل شيء، حيث أصبحت تتيح الحاويات المرنة (Flex Containers) إمكانية توزيع العناصر داخلها بشكل سلس ومرن، سواء كان ذلك للتوسيع أو المحاذاة أو التوزيع.\nدعونا نغوص في تفاصيل Flexbox ونستكشف مميزاته وأسلوبه في العمل، مع شرح كل خطوة بأسلوب عملي وواضح مدعوم بالأمثلة.\n1. تعريف Flexbox وأهميته #\rFlexbox هو اختصار لـ \u0026ldquo;Flexible Box Module\u0026rdquo;، ويعد أداة قوية لتوزيع العناصر ومحاذاتها داخل صفحات الويب. ما يميز Flexbox هو المرونة وسهولة الاستخدام مقارنة بالتقنيات التقليدية في CSS.\n2. المشكلة قبل Flexbox #\rقبل ظهور Flexbox، كان ترتيب العناصر داخل الحاويات يتطلب الكثير من الجهد والكود، مثل استخدام float وpositioning، مما جعل الأمر معقدًا وأحيانًا غير عملي.\n3. ما الذي يقدمه Flexbox؟ #\rFlexbox يوفر إمكانيات مدهشة تشمل:\nتوسيع العناصر داخل الحاوية. محاذاة العناصر بشكل عمودي أو أفقي. توزيع العناصر بمسافات متساوية أو حسب الحاجة. 4. الحاوية والعناصر: المصطلحات الأساسية #\rالحاوية (Container): هي العنصر الرئيسي الذي يحتوي على عناصر أخرى بداخله. العناصر (Items): هي العناصر الفردية الموجودة داخل الحاوية. 5. البدء باستخدام Flexbox #\rاستخدام Flexbox سهل للغاية. كل ما عليك فعله هو تعيين خاصية display الخاصة بالحاوية إلى flex، وبعد ذلك يمكنك الاستفادة من مجموعة كبيرة من الخصائص لتخصيص التوزيع والمحاذاة.\n6. مثال عملي بسيط #\r.container { display: flex; } بمجرد تطبيق الكود أعلاه على الحاوية، يمكننا استخدام العديد من الخصائص مثل justify-content وalign-items لتحقيق التصميم المطلوب.\nمحاور واتجاهات Flexbox: فهم الأساسيات #\rFlexbox يعتمد بشكل كبير على مفهوم المحاور والاتجاهات، مما يتيح لك التحكم الكامل في توزيع العناصر ومحاذاتها داخل الحاوية. في هذا القسم، سنتعرف على المحاور (الرئيسي والبديل) وكيف يؤثر تغيير الاتجاهات على تصميمك.\n1. المحاور في Flexbox #\rFlexbox يعتمد على محورين رئيسيين:\nالمحور الرئيسي (Main Axis): يتم تحديده باستخدام الخاصية flex-direction. المحور البديل (Cross Axis): وهو المحور المعاكس للمحور الرئيسي. 2. القيم الممكنة لـ flex-direction #\rهناك أربع قيم رئيسية تؤثر على اتجاه العناصر داخل الحاوية:\nrow: المحور الرئيسي أفقي (من اليسار إلى اليمين). row-reverse: المحور الرئيسي أفقي (من اليمين إلى اليسار). column: المحور الرئيسي رأسي (من الأعلى إلى الأسفل). column-reverse: المحور الرئيسي رأسي (من الأسفل إلى الأعلى). مثال عملي:\n.container { display: flex; flex-direction: row; /* يمكن تغييرها إلى أي من القيم الأربعة */ } 3. كيف تعمل المحاور؟ #\rعند اختيار row أو row-reverse، يصبح المحور الرئيسي أفقيًا، بينما يكون المحور البديل رأسيًا. عند اختيار column أو column-reverse، يصبح المحور الرئيسي رأسيًا، بينما يكون المحور البديل أفقيًا. ملاحظات:\nالمحور الرئيسي يحدد كيفية ترتيب العناصر داخل الحاوية. المحور البديل يؤثر على المحاذاة العمودية أو الأفقية للعناصر. 4. التفاعل مع خصائص المحاذاة #\rFlexbox يقدم خصائص مثل justify-content و align-items للتحكم في توزيع العناصر ومحاذاتها على المحاور:\njustify-content: تعمل على المحور الرئيسي. align-items: تعمل على المحور البديل. مثال عملي:\n.container { display: flex; flex-direction: column; /* المحور الرئيسي عمودي */ justify-content: center; /* محاذاة العناصر على المحور الرئيسي */ align-items: flex-start; /* محاذاة العناصر على المحور البديل */ } 5. تأثير تغيير الاتجاه #\rبتغيير قيمة flex-direction، تتغير كيفية تفاعل العناصر مع المحورين. على سبيل المثال، عند التبديل من row إلى column، يصبح المحور الرئيسي عموديًا (أعلى-أسفل) والمحور البديل أفقيًا (يسار-يمين). 6. علاقة المحاور بـ Flexbox بشكل عام #\rكل خصائص Flexbox تقريبًا مثل justify-content و align-items و align-self تعتمد على المحاور التي تحددها. لذا، فهم المحاور والاتجاهات هو الخطوة الأولى لإنشاء تخطيطات مرنة ومتجاوبة.\nخصائص الحاوية (Flex Container Properties) #\rتوضيح الخصائص التي يتم تطبيقها على الحاوية:\ndisplay: flex و inline-flex: تنشيط Flexbox. flex-direction: تحديد اتجاه المحور (أفقي/عمودي). flex-wrap: التحكم في التفاف العناصر. flex-flow: الخاصية المختصرة لـ flex-direction و flex-wrap. justify-content: محاذاة العناصر على المحور الرئيسي. align-items: محاذاة العناصر على المحور المتقاطع. align-content: التحكم في توزيع الصفوف المتعددة (عند الالتفاف). خصائص العناصر (Flex Item Properties) #\rشرح الخصائص التي تؤثر على العناصر داخل الحاوية:\nflex-grow: التحكم في كيفية تمدد العناصر. flex-shrink: التحكم في كيفية تقلص العناصر. flex-basis: تحديد الحجم الأساسي للعنصر. flex: الخاصية المختصرة لـ flex-grow و flex-shrink و flex-basis. align-self: تخصيص محاذاة عنصر معين دون التأثير على البقية. محاذاة العناصر وتوزيعها باستخدام Flexbox #\rتُعتبر خاصية Flexbox واحدة من أهم الأدوات التي تُسهّل محاذاة العناصر وتوزيعها داخل الحاويات. كان التنسيق التقليدي باستخدام position: absolute أو relative يستغرق الكثير من الوقت، ولكن Flexbox حلّ هذه المشكلة بفضل خواصه البسيطة والفعّالة. هنا سنستعرض ميزتين رئيسيتين: align-items وjustify-content، وكيف يمكن استخدامهما بشكل عملي.\n1. خاصية justify-content: توزيع العناصر على المحور الأساسي #\rتتحكم خاصية justify-content في توزيع العناصر على المحور الأساسي (الذي يتم تحديده باستخدام خاصية flex-direction).\nالقيم الشائعة: #\rflex-start: يتم ترتيب العناصر من بداية المحور. center: يتم وضع العناصر في منتصف المحور. flex-end: يتم ترتيب العناصر في نهاية المحور. space-between: توزيع العناصر مع وجود مسافات متساوية بينها. space-around: توزيع العناصر مع وجود مسافات متساوية من الأطراف وبين العناصر. space-evenly: توزيع العناصر بحيث تكون المسافات متساوية تمامًا بين كل العناصر والأطراف. مثال عملي: #\r.container { display: flex; justify-content: space-around; /* توزيع العناصر مع وجود مسافات متساوية */ } 2. خاصية align-items: محاذاة العناصر على المحور العمودي #\rتتحكم خاصية align-items في محاذاة العناصر على المحور العمودي (وهو المحور المتعامد مع المحور الأساسي).\nالقيم الشائعة: #\rstretch: تمديد العناصر لملء المساحة المتاحة (القيمة الافتراضية). flex-start: محاذاة العناصر مع بداية المحور العمودي. center: وضع العناصر في وسط المحور العمودي. flex-end: محاذاة العناصر مع نهاية المحور العمودي. مثال عملي: #\r.container { display: flex; align-items: center; /* محاذاة العناصر في منتصف المحور العمودي */ } دمج القيم للحصول على تنسيق مثالي #\rعند استخدام justify-content مع align-items معًا، يمكن إنشاء تصميمات متطورة تُناسب جميع أنواع التخطيطات.\nمثال: #\r.container { display: flex; justify-content: center; /* توزيع العناصر في المنتصف أفقيًا */ align-items: flex-end; /* محاذاة العناصر في نهاية المحور العمودي */ } التفاف العناصر وتوزيعها باستخدام Flexbox #\rFlexbox هو أداة قوية لتوزيع العناصر داخل الحاويات بشكل مرن ومنظم. في هذا الشرح، سنستعرض ثلاث خصائص أساسية: align-content، flex-wrap، و**justify-content، بالإضافة إلى الفرق بين align-content وalign-items**، لتوضيح دور كل منها في ترتيب العناصر داخل الحاوية.\n1. خاصية align-content: توزيع الصفوف #\rتُستخدم خاصية align-content للتحكم في توزيع الصفوف داخل الحاوية عند وجود أكثر من صف. هذه الخاصية تكون فعّالة فقط مع خاصية flex-wrap عند التفاف العناصر.\nالقيم الأساسية لـ align-content: #\rflex-start: تجميع الصفوف في أعلى الحاوية. flex-end: تجميع الصفوف في أسفل الحاوية. center: توسيط الصفوف داخل الحاوية. space-between: توزيع الصفوف بحيث تكون المسافات بينها متساوية. space-around: توزيع المسافات بشكل متساوٍ حول الصفوف. space-evenly: توزيع الصفوف بمسافات متساوية تمامًا. مثال عملي: #\r.container { display: flex; flex-wrap: wrap; align-content: space-between; /* توزيع الصفوف بمسافات متساوية */ height: 300px; /* لضمان وجود مساحة كافية للصفوف */ } .item { flex: 1 1 100px; margin: 5px; background-color: #ccc; } 2. خاصية flex-wrap: التفاف العناصر #\rتتحكم خاصية flex-wrap في ما إذا كانت العناصر ستلتف إلى صفوف جديدة عند امتلاء الصف الحالي.\nالقيم الأساسية لـ flex-wrap: #\rnowrap (الافتراضية): جميع العناصر تبقى في صف واحد حتى لو تجاوزت الحاوية. wrap: تلتف العناصر إلى صفوف جديدة عند الحاجة. wrap-reverse: تلتف العناصر بترتيب معكوس (من الأسفل إلى الأعلى). مثال عملي: #\r.container { display: flex; flex-wrap: wrap; /* السماح بالتفاف العناصر */ } .item { flex: 1 1 150px; /* كل عنصر يأخذ مساحة عرض 150px */ margin: 10px; background-color: #89CFF0; } الفرق بين align-content و align-items #\ralign-items #\rتُستخدم لمحاذاة العناصر داخل الصف الواحد على المحور العمودي (المتقاطع). تؤثر على العناصر بشكل فردي داخل كل صف. align-content #\rتُستخدم لتوزيع الصفوف ككل داخل الحاوية. فعّالة فقط عندما يكون لديك عدة صفوف. مثال للتوضيح: #\r.container { display: flex; flex-wrap: wrap; height: 300px; align-items: center; /* محاذاة العناصر في منتصف المحور العمودي */ align-content: space-around; /* توزيع الصفوف بمسافات متساوية حولها */ } .item { flex: 1 1 100px; background-color: #FFD700; } نصائح مهمة عند استخدام هذه الخصائص #\rإذا كنت بحاجة إلى توزيع العناصر أفقيًا داخل صف واحد، استخدم justify-content. إذا كنت تعمل مع عدة صفوف، استخدم align-content لتوزيعها بشكل مناسب. align-items هو الخيار المناسب لمحاذاة العناصر على المحور العمودي داخل صف واحد. قم بتجربة القيم المختلفة لكل خاصية للحصول على التصميم الأنسب. الخاصية المختصرة flex-flow في Flexbox #\rما هي flex-flow؟ #\rflex-flow هي خاصية مختصرة (shorthand) تُستخدم لتحديد كل من خاصيتي flex-direction و flex-wrap في سطر واحد.\nبدلاً من كتابة الخاصيتين بشكل منفصل، يمكنك دمجهما معًا باستخدام flex-flow لتبسيط الكود.\nالصيغة العامة: #\rflex-flow: \u0026lt;flex-direction\u0026gt; \u0026lt;flex-wrap\u0026gt;; flex-direction: تحدد الاتجاه الرئيسي لمحور الحاوية (main axis).\nالقيم الممكنة: row (الاتجاه الأفقي من اليسار إلى اليمين - الافتراضي). row-reverse (الاتجاه الأفقي من اليمين إلى اليسار). column (الاتجاه العمودي من الأعلى إلى الأسفل). column-reverse (الاتجاه العمودي من الأسفل إلى الأعلى). flex-wrap: تحدد ما إذا كانت العناصر ستلتف إلى سطر جديد إذا لم تكن هناك مساحة كافية.\nالقيم الممكنة: nowrap (لا يوجد التفاف - الافتراضي). wrap (تلتف العناصر إلى صفوف جديدة عند الحاجة). wrap-reverse (تلتف العناصر في الاتجاه العكسي). أمثلة على الاستخدام: #\rمثال 1: الاتجاه الأفقي مع الالتفاف #\r.container { flex-flow: row wrap; } row: العناصر تتبع المحور الأفقي. wrap: إذا لم تكن هناك مساحة كافية، تلتف العناصر إلى صف جديد. مثال 2: الاتجاه العمودي بدون التفاف #\r.container { flex-flow: column nowrap; } column: العناصر تتبع المحور العمودي. nowrap: لا يُسمح بالتفاف العناصر. مثال 3: الاتجاه الأفقي مع التفاف عكسي #\r.container { flex-flow: row wrap-reverse; } row: العناصر تتبع المحور الأفقي. wrap-reverse: العناصر تلتف عكسيًا (السطر الجديد يظهر فوق السطر الحالي). القيم الافتراضية: #\rإذا لم تحدد الخاصية، فإن القيم الافتراضية هي:\nflex-flow: row nowrap; لماذا نستخدم flex-flow؟ #\rتبسيط الكود: بدلاً من كتابة الخاصيتين بشكل منفصل، يتم دمجهما في خاصية واحدة. سهولة القراءة والصيانة: يجعل الكود أكثر وضوحًا وتنظيمًا. مرونة التخصيص: يمكنك الجمع بين أي قيمة لـ flex-direction وأي قيمة لـ flex-wrap حسب احتياجات التصميم. خلاصة #\rflex-flow هي أداة مختصرة وأنيقة لتحديد الاتجاه (direction) والالتفاف (wrapping) لعناصر الحاوية في Flexbox. استخدامها يجعل الكود أقل تعقيدًا وأكثر تنظيماً، خاصةً في المشاريع الكبيرة.\nبالطبع، يمكننا تغطية العديد من النقاط المهمة حول Flexbox لجعل المقالة شاملة ومفيدة للمبتدئين والمحترفين على حد سواء. إليك قائمة بالنقاط التي يمكنك تغطيتها:\nمثال سريع على Flexbox: لمحة سريعة عن السحر الذي يمكن تحقيقه #\rFlexbox هو تقنية رائعة في CSS تسهل عليك التحكم في ترتيب العناصر ومحاذاتها داخل الحاويات. لنبدأ بمثال عملي سريع يعرض قدراته المدهشة، ثم نغوص لاحقًا في التفاصيل خطوة بخطوة لتتعلم كل ما تحتاجه لتحقيق تصميمات دقيقة ومثالية.\n1. إعداد HTML الأساسي #\rفي هذا المثال، لدينا إعداد HTML بسيط يتضمن:\nعنصر div رئيسي مع class يُسمى container. ثلاثة عناصر فرعية داخل الحاوية الرئيسية، كل منها يحمل class يُسمى box، مع id مميز: one، two، وthree. 2. تغيير اتجاه العناصر باستخدام Flexbox #\rFlexbox يسمح لك بتغيير اتجاه ترتيب العناصر بسهولة باستخدام الخاصية flex-direction.\nإذا كانت القيمة row، فإن العناصر تصطف أفقيًا (في صف). إذا كانت القيمة column، فإن العناصر تصطف رأسيًا (في عمود). مثال عملي: .container { display: flex; flex-direction: row; } عند تغيير القيمة إلى column-reverse، يتم عكس ترتيب العناصر عموديًا. 3. تغيير الترتيب باستخدام الخاصية order #\rFlexbox يمنحك الحرية لتحديد ترتيب العناصر داخل الحاوية بغض النظر عن ترتيبها في HTML، باستخدام الخاصية order.\nالترتيب الافتراضي: كل العناصر تحمل القيمة order: 0. مثال على تغيير الترتيب: #one { order: 3; } #two { order: 2; } #three { order: 1; } في هذا المثال، يصبح العنصر ذو المعرف three هو الأول في الترتيب، يليه العنصر two ثم one. 4. التحكم في محاذاة العناصر #\rFlexbox يتيح لك أيضًا محاذاة العناصر داخل الحاوية باستخدام خصائص مثل:\njustify-content: تتحكم في توزيع العناصر أفقيًا. align-items: تتحكم في محاذاة العناصر عموديًا. مثال:\n.container { display: flex; justify-content: space-between; align-items: center; } 5. ملاحظات إضافية: #\rFlexbox يتيح لك تحكمًا مذهلاً في التصميم، مما يجعله أداة قوية لإنشاء تخطيطات متجاوبة ومرنة.\nإعادة ترتيب العناصر باستخدام Flexbox: دليل شامل #\rFlexbox يوفر أدوات متعددة تتيح لك إعادة ترتيب العناصر داخل الحاوية بطريقة ديناميكية ومرنة. في هذا القسم، سنستعرض الطرق الثلاث الأساسية التي يمكن استخدامها لإعادة ترتيب العناصر، وسنوضح كيفية تنفيذها خطوة بخطوة.\n1. استخدام خاصية flex-direction مع القيم العكسية #\rالقيمة row-reverse: تعكس ترتيب العناصر أفقيًا، حيث يبدأ الترتيب من اليمين إلى اليسار. القيمة column-reverse: تعكس ترتيب العناصر رأسيًا، حيث يبدأ الترتيب من الأسفل إلى الأعلى. مثال عملي:\n.container { display: flex; flex-direction: row-reverse; /* أو column-reverse */ } 2. تعديل ترتيب العناصر في HTML مباشرةً #\rالطريقة الأبسط لتغيير الترتيب هي تعديل ترتيب العناصر في الكود نفسه. على سبيل المثال، إذا كانت العناصر مرتبة كالتالي: \u0026lt;div\u0026gt;العنصر 1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 3\u0026lt;/div\u0026gt; يمكن إعادة ترتيبها ببساطة إلى: \u0026lt;div\u0026gt;العنصر 2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;العنصر 3\u0026lt;/div\u0026gt; 3. استخدام خاصية order في CSS #\rخاصية order تمنحك مرونة أكبر في تحديد ترتيب العناصر بشكل مخصص. هذه الخاصية مخصصة فقط لعناصر Flexbox (العناصر الموجودة داخل الحاوية التي تحتوي على display: flex). مثال عملي:\n.container { display: flex; } .item1 { order: 3; /* العنصر الأول يظهر في الترتيب الثالث */ } .item2 { order: 1; /* العنصر الثاني يظهر في الترتيب الأول */ } .item3 { order: 2; /* العنصر الثالث يظهر في الترتيب الثاني */ } مثال شامل #\rHTML: #\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item1\u0026#34;\u0026gt;Box 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item2\u0026#34;\u0026gt;Box 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item3\u0026#34;\u0026gt;Box 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; CSS: #\r.container { display: flex; flex-direction: row; /* يمكنك تجربة row-reverse أو column-reverse */ } .item1 { order: 3; } .item2 { order: 1; } .item3 { order: 2; } النتيجة: #\rيتم عرض العناصر في المتصفح بترتيب: Box 2، Box 3، Box 1. ملاحظات هامة #\rخاصية order تعتمد على القيم العددية: القيمة الأقل تظهر أولاً. إذا كانت القيم متساوية، يتم استخدام الترتيب في HTML. استخدام flex-direction مع row-reverse أو column-reverse يمكن أن يكون مفيدًا عند الحاجة لعكس الاتجاه بالكامل. التعديل في الكود HTML نفسه يظل الأسهل، لكنه يفتقر إلى المرونة مقارنة بـ order. الخاتمة #\rوالآن، بعد أن تعرفت على قوة Flexbox وكيفية استخدامه لتحقيق تصميمات جذابة ومرنة، حان الوقت لتطبيق ما تعلمته. لا تتردد في تجربة مختلف الخصائص والتلاعب بها لفهم المزيد واكتشاف إمكانياتها. Flexbox ليس مجرد أداة، بل هو حل يغير قواعد اللعبة ويجعل تصميم واجهات المستخدم أمرًا ممتعًا وسهلًا. انطلق واستمتع بابتكار تصميمات مذهلة تسحر المستخدمين وتجعل عملك أكثر احترافية. تذكر أن الإبداع لا حدود له عندما تمتلك الأدوات المناسبة. حظًا موفقًا في مغامرتك مع Flexbox!\nخصائص التحكم في عناصر الـ Flexbox #\rلتحقيق مرونة أكبر في تصميم عناصر Flexbox، يمكنك استخدام ثلاث خصائص أساسية تؤثر على حجم كل عنصر على حدة. هذه الخصائص توفر لك السيطرة على كيفية تمدد العناصر أو تقلصها أو تحديد حجمها الأساسي داخل الحاوية.\nalign-self #\rخاصية align-self في CSS تمنحك القدرة على التحكم في محاذاة عنصر معين داخل حاوية Flexbox بشكل مستقل عن العناصر الأخرى. فهي تُستخدم لتجاوز القيمة المحددة للخاصية align-items التي تؤثر على جميع العناصر داخل الحاوية.\nالقيم الأساسية لـ align-self: #\rauto (القيمة الافتراضية):\nيعتمد العنصر على قيمة الخاصية align-items الخاصة بالحاوية. flex-start:\nيجعل العنصر يتموضع عند بداية المحور العمودي للحاوية. flex-end:\nيجعل العنصر يتموضع عند نهاية المحور العمودي للحاوية. center:\nيجعل العنصر يتموضع في منتصف المحور العمودي للحاوية. baseline:\nيجعل العنصر يتموضع بناءً على الخط الأساسي للنص داخل الحاوية. stretch:\nيجعل العنصر يتمدد ليملأ المساحة المتاحة له. مثال: #\r.container { display: flex; align-items: center; } .item { align-self: flex-end; /* هذا العنصر فقط سيتم محاذاته للنهاية */ } 2. flex-grow #\rتُحدد هذه الخاصية مدى قدرة العنصر على التمدد لاحتلال مساحة إضافية متاحة داخل الحاوية.\nالقيمة الافتراضية: 0 (العنصر لن يتمدد). القيمة الإيجابية: كلما زادت القيمة، زادت نسبة تمدد العنصر مقارنة بالعناصر الأخرى. مثال:\n.item1 { flex-grow: 1; /* تمدد بنسبة 1 */ } .item2 { flex-grow: 2; /* تمدد بنسبة أكبر */ } إذا وُجدت مساحة إضافية، سيتوسع item2 ليأخذ ضعف المساحة التي يأخذها item1.\n3. flex-shrink #\rتُحدد هذه الخاصية مدى قدرة العنصر على التقلص إذا لم تكن هناك مساحة كافية في الحاوية.\nالقيمة الافتراضية: 1 (العنصر يتقلص عند الحاجة). القيمة الصفرية: 0 تمنع العنصر من التقلص على الإطلاق. مثال:\n.item1 { flex-shrink: 1; /* يتقلص بشكل طبيعي */ } .item2 { flex-shrink: 0; /* لا يتقلص */ } في حالة نقص المساحة، ستبقى item2 بحجمها الأصلي، بينما يتقلص item1 لملاءمة المساحة.\n4. flex-basis #\rتُحدد هذه الخاصية الحجم الأساسي للعنصر قبل تطبيق خصائص التمدد أو التقلص (flex-grow و flex-shrink).\nالوحدات المقبولة: يمكن استخدام القيم مثل px أو % أو auto. القيمة الافتراضية: auto (الحجم الأساسي يعتمد على المحتوى أو عرض العنصر). مثال:\n.item1 { flex-basis: 100px; /* الحجم الأساسي 100px */ } .item2 { flex-basis: 30%; /* الحجم الأساسي نسبة مئوية */ } يتم تحديد حجم العنصر الأساسي، ثم يتم تعديله بناءً على المساحة المتاحة وقيم flex-grow وflex-shrink.\nالجمع بين الخصائص الثلاث معًا: flex #\rلجعل الكود أكثر وضوحًا، يمكن دمج الخصائص الثلاثة (flex-grow, flex-shrink, flex-basis) في خاصية واحدة تُسمى flex.\nالصيغة:\n.item { flex: grow shrink basis; } مثال:\n.item { flex: 1 0 100px; /* يتمدد بمقدار 1، لا يتقلص، الحجم الأساسي 100px */ } خلاصة #\rflex-grow: للتحكم في التمدد. flex-shrink: للتحكم في التقلص. flex-basis: لتحديد الحجم الأساسي. تُعد هذه الخصائص أدوات قوية لتصميم واجهات مرنة ومتناسبة بشكل مثالي داخل حاويات Flexbox.\n","date":"9 December 2024","externalUrl":null,"permalink":"/blog/ar/posts/flexbox-secrets-practical-guide-for-aligning-items-in-css/","section":"Posts","summary":"هل سبق وأن شعرت بالإحباط أثناء محاولة محاذاة العناصر على موقعك باستخدام CSS؟ ربما قضيت ساعات في تجربة مختلف القيم لتحديد المواقع، دون أن تصل إلى النتيجة المثالية.","title":"أسرار Flexbox: دليل عملي لتوزيع العناصر في CSS","type":"posts"},{"content":"HTML basics are one of the most important pillars that every web developer builds their website on. In this article, we will cover the most important concepts that every beginner and developer should understand, from the page header to the semantic tags that help search engines better understand the structure of the page.\nAre you ready to explore these essential elements that contribute to building great web pages? Follow along to learn how to use them correctly.\nHead and Semantic Elements in HTML\rThe head tag in HTML #\rThe \u0026lt;head\u0026gt; tag is one of the basic elements in an HTML document, as it contains information and data that is not directly displayed to the user, but it plays a vital role in organizing the page and improving its performance. To understand the function of this tag and its components, let\u0026rsquo;s look at the following example:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; An HTML file contains only one \u0026lt;head\u0026gt; tag. The function of the head tag in HTML #\rThe data or elements inside the \u0026lt;head\u0026gt; tag are not visible to the user when the page is viewed in the browser. However, it has important functions related to improving the user experience, providing information to search engines, and linking the page to additional files, styles, and codes. These functions can be divided into:\nDefining the page content: Providing descriptive information that helps search engines and browsers understand the content of the page. Improving performance: Linking external style sheets (CSS) and JavaScript. Adding special settings: Providing settings related to the page\u0026rsquo;s compatibility with different browsers and devices. Elements inside the head tag #\rElements inside the head tag\rThe \u0026lt;head\u0026gt; tag includes a set of tags, some of which are mandatory and others are optional, which are:\n1. title tag in HTML (mandatory): #\rIt specifies the page title that appears in the title bar or tab in the browser. This title is also important for improving the page\u0026rsquo;s ranking in search engines.\n\u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; Always include the \u0026lt;title\u0026gt; tag as it is mandatory to improve user experience and page ranking in search results. 2. meta tag in HTML (optional but important): #\rIt is used to specify descriptive information about the page such as markup, description, keywords, and browser settings.\nExamples:\n\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Page description here\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;HTML, CSS, JavaScript\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; The \u0026lt;meta\u0026gt; tag for viewport is necessary to make your site compatible with small screens such as smartphones. 3. HTML style tag (optional): #\rUsed to add internal CSS styles that affect the appearance of the page.\n\u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; } \u0026lt;/style\u0026gt; Minimize the use of the \u0026lt;style\u0026gt; tag within the page itself, and replace it with external CSS files via the \u0026lt;link\u0026gt; tag to improve the organization of the code and ease of updating. 4. HTML link tag (optional): #\rUsed to link the page to external files such as CSS files or any other resources like favicon.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;favicon/favicon-32x32.png\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;favicon/favicon-16x16.png\u0026#34; /\u0026gt; 5. HTML script tag (optional): #\rUsed to add or call JavaScript codes that implement interactive functions.\n\u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 6. noscript HTML tag (optional): #\rUsed to provide alternate content to users whose browsers do not support JavaScript or have it disabled.\n\u0026lt;noscript\u0026gt; Please enable JavaScript to view the page content. \u0026lt;/noscript\u0026gt; 7. base HTML tag (optional): #\rIn addition to the base elements inside the \u0026lt;head\u0026gt; tag, there is another element known as \u0026lt;base\u0026gt;, which is used to specify the base (URL) of links and images in the document. When this tag is defined, all relative links on the page are considered extensions of this URL.\nThe function of the base tag: #\rSpecify the path of relative links: It helps in facilitating the management of links within the page, as you can use relative links instead of absolute links. Improved resource management: When changing the main path of the site, it can be easily updated using this tag without having to modify all the links within the page. How ​​to use the base tag: #\rThe \u0026lt;base\u0026gt; tag is written inside the \u0026lt;head\u0026gt; tag and contains the href attribute to specify the base path. It can also include the target attribute to specify the default target for the links (such as opening the links in a new window or the same window).\nExample of using the base tag: #\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;base href=\u0026#34;https://example.com/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example of the \u0026amp;lt;base\u0026amp;gt; tag\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;about.html\u0026#34;\u0026gt;About the site\u0026lt;/a\u0026gt; \u0026lt;img src=\u0026#34;images/logo.png\u0026#34; alt=\u0026#34;Site logo\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;base href=\u0026quot;https://example.com/\u0026quot;\u0026gt; Specifies that all relative links will be considered an extension of https://example.com/. The link \u0026lt;a href=\u0026quot;about.html\u0026quot;\u0026gt; will be interpreted as: https://example.com/about.html. The image \u0026lt;img src=\u0026quot;images/logo.png\u0026quot;\u0026gt; will be interpreted as: https://example.com/images/logo.png. target=\u0026quot;_blank\u0026quot; Specifies that all links using the base path will open in a new window by default. Important Notes:\nThe \u0026lt;base\u0026gt; tag can only be used once within a \u0026lt;head\u0026gt; tag. If there is more than one tag, the extra tags will be ignored. When using \u0026lt;base\u0026gt;, make sure that it will not negatively affect other links that may require absolute paths. Importance of the \u0026lt;base\u0026gt; tag in projects: #\rEasy Link Management: Relative links are easy to handle especially in large projects where the base path is repeated on multiple pages. Time Saving: If the base path of the site changes, it can be updated in just one place. Using the \u0026lt;base\u0026gt; tag with other tags: #\rAdding \u0026lt;base\u0026gt; alongside other tags inside \u0026lt;head\u0026gt; makes your code more organized and helps in better understanding and managing your project:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;base href=\u0026#34;https://example.com/\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Trying the \u0026amp;lt;base\u0026amp;gt; tag\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles/main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;contact.html\u0026#34;\u0026gt;Contact Us\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The link in the example would be interpreted as follows: https://example.com/contact.html. The CSS file will be loaded from: https://example.com/styles/main.css. The \u0026lt;base\u0026gt; tag is a useful option for managing relative links in projects, especially when you have a fixed main path that you want to use across the page or the entire site.\nIn short, the \u0026lt;head\u0026gt; tag is where your HTML document is prepared to work properly and be compatible with different browsers, improving site performance and user experience.\nSemantic Tags and Their Importance in HTML #\rWhen designing a web page, it is preferable to use Semantic Tags to clearly identify the different parts of the page. These tags make it easier for developers, browsers, and search engines to understand the content of the page, which improves SEO and makes the site more organized.\nIn the past, general tags such as:\n\u0026lt;div id=\u0026#34;nav\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;footer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; to represent the different parts of the page such as navigation, header, or footer. Now, HTML provides dedicated semantic tags for these purposes, making the code more clear and easy to modify.\nMain Semantic Tags in HTML: #\r1. header Tag in HTML #\rUsed to identify the header of the page or the header of a specific section. Usually contains headings, logos, or navigation links. \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;a href=\u0026#34;#home\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;header\u0026gt; can be repeated throughout the document, such as a header for each section. It cannot be placed inside \u0026lt;footer\u0026gt;, \u0026lt;address\u0026gt; or another \u0026lt;header\u0026gt;. 2. nav Tag in HTML #\rUsed to group the main navigation links for the site. Helps screen readers recognize the navigation menu. \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#services\u0026#34;\u0026gt;Services\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#contact\u0026#34;\u0026gt;Contact Us\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;nav\u0026gt; should only be used for basic navigation links and not all links. 3. main tag in HTML #\rDefines the main content of the page. Its content should be unique and not repeated in other documents such as footers or navigation menus. \u0026lt;main\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Main article\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is the main content of the page.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; It is used only once on the page. Cannot be inside \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;aside\u0026gt;, or \u0026lt;nav\u0026gt;. 4. article tag in HTML #\rUsed for standalone content such as blog posts or news.\n\u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Article title\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is the body of the article.\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; The article must have a standalone meaning and be able to be distributed on its own. 5. section tag in HTML #\rUsed to divide content into subsections with headings.\n\u0026lt;section\u0026gt; \u0026lt;h3\u0026gt;Subsection\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Subsection details.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; Best used with a heading (such as \u0026lt;h2\u0026gt; or \u0026lt;h3\u0026gt;). Only used when there is no more specific tag (such as \u0026lt;article\u0026gt; or \u0026lt;aside\u0026gt;). 6. aside tag in HTML #\rRepresents side content such as a sidebar or additional links.\n\u0026lt;aside\u0026gt; \u0026lt;h4\u0026gt;Related Links\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link1\u0026#34;\u0026gt;Link 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link2\u0026#34;\u0026gt;Link 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/aside\u0026gt; 7. The footer tag in HTML #\rIt identifies the footer of the page or section.\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 All rights reserved.\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; The importance of using semantic tags in HTML #\rStructure clarity: Use appropriate tags to represent the real function of each section. Improving accessibility: Semantic tags help screen readers navigate easily. Improving SEO: Makes search engines understand the page better. By using semantic tags such as \u0026lt;header\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;main\u0026gt;, you can design clear, readable, and standard-compliant web pages. Avoid generic tags such as \u0026lt;div\u0026gt; when there are tags specifically for their function.\nMore semantic tags in HTML #\r1. figure tag in HTML #\rThe \u0026lt;figure\u0026gt; tag is used to contain independent content that can be annotated using the \u0026lt;figcaption\u0026gt; element. The two elements are treated as a single unit, allowing the figure and caption to be moved to different parts of the document without affecting the flow of the main content.\nCommon uses:\nImages Illustrations Diagrams Code snippets Working example:\n\u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;ps.svg\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;Free Palestine\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; figure tag in HTML\rAdditional notes:\n\u0026lt;figcaption\u0026gt; can be placed as the first or last sub-element inside a \u0026lt;figure\u0026gt;. The first \u0026lt;figcaption\u0026gt; inside the element is the main caption. Improved accessibility: \u0026lt;figcaption\u0026gt; provides a semantic description of the content of a \u0026lt;figure\u0026gt;, making the content easier for screen readers to understand. 2. details tag in HTML #\rThe \u0026lt;details\u0026gt; tag is used to create interactive elements that can be opened and closed to display or hide additional content, making the user experience more dynamic and organized.\nFeatures of the element:\nClosed by default and can be opened on demand. Allows any type of content to be included inside it, such as text, images, and even other HTML elements. Hint: The \u0026lt;summary\u0026gt; tag is used inside \u0026lt;details\u0026gt; to provide a visual title that is easy to click to open the details.\nWorking example:\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;Question 1\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt;Answer Here\u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; details tag in HTML\rAdditional benefits:\nEnhances readability and organization when dealing with a large amount of information. Supports all types of content, making it flexible for many applications. 3. time Tag in HTML #\rThe \u0026lt;time\u0026gt; tag is used to specify a date and/or time in an HTML document in a way that is understandable to humans and machines. This format is easy for browsers and search engines to use to provide additional features such as reminders or to display more accurate search results.\ndatetime attribute:\nUsed to specify a date and time in a machine-readable format (ISO 8601). Helps to improve contextual understanding for search engines and event management software. Practical examples:\nSetting working hours: \u0026lt;p\u0026gt;Open from \u0026lt;time\u0026gt;10:00\u0026lt;/time\u0026gt; to \u0026lt;time\u0026gt;21:00\u0026lt;/time\u0026gt; 7 days a week.\u0026lt;/p\u0026gt; Setting a specific appointment: \u0026lt;p\u0026gt;I have an appointment on \u0026lt;time datetime=\u0026#34;2024-02-14 20:00\u0026#34;\u0026gt;Valentine\u0026#39;s Day\u0026lt;/time\u0026gt;.\u0026lt;/p\u0026gt; Additional features:\nFacilitates linking events to calendar applications. Improves user experience by displaying the time in a clear and automatically translated way according to user settings. These semantic tags are powerful tools to improve content organization and make the document more understandable to search engines and assistive reading tools, enhancing the user experience.\nHTML5 Layout - The complete layout of the web page #\rNow let\u0026rsquo;s arrange and organize the elements correctly to create an ideal web page structure using the semantic tags provided by HTML5. When you put all the pieces together, you\u0026rsquo;ll notice that the final code will look like this:\nAlso, notice that we\u0026rsquo;ve added two attributes that we didn\u0026rsquo;t include details about in the explanation, but they\u0026rsquo;re very important and obvious:\nlang: to specify the language of the page. dir: to specify the direction of the content (such as right to left or vice versa). Here\u0026rsquo;s the final code:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ar\u0026#34; dir=\u0026#34;rtl\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Page Description Here\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;HTML, CSS, JavaScript\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;main.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Site Title\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#services\u0026#34;\u0026gt;Services\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#contact\u0026#34;\u0026gt;Contact Us\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;main\u0026gt; \u0026lt;article\u0026gt; \u0026lt;section class=\u0026#34;featured-image\u0026#34;\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;/article-image.jpg\u0026#34; alt=\u0026#34;Featured Image\u0026#34; /\u0026gt; \u0026lt;figcaption\u0026gt;Mobile Image\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;article-meta\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Published by Fullstackee on \u0026lt;time datetime=\u0026#34;2024-02-14 20:00\u0026#34;\u0026gt;2024-02-14 20:00\u0026lt;/time\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;h2\u0026gt;Article Title\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is the text of the article.\u0026lt;/p\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h3\u0026gt;Subsection\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Subsection Details.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;h4\u0026gt;Related Links\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link1\u0026#34;\u0026gt;Link 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#link2\u0026#34;\u0026gt;Link 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 All rights reserved.\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; With this arrangement, we have created the basic structure of a web page using semantic tags, ensuring a logical organization and ease of understanding for search engines and users alike. This approach not only improves the browsing experience, but also boosts your site\u0026rsquo;s ranking in search results.\nBut to get a professional and attractive look for the page, you must harness the power of CSS to style elements and design an integrated interface. Follow us in the upcoming lessons to learn how to apply this in simple and effective steps.\nConclusion #\rFinally, we hope you have benefited from this tour into the world of HTML basics. If there is anything we have not fully explained or you have a question about the topic, do not hesitate to leave a comment and we will be happy to answer it. Leave your question below and be part of our learning community that is always striving to develop its skills in the world of web development.\nFrequently Asked Questions #\rWhat is the meaning of semantic tags in HTML? #\rSemantic tags in HTML are elements that clearly explain the purpose of their content, making it easier for browsers and search engines to understand the structure of the page. Each tag has a specific function, and should be used according to its purpose to avoid misorganization on the page.\nWhat are the differences between semantic and non-semantic tags in HTML? #\rSemantic tags: directly explain the purpose of their content (such as \u0026lt;header\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;footer\u0026gt;), which helps search engines understand the structure of the page and enhances accessibility. Non-semantic tags: such as \u0026lt;div\u0026gt; and \u0026lt;span\u0026gt;, do not give any indication of the content, and are used only for formatting or grouping purposes without functional clarification. Which HTML element can be used to group elements when none of the semantic elements apply? #\rThe \u0026lt;div\u0026gt; element can be used to group elements in HTML when there is no need to use semantic elements. \u0026lt;div\u0026gt; is a non-semantic element, and is primarily used for formatting purposes or as a general container for content without giving it semantic meaning.\nWhat is the difference between header and h1? #\r\u0026lt;header\u0026gt;: A semantic element used to define the header of a specific section on a page, such as the main page header or the header of a specific article or section. It can contain headings (such as \u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;), logos, navigation menus, or any introductory content. \u0026lt;h1\u0026gt;: A heading element used to define the main heading of the content. There should be only one \u0026lt;h1\u0026gt; per main page or section, to indicate the most important heading for that content. Is head the same as header in HTML? #\rNo, \u0026lt;head\u0026gt; and \u0026lt;header\u0026gt; are not the same.\n\u0026lt;head\u0026gt; Contains information about the page such as the title and links to external files (CSS, JavaScript) and is not visible in the user interface. \u0026lt;header\u0026gt; Used to display visual content such as headings and menus and is visible in the user interface. ","date":"26 November 2024","externalUrl":null,"permalink":"/blog/en/posts/head-and-semantic-tags-in-html/","section":"Posts","summary":"HTML basics are one of the most important pillars that every web developer builds their website on.","title":"Everything you need to know about Head and semantic tags in HTML","type":"posts"},{"content":"","date":"26 November 2024","externalUrl":null,"permalink":"/blog/en/tags/html/","section":"Tags","summary":"","title":"HTML","type":"tags"},{"content":"","date":"19 November 2024","externalUrl":null,"permalink":"/blog/en/tags/back-end/","section":"Tags","summary":"","title":"Back-End","type":"tags"},{"content":"In the world of programming and application development, the back-end plays a pivotal role in managing data and ensuring that systems run smoothly behind the scenes. The back-end is the mastermind that runs logical operations and processes data, making front-end user interfaces work perfectly.\nThanks to technologies like PHP and MySQL, back-end development has become one of the most sought-after technical specializations in today’s job market. If you’re looking to understand how applications work from the inside or build a solid career in programming, the back-end field is the perfect destination for you.\nBack-End Development 2025: Required Skills and Job Opportunities\rWhat is Back-End? #\rBackend Development is the side responsible for the processes that occur behind the scenes of any website or application. Back-End focuses on data processing, database management, and ensuring that the website or application runs smoothly when interacting with the user interface (Front End).\nIn simple terms, Back-End is what happens when you click a button, go to a new page, or enter data into a form. It deals with all the processes that you do not see directly with your eyes but are necessary for the website to work.\nThe most popular programming languages ​​used in Back-End Development #\rThe world of Back-End development is full of multiple programming languages ​​that meet different needs and help build robust and secure applications. Let\u0026rsquo;s review the most important of these languages ​​and their features in an interesting way:\n1. PHP - The Giant of the Hidden Web #\rPHP is one of the most popular back-end languages, it is the driving force for more than 80% of websites on the Internet, including Facebook and WordPress. PHP Features:\nOpen source and easy to learn. Great integration with HTML. Wide support from the developer community and frameworks such as Laravel and CodeIgniter. Disadvantages: Some standard libraries may lack organization.\n2. Python - Simplicity and power at the same time #\rPython is characterized by its ease of writing codes and strong performance, making it an excellent choice for back-end development using frameworks such as Django and Flask.\nWhy Python?\nWriting short and effective codes. Integrated support for artificial intelligence and machine learning technologies. A rich community that helps solve problems easily. 3. Java – Stability and Security #\rJava is known for being scalable and secure, making it an ideal choice for large applications such as banking systems and e-commerce sites.\nAdvantages of Java:\nHigh performance efficiency. Ready-made libraries that facilitate development. Works on various systems via JVM technology. 4. Node.js – Power and responsiveness #\rDespite being an operating environment rather than a language, Node.js relies on JavaScript for back-end development, allowing it to handle multiple tasks at once.\nWhy Node.js?\nHigh execution speed. Low development cost. Used by tech giants such as Netflix and Uber. 5. Ruby – The language of simplicity and rapid development #\rRuby is widely used in web development, especially with the Ruby on Rails framework that facilitates building applications quickly and with high organization.\nAdvantages of Ruby:\nWriting easy and simple codes. A framework that helps produce scalable applications. A large community that supports collaborative development. 6. C++ – High Performance Language #\rC++ is often used in projects that require high performance and high accuracy, and is an ideal choice for competitive programming or complex back-end systems.\n7. ASP.NET – Innovation with Microsoft Support #\rASP.NET is characterized by providing integrated solutions for back-end development, especially using the C# language.\nWhat distinguishes it:\nDirect support from Microsoft. High security. Superior performance with complex databases. Which is right for you? #\rChoosing a language depends on the nature of the project, budget, and skills you have. However, we will focus on PHP as the preferred primary language.\nWe will learn one of these languages, usually PHP, and build amazing applications that make your ideas a tangible reality!\nWhat are Back End Languages? #\rBack End languages ​​are the foundation on which applications and websites rely to perform background operations, such as database management, request processing, and data validation. They can be likened to the engine that runs everything behind the scenes to ensure that the website runs efficiently and smoothly. Let\u0026rsquo;s review the basic languages ​​and their role in this field.\n1. PHP: The Backbone of Back End Development #\rPHP (Hypertext Preprocessor) is considered one of the most popular back end languages. It is used to create dynamic web applications that interact with databases and provide advanced features.\nPHP was first released in 1995, and it is open source, which contributed to its widespread popularity and community support. PHP is a flexible language that is used to develop simple websites to large projects such as content management (WordPress) or custom applications using frameworks such as Laravel. Thanks to its ease of learning, PHP is an ideal choice for beginners and professionals alike. 2. MySQL Language: The Data Guard #\rMySQL is an open source relational database used to store data in an organized manner and retrieve it when needed.\nMySQL was first released in 1995, and is the most popular choice when working with PHP. It is used to store data for users, products, orders, and more. Its main features:\nSpeed ​​and performance. Strong support for big data. The ability to work with multiple applications. By learning MySQL, you will be able to manage data effectively and build powerful applications.\nHow ​​to start learning backend languages? #\rStart with PHP: Learn the basics like writing scripts, working with forms, and working with databases using MySQL. Learn MySQL: Understand how to create tables, manage data, and execute basic SQL queries. Move to frameworks like Laravel: to speed up the development process and build advanced applications. Why are PHP and MySQL essential? #\rPHP and MySQL are a powerful and integrated duo. PHP handles requests and creates dynamic content, while MySQL stores and retrieves data when needed. Learning these two technologies forms the foundation for becoming a professional backend developer.\nBut that\u0026rsquo;s not all, mastering backend languages ​​requires you to acquire more skills and techniques to develop scalable and secure applications. In the following sections, we will review the most important tools and techniques that backend developers need.\nBack End Roadmap #\rBack End Roadmap\rThis track is based on developing your knowledge of web basics to advanced skills related to architectural design and publishing. We will focus on mandatory and optional points with an emphasis on PHP, MySQL, and Laravel.\nStage One: Internet Basics (Required) #\r1. Understanding the Internet\nHow does the Internet work? The concept of HTTP and protocols. Browsers and how do they work? Domain Name System (DNS). The concept of domains and hosting. Stage Two: Learning a Programming Language (Required) #\r2. PHP (Required)\nLearn the basics: variables, loops, conditions, functions. Object-Oriented Programming (OOP). Managing Sessions \u0026amp; Cookies. Uploading files and processing images. 3. JavaScript (Optional)\nLearn the basics of JavaScript to understand how to work with interactive interfaces. Stage 3: Version Control System (Required) #\r4. Git\nBasic Git commands (clone, commit, push, pull). Create and manage branches. 5. GitHub or GitLab (Required)\nUpload and share your projects. Stage 4: Databases (Required) #\r6. MySQL (Required)\nCreate databases and tables. Basic SQL commands (SELECT, INSERT, UPDATE, DELETE). Indexes and Normalization. 7. ORM with Laravel (Required)\nLearn Eloquent ORM to use databases programmatically. 8. PostgreSQL and NoSQL (Optional)\nMongoDB and Redis as a complement to skills. Stage 5: Laravel (Required) #\r9. Laravel Basics\nSetting up the project using Composer. Creating Routes, Controllers, and Views. Blade Template System. 10. Advanced Topics\nMiddleware. API Development using Laravel Passport or Sanctum. Managing Relationships. Handling Events and Queues. 11. Extending the Application\nCommon Packages like Spatie. Email Integration. Stage 6: Security (Required) #\r12. OWASP Risks\nIdentify common security threats and how to protect against them. Input Validation, CSRF, XSS. 13. Encryption (Hashing)\nUse bcrypt and argon2 to protect passwords. Stage 7: APIs (Required) #\r14. RESTful APIs\nCreate and consume REST APIs. Authenticate using JWT or OAuth. 15. GraphQL (Optional)\nLearn GraphQL for advanced projects. Stage 8: Additional Tools (Optional) #\r16. Docker\nSet up a development environment. 17. Nginx and Apache\nHosting applications. Stage 9: Architecture (Optional) #\r18. System Design\nLearn Monolithic vs. Microservice applications. 19. Performance Optimization\nCaching Strategies (Redis). Load Management Using CDN. Stage 10: Deployment and Project Management (Required) #\r20. CI/CD\nSet up automated deployment pipelines using GitHub Actions or GitLab CI. 21. Project Management\nUse Trello or Jira to manage project progress. Practical Tips: #\rImplement practical projects at each stage (e.g. create a blog or management system). Follow the official Laravel documentation to stay updated. Make time for hands-on experience through GitHub. How to become a master in the field of back-end? #\rTo become a master in the field of back-end development, you must follow an integrated and carefully planned path that includes the previous 10 stages, which aim to build the basic and advanced skills that any professional back-end developer needs.\nYour journey is not limited to theoretical learning only, but you must focus on implementing integrated practical projects using the tools and techniques you learn. Continuously following technical developments and practical application are the key to success!\nThe field is evolving rapidly, and the distinguished developer is the one who always stays up to date with the latest tools and practices.\nBack-end Professionalism Plan - 155 Days of Hard Work #\rBack-End Mastery Plan - 155 Days of Hard Work\rSince back-end development requires learning a variety of skills and is more in-depth than front-end, this plan spans over 5 months to ensure that basic and advanced concepts are understood and applied in practical projects.\nIntroductory Week: Understanding the Internet (5 days) #\rObjective: Build a comprehensive understanding of how the Internet works and the basic protocols.\n1. How ​​does the Internet work?\nUnderstand the flow of data over the network. Understand the role of servers and clients. 2. HTTP Concept and Basic Protocols\nHTTP and HTTPS: How do they work and what is the difference between them? Understand GET and POST requests and how servers respond. 3. Browsers and how they work?\nHow to display web pages. Browser Cache concept. 4. Domain Name System (DNS)\nHow are domain names translated into IP addresses? The role of DNS records. 5. Domains and Hosting\nThe concept of domains and how to reserve them. Understanding the types of hosting and how to choose the most suitable for projects. First Month: Programming and Database Basics (30 Days) #\rObjective: Building a strong foundation in programming and databases.\n1. Week 1: PHP Programming Basics\nLearn variables, loops, and conditions. Build simple programs such as a calculator. 2. Week 2: Databases using MySQL\nCreate databases and tables. Learn basic SQL queries (SELECT, INSERT, UPDATE, DELETE). 3. Week 3: Connecting PHP to MySQL\nCreate dynamic applications such as a simple login system. Dealing with forms. 4. Week 4: Reinforcing practical understanding\nBuilding a simple project such as an address book. Focusing on practical exercises and reviewing what has been learned. Month 2: Object-Oriented Programming (OOP) and Advanced Concepts (30 Days) #\rObjective: Learn object-oriented programming and understand how to use it in real projects.\n1. Week 1: OOP Basics\nUnderstand Classes, Objects, and Inheritance. Write programs using OOP. 2. Week 2: Apply object-oriented programming in practice\nBuild a user management system using OOP. Organize codes in separate files. 3. Week 3: Explore security techniques in PHP\nLearn how to protect against SQL Injection. Use prepared statements. 4. Week 4: Create a complete practical project using OOP\nSimple product management system. Improve the project using security features. Month 3: Advanced Frameworks and Rules (30 Days) #\rGoal: Master the Laravel framework and learn advanced techniques.\n1. Week 1: Introduction to Laravel\nInstall Laravel and learn its basic structure. Understand MVC (Model-View-Controller). 2. Week 2: Working with Eloquent ORM\nCreate models and bind them to tables. Execute complex queries using Eloquent. 3. Week 3: Create APIs\nLearn to create RESTful APIs. Build a small API project such as a task management system. 4. Week 4: Practical project using Laravel\nCreate a simple Content Management System (CMS). Include Authentication features. Month 4: Improving performance and dealing with advanced technologies (30 days) #\rGoal: Improve applications and add advanced features.\n1. Week 1: Improving performance\nLearn about caching. Reduce application response time. 2. Week 2: Dealing with large files and uploading\nAdding features for uploading files. Improving the performance of uploading large files. 3. Week 3: Time management and sending notifications\nWorking with scheduled tasks (Schedulers). Sending email and SMS notifications. 4. Week 4: Integrated project using acquired skills\nCreating a practical application such as a reservation system. Improving the project using best practices. Month 5: Advanced projects and continuous development (30 days) #\rGoal: Apply all acquired skills in real projects.\n1. Week 1: Creating an advanced project\nA simple e-commerce system. Include a control panel to manage products and users. 2. Week 2: Add advanced features\nDetailed reports using MySQL. Integrate electronic payment gateways. 3. Week 3: Review and document projects\nOptimize and organize code. Create documentation for projects. 4. Week 4: Develop future skills\nLearn about Docker and GitHub Actions. Explore technologies like GraphQL. Total plan duration: 155 days #\rThis track ensures that you have a deep understanding of every stage of back-end development, from the basics to advanced projects, enabling you to build powerful and effective applications!\nDefining the responsibilities of a back-end developer #\rA back-end developer focuses on:\nWriting codes that process and store data in databases such as MySQL. Designing APIs that communicate with front-end applications. Optimizing system performance. Securing data and developing algorithms. Examples of Backend tasks:\nBuilding a user login system. Designing a database to store information such as customer names. Optimizing data queries to ensure fast performance. Difference between Front-end and Back-end? #\rWorking in web development is like running a fancy restaurant - the Front-end is the dining room that guests see, while the Back-end is the kitchen where everything is prepared. Let\u0026rsquo;s get to know the roles of each more clearly.\nThe Front-end is the part that the user interacts with directly. When you open a website and see attractive colors, interactive buttons, drop-down menus, and animations - all of this is the work of a Front-end developer. It is responsible for turning designs into a tangible reality that the user can interact with easily and smoothly.\nThe Backend is the mastermind behind the scenes. When you log in to your account, buy a product, or send a message - all of these operations are handled in the Backend. It is like a control room that manages all the complex operations, from saving user data to processing payments and securing sensitive information.\nThe Frontend works with relatively simple technologies such as HTML to build the structure of the page, CSS to beautify it, and JavaScript to make it interactive. While the Backend deals with more complex programming languages ​​such as PHP, Python, or Java, databases that store information, and servers that process orders.\nWhen you order a product on an e-commerce site, the Frontend sends your order to the Backend, which checks the product’s availability, processes the payment process, saves your order in the database, and then sends a confirmation to the Frontend to show you a success message.\nFrontend developers focus on user experience and aesthetics. They care about how the user navigates the site, how easy it is to find information, and how attractive the design is. While Backend developers focus on operational efficiency, data security, and responsiveness.\nThe relationship between Frontend and Backend can be likened to a bridge between two worlds: the beautiful visual world of the user, and the complex world of data and operations. Both are essential to building a successful web application, and both complement each other perfectly.\nAnyone who wants to enter the field of web development has to choose between these two paths according to their inclinations - either work on the creative and interactive side with Frontend, or dive into the world of logic and data with Backend, or even combine them to become a Full Stack Developer.\nDifference between Backend and DevOps: A Simple Explanation #\rIs DevOps the same as Backend?\nThe simple answer is: No, Backend and DevOps are two completely different areas of software development and infrastructure management. Each has a unique role in the software development lifecycle, but their work can overlap at some points.\nWhat is DevOps?\nDevOps combines software development (Development) and operations (Operations) with the aim of improving the software development lifecycle.\nA DevOps Engineer focuses on:\nAutomation: Simplifying and deploying software updates using tools like Jenkins and Docker. Infrastructure Management: Setting up and managing servers and clouds using tools like Terraform and Kubernetes. Monitoring and Analytics: Monitoring the performance of applications and servers using tools like Prometheus. Ensuring Business Continuity: Improving workflows and ensuring fast, high-quality software delivery. Examples of DevOps Tasks:\nSetting up a new web application server using AWS. Creating automated deployment pipelines (CI/CD Pipelines) to accelerate software updates. Monitoring system performance and ensuring stability under stress. Is DevOps easier than Backend?\nThe answer depends on interests and skills:\nBackend requires strong programming skills and a deep understanding of algorithms and data structures. DevOps focuses more on automation, infrastructure management, and understanding cloud tools, with some programming skills. How ​​do Backend and DevOps overlap?\nBackend developers can learn DevOps techniques to expand their skills and participate in managing automated deployments. In contrast, DevOps engineers can work with backend code to improve performance or solve deployment issues. Can you start as a Backend and then transition to DevOps?\nOf course, many DevOps engineers started their careers as Backend developers, where programming experience helps them deal with process automation and infrastructure management better.\nThe difference in brief\nBackend: Focuses on building software systems and dealing with data. DevOps: Focuses on improving the software development lifecycle and infrastructure management. Each has its own scope and importance in a software development team, and any developer can choose the one that best suits their interests and ambitions.\nAverage Salaries for Back-End Developers #\rBack-End Developer salaries vary greatly by region, experience, and company size. Here’s an overview of average salaries in the US, Europe, and the Middle East:\nUS: The average salary for a back-end developer is around $158,122 per year. Salaries range from $111,255 to $224,733, depending on experience and geographic location.\nEurope: Salaries vary significantly across European countries:\nGermany: The average salary for a remote software engineer is around $72,900 per year. Netherlands: The average salary is $75,656 per year. Spain: The average salary is around $68,216 per year. Poland: The average salary is $71,327 per year. Portugal: The average salary is around $61,608 per year. Middle East: Salaries in this region vary based on country and experience. For example, in Turkey, the average salary for a remote software engineer is around $56,658 per year.\nPlease note that these numbers are approximate and may vary based on multiple factors such as experience, skills, and company size.\nConclusion #\rWhether you are a beginner looking to discover the world of programming, or a professional looking to improve your skills, backend development opens up endless possibilities in the field of technology.\nWith the increasing demand for this specialty around the world, you can build a distinguished and profitable career. By learning PHP, MySQL, and other backend technologies, you will be able to contribute to the creation of innovative applications that meet the needs of users and achieve sustainable success. Now is the perfect time to start on this exciting path!\nFeel free to ask any questions or share your experience with us in the comments – we are here to help you on your journey towards professional backend development. What\u0026rsquo;s the first question that comes to your mind about a backend developer that we haven\u0026rsquo;t covered yet? Share your thoughts with us!\n","date":"19 November 2024","externalUrl":null,"permalink":"/blog/en/posts/how-to-become-backend-developer/","section":"Posts","summary":"In the world of programming and application development, the back-end plays a pivotal role in managing data and ensuring that systems run smoothly behind the scenes.","title":"How to Become a Back-End Developer in 2025","type":"posts"},{"content":"In the modern digital age, front-end development is one of the most important skills required to create distinctive user experiences. The journey to master this field goes through several basic stages that require learning various techniques and tools, from the basics of HTML and CSS to using advanced frameworks such as Vue.js and TailwindCSS.\nIn addition, it is necessary to understand the real role of the front-end developer, and his responsibilities that differ from other fields such as user interface (UI) and user experience (UX) design.\nIn this article, we will learn about the front-end learning path step by step, and highlight the differences between the front-end developer and similar fields, to provide a comprehensive vision for those who want to excel in this renewed field.\nFront-End Development 2025: Required Skills and Job Opportunities\rWhat is Front-End? #\rImagine that you are visiting a website for the first time; everything you see in front of you from bright colors, attractive buttons, high-quality images, smoothly flowing menus, and videos that add a distinctive experience - all of this is the result of the work of a front-end developer.\nFront-End is the art of designing and implementing the visual interface of any website or web application, which is what the user interacts with directly. This field relies on three basic pillars: HTML to create the structure, CSS to add beauty and coordination, and JavaScript to make the site lively and interactive.\nBut it doesn\u0026rsquo;t stop at the basic languages ​​only; With the advent of frameworks like React.js and Vue.js, and design libraries like Bootstrap and Tailwind CSS, front-end development has become easier and more efficient, allowing developers to focus on delivering an amazing user experience with minimal time and effort.\nSimply put, front-end is the bridge between a website’s design and its technical appeal, transforming ideas into a vibrant digital experience, full of details that make the user gravitate to stay and interact.\nWhat are Front-End Languages? #\rFront-end languages ​​are the foundation on which any web page relies to make it visual, structured, and interactive. They can be likened to the three pillars of any integrated building: structure, decoration, and interaction. Let’s review each language and its role in this field.\n1. HTML: The Foundation of Structure #\rHTML (HyperText Markup Language) is the cornerstone of website development. It represents the language that creates the general framework of web pages, such as titles, text, images, and buttons.\nHTML was invented in 1993, and its latest version, HTML5, introduced distinctive features to support video, audio, and interactive applications. HTML can be described as the skeleton of any website; everything starts from here. 2. CSS Language: A Touch of Beauty and Formatting #\rCSS (Cascading Style Sheets) is the language that brings life and beauty to the HTML structure.\nIt is used to format colors, choose fonts, specify spaces, add background images, and improve the visual experience in general. Imagine a web page without CSS: simple texts and boring colors, similar to an old text document. But thanks to CSS, the page can be transformed into a masterpiece. It was first launched in 1996, and since then it has become an indispensable part of developing attractive interfaces. 3. JavaScript: A Touch of Interactivity and Intelligence #\rJavaScript is the language that brings a website to life.\nIt adds dynamic interaction such as moving elements, validating forms, and updating content without having to reload the page. JavaScript was first introduced in 1995 by Brendan Eich, and quickly became the backbone of user-site interaction. With libraries and frameworks such as React and Vue.js, JavaScript goes beyond simple interaction to become a tool for developing complete web applications. How ​​to start learning Front-End languages? #\rStart with HTML: The first step to building the structure of any website. Learning its basics is simple and quick. Move to CSS: Add an aesthetic touch to the structure you created using HTML. Learn font design, colors, and element formatting. Conclude with JavaScript: After you master the basics, add interaction and vitality to your website using this powerful programming language. Why are these languages ​​essential? #\rWithout HTML, there would be no structure. Without CSS, the page would look dull and untidy. Without JavaScript, there would be no interaction or dynamism. Learning these three languages ​​is the foundation from which any front-end developer can build their career.\nBut as we mentioned, learning these three languages ​​is just the beginning. The path to front-end development requires you to acquire more techniques and skills to become a professional. In the following paragraph, we will learn about the most prominent tools and skills that front-end developers need.\nFront End Development Professionalism Roadmap #\rFront End Development Professionalism Path - Front End Roadmap\rIf you are looking to become a professional front-end developer, the path requires familiarizing yourself with a wide range of skills and tools, and organizing your learning into clear, easy-to-follow stages.\nIn this path, we have divided the journey into 7 basic stages that start from the basics and end with advanced techniques and areas of expansion. Each stage is designed to lead you step-by-step from understanding the basics of the web to building integrated applications using Vue.js and Quasar Framework or TailwindCSS. Whether you are a beginner or looking to improve your skills, this path will give you a solid foundation and the ability to build professional projects.\nStage One: Basics (Required) #\r1. Internet Basics (Required):\nHow the Internet works. Data transfer protocols (HTTP/HTTPS). Domain definition - Hosting - DNS. How browsers work. 2. Learn HTML (Required):\nHTML Basics. Writing Semantic HTML. Forms and Validations. Accessibility. Technical SEO Basics. 3. Learn CSS (Required):\nCSS Basics. Layouts. Flexbox and CSS Grid. Responsive Design. 4. Learn JavaScript (Required):\nJavaScript Basics. DOM and BOM. Fetch API / Ajax. Stage Two: Core Frameworks and Libraries (Optional) #\r5. Choosing a CSS Framework (Optional):\nTailwindCSS (Recommended). Bootstrap (Optional). 6. CSS Architecture (Optional):\nBEM (Block Element Modifier) 7. CSS Preprocessors (Optional):\nSASS (Recommended). SCSS. LESS. PostCSS. Stage 3: Tools and Basics (Required) #\r8. Git (Required):\nLearn Git Basics. Branches and Commits. Pull Requests. GitHub Pages. 9. Package Management (Required):\nnpm (Recommended). pnpm (Optional). yarn (Optional). 10. Build Tools (Required):\nLinters and Formatters (Prettier and ESLint). Module Bundlers (Vite - Recommended). Stage 4: Core Framework (Required) #\r11. Choosing a JavaScript Framework (Vue.js - Required):\nVue.js. Learn Vue Router and Vuex (or Pinia). 12. Choosing a UI Framework:\nQuasar Framework (Recommended). Vuetify (optional). 13. SSR (optional):\nNuxt.js to serve content from the server. Stage 5: Advanced Skills (optional) #\r14. Type Checker (optional):\nTypeScript. 15. Testing (optional):\nVitest. Jest. Cypress. 16. Web Security Basics (optional):\nCORS. Content Security Policy HTTPS. OWASP Security Risks. 17. Authentication Strategies (optional):\nJWT OAuth Basic Auth Session Auth 18. PWAs (optional):\nUsing Lighthouse and DevTools to improve performance. Working with Service Workers and Web Storage. Browser API. Stage 6: Working with Advanced UIs (Optional) #\r19. Web Components (Optional):\nHTML Templates. Custom Elements. Shadow DOM. 20. GraphQL (Optional):\nLearn to work with GraphQL APIs. 21. Static Site Generators (Optional):\nVuePress or Nuxt.js. Stage 7: Expand to other platforms (optional) #\r22. Mobile App Development (optional):\nIonic (integrated with Vue.js). NativeScript. 23. Desktop App Development (optional):\nElectron. How to become a front-end expert? #\rTo become a front-end expert, you need to follow a carefully planned and integrated path that includes the 7 previous stages that focus on building basic and advanced front-end skills.\nDon\u0026rsquo;t stop at theoretical learning, but build integrated practical projects using the tools and techniques you learn, and stay up to date with modern technologies. Continuity and practical application are the key to excellence!\nHere\u0026rsquo;s the action plan you can follow to master front-end development.\nFront End Professionalism Plan - 120 Days of Hard Work #\rFront-End Mastery Plan - 120 Days of Hard Work\r1. Month 1: Learn the basics of the Internet, HTML, and CSS.\n2. Month 2: Learn basic JavaScript. Learn Git and npm.\n3. Month 3:\nLearn Vue.js and TailwindCSS. Build simple projects. 4. Month 4:\nLearn Quasar Framework. Build a full-stack project (SPA or PWA). This track combines basic and advanced skills based on project needs.\nDefining the responsibilities of a front-end developer #\rFrom the above, we have a clear vision of most of the skills that must be mastered for front-end development. However, there remains an important question that needs to be answered: What are the responsibilities of a front-end developer?\nIn short, what specific role does a front-end developer play in building a project? To answer this question accurately, we must distinguish between his responsibilities and other fields that may seem similar to him at first glance, but when we delve into the details, we will find that each of them has its own roles and responsibilities.\nAmong these fields, come the fields of User Interface Design (UI) and User Experience (UX), which may meet with the front-end developer at certain points, but they differ fundamentally in terms of functions and goals.\nThe difference between the responsibilities of the front-end developer and the fields of UI and UX\n1. User Interface Design (UI - User Interface): #\rThe UI specialist focuses on the visual aspects of the user interface, such as colors, fonts, icons, buttons, and the arrangement of elements on the screen. The main goal is to design an attractive and easy-to-use interface. He uses tools such as Figma, Adobe XD, and Sketch to design prototypes. Relationship with the Front End:\nThe UI designer delivers the final designs to the Front End developer to convert them into interactive code. 2. User Experience (UX - User Experience): #\rThe UX specialist focuses on how the user interacts with the digital product, starting from his journey within the site or application to how easy it is to achieve his goals. He deals with user research, creating scenarios (User Flows), and improving the experience to make it more effective and comfortable. Relationship with Front-End:\nThe UX specialist provides guidance related to the user experience to the front-end developer to ensure that the website or application is implemented in a way that achieves the desired goals. 3. Front-End Developer: #\rResponsible for translating visual designs and user experience into code using HTML, CSS, and JavaScript. Ensures that the interface is responsive and works properly on all devices and browsers. Integrates with the back-end team to make the website or application dynamic. The most prominent responsibilities of the front-end developer:\nImplement designs accurately while taking into account performance and user experience. Improve site speed (Performance Optimization). Use frameworks and libraries such as Vue.js and React to create interactive interfaces. Key Distinction: While UI/UX professionals focus on planning and designing the user experience and its appearance, a front-end developer focuses on the programmatic implementation of that vision and turning it into an actual, seamless interface.\nJob Opportunities for Front-End Developers #\r1. JavaScript Developer/Engineer: #\rA JavaScript developer specializes in using this powerful programming language and its libraries and frameworks such as React, Vue.js, and Node.js. These developers have advanced skills in creating dynamic and robust applications, allowing them to work as full-stack developers, handling both the front-end and back-end aspects of a project. JavaScript developer expertise is in high demand due to the growing importance of this language in web development.\n2. React Developer/Engineer: #\rSpecializes in building interactive user interfaces using the React.js library. These developers focus on improving performance and writing clean code using features like hooks and Redux for state management. Additionally, React developers can scale to advanced environments like Next.js to create advanced and scalable web applications.\n3. Vue.js Developer/Engineer: #\rVue.js developers are experts in the flexible and easy-to-use Vue.js framework. They build interactive web applications that provide excellent user experience using reusable components. Vue.js is among the leading front-end development tools due to its simplicity compared to frameworks like React and Angular, and developers rely on it to build small to large-scale applications.\n4. Angular Developer/Engineer: #\rSpecializes in the Angular framework developed by Google. Angular is powerful in building large and complex web applications due to its strong component architecture, advanced state management, and built-in routing. Angular developers have the ability to develop fully integrated and responsive applications, and often use TypeScript to develop more stable applications.\nAverage Salaries for Front-End Developers #\rSalaries in front-end development depend on several factors, including geography, years of experience, specialized skills, and company type. Here\u0026rsquo;s an overview of average salaries based on these factors:\n1. Front-End Developer: #\rEntry level (0-2 years): $30,000 to $50,000 per year. Intermediate level (3-5 years): $50,000 to $80,000 per year. Advanced level (5+ years): $80,000 to $120,000 per year. 2. JavaScript Developer: #\rEntry level: $40,000 to $60,000 per year. Intermediate: $60,000 to $90,000 per year. Advanced: $90,000 to $130,000 per year. 3. React Developer: #\rEntry: $45,000 to $65,000 per year. Intermediate: $65,000 to $95,000 per year. Advanced: $95,000 to $140,000 per year. 4. Vue.js Developer: #\rEntry: $40,000 to $60,000 per year. Intermediate: $60,000 to $85,000 per year. Advanced: $85,000 to $120,000 per year. 5. Angular Developer: #\rEntry level: $45,000 to $65,000 per year. Intermediate: $65,000 to $100,000 per year. Advanced: $100,000 to $150,000 per year. Geographical location: Salaries also vary by location. For example:\nIn the United States: Salaries can be higher due to the high demand for web developers. In Europe: Salaries are generally lower, but may vary by country. In the Middle East: Salaries may be lower compared to North America, but they are increasing as the market evolves. Required Skills:\nAdvanced skills in JavaScript, React, or Vue.js can increase the value of a developer\u0026rsquo;s salary, as companies are looking for developers with deep knowledge of the latest frameworks and development tools.\nConclusion #\rFront-end development is not just a technical field, but a combination of art and technology, as it contributes to providing comfortable and attractive user experiences. By following a systematic learning path and acquiring the required skills, anyone can take steady steps towards professionalism.\nWith an understanding of the true role of a front-end developer and the distinction between his responsibilities and the responsibilities of other fields, it becomes easier to define your goal and develop your career path better.\nKeep learning, and do not stop exploring new technologies and tools, as the digital world is full of opportunities and potentials waiting for you to achieve.\nDo not hesitate to ask any questions or share your experience with us in the comments - we are here to help you on your journey towards professional web development. What\u0026rsquo;s the first question that comes to your mind about a visual interface developer that we haven\u0026rsquo;t covered yet? Share your thoughts with us!\n","date":"18 November 2024","externalUrl":null,"permalink":"/blog/en/posts/how-to-become-frontend-developer/","section":"Posts","summary":"In the modern digital age, front-end development is one of the most important skills required to create distinctive user experiences.","title":"How to Become a Front-End Developer in 2025","type":"posts"},{"content":"Now that we know the basics of web development, it\u0026rsquo;s time to learn the basics of HTML, the backbone of the web development world. Especially the front-end.\nLearn HTML\rHTML is characterized by giving us the ability to control how content is displayed on the browser, and opens up wide areas for us to format texts, images, and other elements in an interactive and effective way.\nAn HTML file contains codes known as \u0026ldquo;tags\u0026rdquo;, which allow us to direct the browser to perform certain commands, such as how to display texts or organize the page.\nWhat is HTML? Understanding the basics of coding and tags for beginners #\rIn HTML, coding is done using texts with special meaning called \u0026ldquo;tags\u0026rdquo;. Most tags appear in a specific way,\n\u0026lt;Opening-Tag\u0026gt; Specific text \u0026lt;/Closing-Tag\u0026gt; Where the text is surrounded by symbols less than \u0026lt; and greater than \u0026gt;. For example, the tag \u0026lt;strong\u0026gt; is used to make the text inside it prominent.\n\u0026lt;strong\u0026gt;Bold Text\u0026lt;/strong\u0026gt; Here\u0026rsquo;s another example of a tag used to emphasize text, called \u0026lt;em\u0026gt;. This tag itals the embedded text to indicate its importance, as in:\n\u0026lt;em\u0026gt;Italic Text\u0026lt;/em\u0026gt; Using Tags in HTML\rHTML Tag Structure Explained #\rEvery element starts with an opening tag and ends with a closing tag. For example, the opening tag \u0026lt;figcaption\u0026gt; is followed by the closing tag \u0026lt;/em\u0026gt;, where the latter is marked with a slash /.\nIn HTML, tags that come in pairs are essential; a tag cannot be opened without being closed, similar to parentheses where a parenthesis cannot be closed without being opened first.\nThis helps to build a proper structure for the content, which is a fundamental concept in programming languages.\nElement vs. Tag: Understanding the Difference #\rIn HTML, the entire unit that contains the opening tag and the closing tag, as well as the content inside, is called an \u0026ldquo;Element\u0026rdquo;.\nElement and Tag in HTML\rOnly the opening tag and the closing tag are called a \u0026ldquo;tag\u0026rdquo;. Although some people use the term \u0026ldquo;tag\u0026rdquo; to refer to the entire element, knowing this distinction is important in programming to ensure proper interaction with the browser.\nDealing with Commas and Whitespace in HTML: What You Need to Know #\rIn HTML, you may notice that the browser treats commas and whitespace differently than a text editor.\nDealing with Spaces and Paragraphs in the browser\rWhen you insert multiple spaces or new lines into your code, the browser merges them into one space when rendering. This phenomenon is known as \u0026ldquo;whitespace\u0026rdquo; merging.\nWhitespace refers to the empty spaces and line breaks that we add to our code to make it organized.\nHowever, the browser does not automatically take these spaces into account, so if you want to break text into consecutive lines in the browser, you need to use a dedicated tag.\nbr (Break Line) Tag\nbr tag in HTML\rThe \u0026lt;br\u0026gt; tag is a good example of how to control text formatting; it breaks a line and starts a new line without the need for a closing tag,\nsince it has no internal content. Such tags are called \u0026ldquo;empty elements\u0026rdquo; or \u0026ldquo;null elements\u0026rdquo; because they perform simple functions without the need to add content between the two tags.\nIn addition to \u0026lt;br\u0026gt;, there is also the \u0026lt;img\u0026gt; tag used to insert images, which is also an empty element that we will discuss later.\nHow to create paragraphs in HTML to organize web content #\rAlthough the \u0026lt;br\u0026gt; tag is useful for adding line breaks, organizing web content sometimes requires dividing text into clear and formatted paragraphs, especially when writing articles or stories.\nIn HTML, the \u0026lt;p\u0026gt; element is used to create a new paragraph. This character is an abbreviation for the word \u0026ldquo;Paragraph\u0026rdquo; and depends on an opening tag and a closing tag as in the example.\n\u0026lt;p\u0026gt;New Paragraph\u0026lt;/p\u0026gt; Let\u0026rsquo;s convert these texts to paragraphs.\nUsing Paragraphs in HTML\rWhen the page is reloaded, the paragraphs will appear neatly separated by small margins between each paragraph, giving the text an organized and easy-to-read appearance.\nUsing \u0026lt;p\u0026gt; elements to organize paragraphs helps the browser understand the structure of the text, not just its visual presentation. Later, you will learn how to customize the appearance of paragraphs using CSS to have complete control over the formatting of the text.\nDifference between Commas and Paragraphs in HTML: A Basic Understanding of Content Formatting #\rIn HTML, we have two ways to divide text into lines: the \u0026lt;br\u0026gt; tag, and the \u0026lt;p\u0026gt; paragraph tag. While \u0026lt;br\u0026gt; acts as an empty element to add a line break only, the \u0026lt;p\u0026gt; element is used to create a paragraph that contains a complete text.\nThe \u0026lt;br\u0026gt; tag simply ends the current line and moves to the next line, while the \u0026lt;p\u0026gt; tag gives the paragraph an additional feature by creating a \u0026ldquo;block\u0026rdquo; that contains the text.\nBlocks help in formatting the content, where each paragraph has its own space on the page. This block includes automatic margins above and below the paragraph, which makes it easier to read and separates the text comfortably on the eye.\nImprove the layout of text in HTML using basic tags #\rsub \u0026 sup \u0026 mark tags in HTML\rNow that we know about commas, spaces, and paragraphs, let\u0026rsquo;s explore some other HTML elements that add refinement to your text. These elements are known as \u0026ldquo;typographic elements\u0026rdquo; and are used to direct the browser to display text in a different format.\nLet\u0026rsquo;s start with plain text. If we save and open it in the browser, the text will appear as it is. But what if we want to add effects for emphasis? We can use the \u0026lt;figcaption\u0026gt; or \u0026lt;strong\u0026gt; tag to make text italic or bold as we saw earlier, but this time we\u0026rsquo;ll learn about another HTML element: \u0026lt;mark\u0026gt;. This tag is used to highlight text as if a colored pen has been passed over it.\nIt is one of the semantic elements in HTML that expresses its function directly.\nThis is a \u0026lt;mark\u0026gt;Highlight Text\u0026lt;/mark\u0026gt; When you try the tag in your browser, you\u0026rsquo;ll notice that the text appears highlighted in yellow! You can also try other elements like \u0026lt;sub\u0026gt; and \u0026lt;sup\u0026gt; which add symbols in the form of subscript (below the normal text) or superscript (above the normal text).\n\u0026lt;p\u0026gt;H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;2\u0026lt;sup\u0026gt;4\u0026lt;/sup\u0026gt;\u0026lt;/p\u0026gt; HTML: Block vs. Inline Elements – Your Guide to Understanding the Differences #\rAs you delve deeper into HTML projects, you\u0026rsquo;ll come across two basic types of elements: block elements and inline elements. The \u0026lt;p\u0026gt; element, for example, is a \u0026ldquo;block element\u0026rdquo; because it creates an invisible box around its content.\nElements that don\u0026rsquo;t create blocks, such as \u0026lt;figcaption\u0026gt;, \u0026lt;mark\u0026gt;, and \u0026lt;br\u0026gt;, are known as \u0026ldquo;inline elements\u0026rdquo;. Block elements, such as lists, tables, and headings, create separate spaces, with the browser assigning each one a separate box. In contrast, inline elements, such as links and images, flow within the text and don\u0026rsquo;t take up a separate space.\nOver time and as your HTML knowledge grows, you\u0026rsquo;ll learn how to use block and inline elements to build consistent, effective web pages.\nNesting in HTML: Using nested elements intelligently #\rNesting In HTML\rNesting is an important concept in HTML and means placing one element inside another. A simple example of this nesting is \u0026ldquo;Russian dolls\u0026rdquo;; you can open the larger doll to find a smaller one inside, and so on. Similarly, HTML elements can be placed inside other elements, but some rules must be followed.\nFor example, a paragraph can contain \u0026lt;figcaption\u0026gt; elements inside it to emphasize the text. This nesting is common in HTML documents; large elements, such as paragraphs and \u0026lt;div\u0026gt;, are placed inside smaller elements to format the text.\nYou can place a \u0026lt;sup\u0026gt; element inside a \u0026lt;figcaption\u0026gt;, for example, to make the text appear highlighted and raised at the same time.\nHowever, there are some combinations that are not allowed; you cannot place a paragraph inside another paragraph, and you cannot nest elements out of order.\nIn general, these rules are natural and logical, but they help to organize the structure of the document in a neat and clear way.\nHTML Guide: The Importance of the li Tag in Creating Structured Lists #\rSome HTML elements are only used within certain other elements; they are not meaningful on their own. An example of such an element is the list element \u0026lt;li\u0026gt;.\n\u0026lt;li\u0026gt; is an element of a list that includes items such as a shopping list, a to-do list, or a table of contents. This element cannot appear on its own; it must be within an ordered or unordered list.\nTypes of Lists in HTML #\rNumbered and unordered lists in HTML\rThere are two types of lists that can contain \u0026lt;li\u0026gt; elements:\nOrdered List \u0026lt;ol\u0026gt;: Used when there is a need to automatically order the list items by numbers or letters. Unordered List \u0026lt;ul\u0026gt;: Used to create lists that display dots or circles in front of each item, without having to order the items. Why do li elements have to be inside lists? #\rThe reason \u0026lt;li\u0026gt; elements don\u0026rsquo;t appear by themselves is that ordered and unordered lists display differently; without them inside \u0026lt;ol\u0026gt; or \u0026lt;ul\u0026gt;, the browser wouldn\u0026rsquo;t know whether to put a number or a period in front of the element. Therefore, HTML requires \u0026lt;li\u0026gt; elements to be inside either \u0026lt;ol\u0026gt; or \u0026lt;ul\u0026gt; to ensure that they display properly.\nNesting in Lists #\rYou can also nest lists inside other lists. For example, you might need a to-do list that contains steps inside it to perform some task. For example, \u0026ldquo;Learn HTML\u0026rdquo; might contain steps like \u0026ldquo;Learn tags\u0026rdquo;, and that \u0026lt;li\u0026gt; element would be nested inside a \u0026lt;ul\u0026gt; element inside another \u0026lt;li\u0026gt; element.\nClosing tags for li elements #\rClosing tag in list item is not necessary\rSince the \u0026lt;li\u0026gt; element is only used within a list and cannot appear directly inside another \u0026lt;li\u0026gt;, HTML does not require you to write closing tags for \u0026lt;li\u0026gt; elements. If the browser finds a new opening \u0026lt;li\u0026gt; tag inside a list, it automatically assumes that the previous element has ended. However, some web developers may prefer to always write closing tags for \u0026lt;li\u0026gt; elements to make the code more clear.\nRemember that you should always write closing tags for \u0026lt;ul\u0026gt; and \u0026lt;ol\u0026gt; elements, because the browser needs these tags to know when the list is completely finished and not accidentally insert any additional content into the list.\nUnderstanding URLs for Better HTML Browsing #\rTo learn how to add links and images to your web pages, there’s something to cover along the way: web addresses. The web wouldn’t be the web without web addresses. Every website, page, image, and file on the web has its own unique address.\nThese addresses are how your browser follows links from one to another, and they’re also a big part of how users direct their browser to a website in the first place.\nWhenever you add a link in your HTML code, you’ll use these addresses. In the \u0026lt;a\u0026gt; tag, there’s technical terminology for these addresses.\n\u0026lt;a href=\u0026#34;URL\u0026#34;\u0026gt;Click here\u0026lt;/a\u0026gt; What is a URL? #\rEvery page on the internet has a unique address called a “web address,” or “URL” for short. This address is a string of letters and numbers that tells your computer where to find that page.\nThis simply means that it’s an address that tells your browser how to locate a specific resource, such as a file, in a uniform way. The word \u0026ldquo;uniform\u0026rdquo; here simply means consistent.\nThere are different ways to write URLs, and when people read these addresses, you\u0026rsquo;ll sometimes see \u0026ldquo;http://\u0026rdquo; or \u0026ldquo;https://\u0026rdquo; at the front.\nA URL consists of several basic parts:\nProtocol (http:// or https://) Domain name (e.g. example.com) Path Correct Use of Links in HTML\rYou might see www.example.com. This works fine if you type it into your browser because the browser knows you want to go to that site. But if you use it in your HTML code, it won\u0026rsquo;t work because the browser needs to know how to point to a file with that name.\nTypes of URLs #\rAbsolute URLs:\nStart with (http:// or https://) Used to point to external sites Example: https://example.com/page.html Relative URLs:\nUsed to point to files in the same site You don\u0026rsquo;t need to type the full domain Example: images/photo.jpg When writing URLs in HTML, we have to be careful to give the browser all the information it needs. You can sometimes take shortcuts, but for now, we\u0026rsquo;ll just write the full URLs. Or what are called absolute links.\nYou’ve probably seen it before, but let’s review its absolute form.\nWeb addresses typically start with http:// or https://, which tells the browser whether to use secure encryption to connect to the web server.\nThe URL for a file on a local drive (your computer) starts with file://.\n“HTTP”, “HTTPS”, and “file” are all protocols, or ways that a browser can get something. After the protocol, we always see a colon and a dash separating the protocol from the rest of the URL.\nThe next part you’ll see is the domain name, which tells the browser which server to connect to. Local URLs won’t have this, because there’s no server, and the browser is reading from your computer.\nThis is why if you give someone the URL for a file on your computer, they probably won’t be able to see it, because the file isn’t on their computer.\nThe last thing that appears in a full URL is the file path, which is the name of the directory and file that the URL points to. This can sometimes be empty or a single slash (/) if you are linking to the home page or top page of a website as we will see.\nCreating Links in HTML: Effective Steps Using the a Tag #\rThe hypertext experience means that you can have text documents like web pages, but they also contain references between them. On the web, those references are links. Every time you click on a link on a web page, you are using those links.\nWhen you write HTML, you can link between web pages, whether your own or someone else\u0026rsquo;s. That\u0026rsquo;s how search engines work, for example.\n\u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt;Visit Link\u0026lt;/a\u0026gt; Here\u0026rsquo;s how to create a link in your HTML. The element used to create links is called \u0026lt;a\u0026gt;. It\u0026rsquo;s not called a \u0026ldquo;link\u0026rdquo;, it\u0026rsquo;s called \u0026ldquo;a\u0026rdquo; because it stands for \u0026ldquo;anchor\u0026rdquo;, where the \u0026lt;a\u0026gt; element links a title to a piece of text on the page. That may sound strange, but that\u0026rsquo;s how it is.\nWe can\u0026rsquo;t use \u0026lt;a\u0026gt; by itself. There are a few things that a \u0026lt;a\u0026gt; element must include to create a link: the text that the user clicks to follow the link, and the URL of the linked page. Here\u0026rsquo;s how we\u0026rsquo;ll do it:\nThe opening tag of the \u0026lt;a\u0026gt; element starts with an extra piece of data that we\u0026rsquo;ve never seen before in HTML text, called href=\u0026quot;URL link\u0026quot;.\nThis is an example of an HTML attribute, which is an extra piece of data that comes with the element and gives it extra meaning. The part before the equal sign is the name of the attribute, and the part after it in double quotes is the value of the attribute. Here the name is href, and the value is http://example.net.\nhref stands for \u0026ldquo;hypertext reference\u0026rdquo; and is used with \u0026lt;a\u0026gt; tags and some other tags that link to others. You\u0026rsquo;ll never see it in a paragraph tag or a confirmation tag or anything like that.\nThen there\u0026rsquo;s the contents of the \u0026lt;a\u0026gt; element, which becomes the text that appears on the page, and then there\u0026rsquo;s the closing tag \u0026lt;/a\u0026gt;. You might notice that it doesn\u0026rsquo;t have any attributes.\nThe href attribute is always in the opening tag at the beginning of the element. That\u0026rsquo;s all there is to creating links in HTML.\nI\u0026rsquo;ve created an element with a starting tag and a closing tag. The starting tag contains the href attribute with an equal sign and inside double quotes the URL of the page we want to link to, the contents of the element are the text that the user clicks on, and then there\u0026rsquo;s the closing tag \u0026lt;/a\u0026gt;.\nHow to Insert Images into HTML to Make Your Pages More Attractive #\rWeb pages wouldn\u0026rsquo;t be like this without pictures of bears, maps, news, charts, or banner ads. Images are a big part of the success of the web, so you might be wondering how to include images in your web pages.\nYou\u0026rsquo;ll probably be surprised to find that there\u0026rsquo;s an HTML element dedicated to that. That element is the \u0026lt;img\u0026gt; for images, and it works similarly to the \u0026lt;a\u0026gt; element for links, but with a few important differences.\n\u0026lt;img src=\u0026#34;path/to/image.jpg\u0026#34; alt=\u0026#34;Image description\u0026#34;\u0026gt; The \u0026lt;a\u0026gt; element for links uses a single attribute called href, which is the URL of the page you want to link to. But the \u0026lt;img\u0026gt; element uses two attributes: src and alt.\nsrc stands for \u0026ldquo;source\u0026rdquo;, which is the URL of the image you want to appear on your web page.\nalt stands for \u0026ldquo;alternative\u0026rdquo;, which is a text description of that image that appears if the image is not fetched correctly. The text that appears here is usually called \u0026ldquo;alternative text\u0026rdquo;.\nYou need to include both attributes when writing HTML. The src attribute tells the browser where to get the image from, and the source of the image, while the alt attribute tells the browser what text to display if it cannot display the image.\nFor example, the word \u0026ldquo;Image Description\u0026rdquo; will be displayed if the file is missing from the server in the previous example, or if the user\u0026rsquo;s network connection drops before the image is loaded, such as on mobile phones, or if the user can\u0026rsquo;t see the images, such as blind users.\nOne thing to keep in mind is that placing a \u0026lt;img\u0026gt; element in your HTML file does not insert the image file into the HTML file, it tells the browser where to find that file.\nThe source must exist somewhere, whether on your local disk or on a server.\nA \u0026lt;img\u0026gt; element is an empty or \u0026ldquo;no-content\u0026rdquo; element, like \u0026lt;br\u0026gt;. It has no text as its content, and it has no closing tag. Remember that the contents of an HTML element will be text between an opening tag and a closing tag, such as a \u0026lt;p\u0026gt; element.\nBut in our case here, the src and alt in the image tag are not contents, they are HTML attributes for that element.\nAnd a \u0026lt;img\u0026gt; element is an inline element, you can put an image right in the middle of a piece of text. If the image is taller than the surrounding text, it will affect the text formatting.\nRelative and absolute links in HTML: the difference and which ones to use #\rFrom a site called placebear.com which has a lot of pictures of bears. If you want an image of a certain size, like 800 x 600 pixels, placebear.com will give you one, as long as you\u0026rsquo;re okay with it being a cat. To put this image in my testing.html file,\nInsert images from PLACEBEAR\rI\u0026rsquo;m going to use a \u0026lt;img\u0026gt; tag like this, and when the browser opens this HTML file, it\u0026rsquo;s going to go to the placebear.com server and fetch that image and put it on the page.\nBut what if I have an image file here on my computer, actually what if it\u0026rsquo;s in the same folder as my HTML file? Should I put it on a server somewhere and point to it using the image tag? It turns out no, instead I can just put the file name in the image tag.\nWhy does this work? Well, the browser looks at the src attribute here and doesn\u0026rsquo;t see a full URL. It doesn\u0026rsquo;t start with http:// or file:// or anything like that. Specifically, there\u0026rsquo;s no :// anywhere.\nAnd the browser has a rule for what to do when that happens. In HTML, this filename is seen as a type of HTML document. This is called a relative URL.\nCurrently, my HTML file is on my computer, and the browser sees it with a URL like file:///C:/Users/Mahmoud/Downloads/testing.html. So when that file points to the relative URL bear.jpg,\nit will look for that file in the same directory, even though I only have to type bear.jpg in the HTML. The browser will load the same URL as file:///C:/Users/Mahmoud/Downloads/bear.jpg.\nRelative Links\rWhen to choose relative or full links in HTML page development? #\rUsing relative URLs requires less typing, but that\u0026rsquo;s not the only advantage. If I want to send this web page to someone else,\nWell, the HTML itself doesn\u0026rsquo;t contain the bear image file. I have to send them the image file as well. But if I send this file to my friend, it won\u0026rsquo;t appear on his computer in a path called Users/Mahmoud/Downloads/.\nIf I have URLs in my HTML that relate to my computer, they won\u0026rsquo;t work on someone else\u0026rsquo;s computer.\nSo as a general rule, if you\u0026rsquo;re pointing to an image or link on a web server like placebear.com, it\u0026rsquo;s common to use a full URL like https://[placebear.com](https://placebear.com)/800/600. If you\u0026rsquo;re pointing to an image or other file that you\u0026rsquo;re exchanging with your HTML file, you should use relative URLs.\nBy the way, relative URLs are the reason why you can\u0026rsquo;t create a \u0026lt;a\u0026gt; link to Google by just typing google.com inside the href attribute of your HTML.\nAlthough google.com works if you type it directly into your browser, a URL without the :// is always considered a relative URL. So the browser will look at a file called google.com, which is usually not what you want.\nSo if you want to create a link to another site, you should put http:// or https:// in front of it.\nHTML Document Structure: The Basic Elements of Every HTML Document #\rWhat you’ve been writing in this lesson is actually what’s called “HTML snippets.” They’re pieces of HTML that your browser can display, but there are a few extra things you need to add to turn them into a complete HTML document, i.e. a web page.\nThe HTML you’ve written so far is like a few sentences in the middle of a story, but a story usually contains things like a title and an author, not just sentences. Likewise, there are a few things you need to add to your HTML document to make it complete.\nFirst, how does the browser know what type of document it is? Just by the filename extension? No, it’s more complicated than that. HTML has been around for many years, and there have been many different versions of HTML.\nWe specify the type of HTML we’re using by placing a DOCTYPE tag at the top of the file. It looks different from other text. In earlier versions of HTML, DOCTYPE tags were long and complicated.\nEventually, the engineers who designed HTML decided to simplify it down to the bare essentials. In modern HTML, the DOCTYPE tag looks like this:\n\u0026lt;!DOCTYPE html\u0026gt; You should write it exactly this way in every HTML document you write.\nWhat does the DOCTYPE tag do? It tells the browser that we want this document to be treated as modern HTML, rather than one of those old versions.\nThis isn\u0026rsquo;t a big deal for simple HTML, but it prevents problems when your HTML becomes more complex. Without the DOCTYPE tag, the browser will go into what\u0026rsquo;s called \u0026ldquo;compatibility mode,\u0026rdquo;\nwhere it tries to be more compatible with older forms of HTML, which is generally not something we want today. So putting the DOCTYPE tag in your documents is the right way to do it.\nHTML Structure: Head and Body Components for Perfect Design #\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Content here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Every HTML document consists of two parts. So far in these lessons, apart from the DOCTYPE tag, you have been working with the second of these parts, the body of the document. This is where the contents of the document are placed, such as paragraphs, images, lists, and other things that will appear on the screen to the user. The other part of the HTML document is called the head.\nWe put some important information about the document in the head, and both the head and body occur inside a single HTML element with an opening and a closing tag. Here are some elements that can appear in the head of an HTML file:\nThe title: This is the only part required in the head, and it tells the browser which page title to put on the tab that displays the document. We put the title inside a \u0026lt;title\u0026gt; element with an opening and a closing tag.\nHow to Validate HTML to Improve User Experience #\rThere are a lot of rules about how HTML should be written, similar to the rules of spelling and grammar in a language. But how can you really be sure that your HTML is spelled and grammatically correct?\nTo start, you can use your browser. If a page looks correct in your browser, does that mean it’s good? Not necessarily. It may have errors that your browser can handle, but some other browsers may not.\nIt’s important to make browsers work consistently with correct HTML, and it would be difficult to test everything on every browser out there.\nThankfully, there is a way to validate your HTML.\nThere are tools called HTML validators that will check everything from checking that tags are written correctly, to more complex rules, like whether list items need to be inside a list.\nThe most popular HTML validator is validator.w3.org, which is run by the W3C (World Wide Web Consortium). This organization writes the standards for HTML and other web components, so they\u0026rsquo;re well-positioned to tell you whether your HTML is valid or not.\nHTML Validation\rThere are three different ways you can use the validator service on a public web server: You can simply give it a URL and it will download and validate the HTML. But if you are working on an HTML file on your computer, you will need to use one of the other options: you can upload the file or copy the content from your editor and paste it directly into the validator.\nWhen you do this, you will get a message like this telling you if there are errors in your HTML. If there are errors, you will get a message like this: The \u0026lt;head\u0026gt; element is missing a required sub-element, \u0026lt;title\u0026gt;. Due to a typo in the title tag.\nThis is a very technical way of saying that a complete HTML document needs a \u0026lt;title\u0026gt; element inside a \u0026lt;head\u0026gt; element.\nHTML Validation Error\rWhen you get errors like this, fix them in your text editor, then paste or upload the new version and check it again. When it\u0026rsquo;s correct, you\u0026rsquo;ll get a nice green message like this, saying there were no errors or warnings to show.\nHTML Validation Success\rConclusion #\rFinally, learning HTML is an exciting step towards building new web development skills.\nFeel free to ask any questions or share your experience in the comments – we are here to help you on your journey to professionalism. What is the first question that comes to your mind about HTML that we haven’t covered yet? Share your thoughts with us!\nFrequently Asked Questions #\rHow long do I need to learn HTML? #\rYou can learn the basics of HTML in less than a week if you devote a few hours a day, while professionalism will require you to practice continuously.\nCan you learn HTML from your phone? #\rYes, you can learn HTML from your phone using code editing applications and tutorials available online.\nIs HTML easy? #\rYes, HTML is considered one of the easiest programming languages, and it is suitable for beginners because of its simplicity and clear rules.\nHow do I use HTML? #\rHTML is used to create the structure of web pages. You can start writing codes in any text editor and view them in a browser.\n","date":"2 November 2024","externalUrl":null,"permalink":"/blog/en/posts/beginner-guide-learn-html/","section":"Posts","summary":"Now that we know the basics of web development, it\u0026rsquo;s time to learn the basics of HTML, the backbone of the web development world.","title":"Beginner's Guide to Learn HTML: Your First Step in Web Development","type":"posts"},{"content":"To start your journey of learning web programming, it is essential to have a basic understanding of programming. In this guide, we will answer some of the questions that come to mind for any beginner who intends to enter the world of web development, the first of which is: What is web development?\nIntroduction to Web Development\rTogether we will learn about the concept of the web, then we will review the basic structuring language in this field, which is HTML. We will start by learning the basics of HTML, the language used to build and write web pages.\nWe will also discuss the concept of links or URLs, which represent addresses that point to other documents and sites on the Internet. Step by step, we will reach the stage of creating your first page on the web. But first of all, let\u0026rsquo;s start by understanding the basics of the web and where we should start in this broad field.\nWhat is Web Development? #\rIt is one of the most famous fields of programming and freelancing. The field of web development specializes in creating and programming websites, applications and web pages.\nWhat are the fields of web development? #\rFor you, learning web programming is one of the most important decisions you will make in your life if you are passionate about this field. Then you will have to choose from the three most important fields in web development:\nFront-End Development Back-End Development Fullstack Developer All of this will be explained in separate posts. In this article, we will just take a general idea about the field without going into many details.\nAnyone interested in this field should take a quick look at some basic concepts, including the definition of the web.\nWhat is the web: How does it work and how is it built? #\rWhat is web\rWe previously knew what web development is. But now we must define the web and also know its basic structure.\nThe web is a set of documents written in HTML, along with other resources such as images and videos, as well as programs and services that interact with each other to produce a distinctive web page.\nEverything you can access using your web browser is part of the web, and these resources are distributed across thousands of different computer systems called servers.\nThe web is a hypertext system, which means that web pages can contain links to other pages, and users can follow those links to get to the information they want.\nThat’s what you do every time you click on a link in a blog post or news article. We call these hyperlinks, short for “link.” The ability to navigate from one page to another is what makes the web special.\nThis ability is also used when you embed an image, video, or piece of code in a web page. Hypertext is a very important element, as all web technologies are built around the idea of ​​documents and data that can be linked to each other in a hypertext manner.\nThat’s why the web is called the “Spider Web” because pages, sites, and other resources are interconnected and interconnected like a spider’s web. How exactly does that work? That’s what we’ll learn in this article.\nHTML: The basic language for building web pages and why it matters. #\rWhy HTML is the foundation of every web page\rHTML is not a programming language, but without it the web as we know it today would not exist. It is the main structure for building a web page and the basis for planning and building any website.\nAs we will learn in the future about HTML tags, we will discover how important these tags are in shaping the web page and designing its main structure exactly as you want. It is the first language that we will learn as part of the basics of web development.\nHTML Evolution: How did it shape the future of web development? #\rThe HTML (HyperText Markup Language) language has witnessed many developments since its inception to become the main pillar in web development. Since its beginnings, when it provided a few tags that were only enough to format texts, insert links and images, and create a simple web page,\nuntil the latest version of it, HTML5 (version five), appeared, which brought many features such as LocalStorage, Canvas API, and SVG.\nThese features enabled web developers and designers to implement creative ideas that include exciting animated and interactive graphics directly on the browser. We do not know what the future holds for us!\nHow the Internet Communicates: Understanding the Relationship Between Browsers and Servers #\rHow Browsers and Servers Work Together\rWhat does a web server consist of? #\rMostly. These servers are basically computers, although not the ones you\u0026rsquo;re using now, that run programs that respond to browser requests.\nWhat does a server do? #\rA server\u0026rsquo;s job is to receive and respond to browser requests. When the server finds what the user has requested - whether it\u0026rsquo;s a page, an image, a video, or any other item - it successfully sends the requested content. If the requested item isn\u0026rsquo;t available, the server responds with a special code known as a \u0026ldquo;404\u0026rdquo; code to indicate that the content was not found.\nYour computer is likely connected to many servers on the Internet, including servers like YouTube or Blogger.\nOne of the amazing features of the web is that you can create links to files or documents hosted on different servers. For example, when you watch a video on the Fullstackee.com blog, your browser may play that video hosted on our YouTube channel.\nA single web page can contain a variety of videos, images, fonts, or code from your server or from external servers.\nHTTP vs HTTPS: The Difference and How It Affects Your Site\u0026rsquo;s Security #\rThe rules that govern these requests and responses are known as the HyperText Transfer Protocol (HTTP). Website addresses typically begin with \u0026ldquo;http\u0026rdquo; or \u0026ldquo;https,\u0026rdquo; which indicates how the browser communicates with the server.\nTo understand the difference between HTTP (HyperText Transfer Protocol) and HTTPS (HyperText Transfer Protocol Secure), we need to understand the pros and cons of each protocol.\nHTTP vs HTTPS\rHTTP Protocol: #\rAdvantages:\nSimplicity and speed Ease and speed of data transfer. No encryption, which is an advantage here because it leads to relatively fast data transfer. Disadvantages:\nInsecurity: Due to the lack of encryption, it is easy for anyone to intercept the connection between the browser and the server and read sensitive data such as passwords or financial information.\nHTTPS Protocol: #\rAdvantages:\nEncryption: SSL/TLS (Secure Sockets Layer/Transport Layer Security) is used to encrypt data during transmission between the browser and the server, providing greater security and protection for the data. Authentication: HTTPS ensures that the site the user is connecting to is the correct site and not a fraudulent site (through SSL certificates issued by trusted parties). Data integrity: HTTPS ensures that the data sent has not been modified during transmission. Disadvantages:\nSlightly slower than HTTP: Due to the encryption and decryption processes, HTTPS may be relatively slower than HTTP, although the difference in speed has become less noticeable as technology has evolved. Cost: Some sites need to purchase SSL certificates to enable HTTPS, which may add a cost. Through the advantages and disadvantages of each protocol, we find that the difference between HTTP and HTTPS is as follows:\nEncryption: HTTP does not use any type of encryption, while HTTPS relies on SSL/TLS to encrypt data. Security: HTTPS provides a high level of security against attacks such as eavesdropping or Man-in-the-Middle (MITM), while HTTP is vulnerable to such attacks. SSL Certificate: HTTP does not require a certificate, while HTTPS requires an SSL certificate issued by trusted parties to activate the protocol. Therefore, HTTPS should generally be used:\nOn sites that deal with sensitive data such as passwords, payment information, or personal information. On any site that needs to provide trust and security to users. It is generally preferable to use HTTPS to ensure the security of the connection even on simple sites. However, when creating a web page for the first time, you do not need to start a server or use HTTP. Instead, you can save the web page as a file on your computer and open it in your browser easily and simply.\nYour browser can view documents stored locally on your computer, as well as those on the Internet. Later, when you\u0026rsquo;re ready to share the web page with the world, you\u0026rsquo;ll upload it to a server.\nKey Web Programming Concepts: Structures, Formalism, and Interleaving #\rWeb programming is an exciting field to explore, introducing you to fundamental concepts and providing instant visual feedback. As you progress through the lessons, you can see everything materialize in your web browser. Here are some key concepts to focus on; understanding them will greatly enhance your programming skills.\nSyntax - Formalism - Nesting\rThe first concept is syntax ( Syntax ): #\rThis concept refers to the rules of language in programming. Just as natural languages ​​such as English or Arabic have grammatical rules, programming languages ​​such as HTML or PHP also follow certain rules.\nFor example, when we say \u0026ldquo;the dog ran in the park\u0026rdquo;, not \u0026ldquo;the park the dog ran\u0026rdquo;, because that is grammatically incorrect.\nThis concept also applies to programming. Every programming language has a set of syntax rules that determine how its code is structured.\nAs you learn a new programming language, you will gradually begin to acquire these rules, which may be presented explicitly or learned through practical examples to gain a deeper understanding of them.\nThe second concept is formalism ( Formalism ): #\rThis is often referred to as the \u0026ldquo;literal mindset\u0026rdquo; in programming. Computers understand code literally. Every word, letter, and symbol matters. Computers cannot infer your intentions; they execute the code exactly as you type it.\n\u0026lt;!-- Wrong --\u0026gt; \u0026lt;tilte\u0026gt;\u0026lt;/tilte\u0026gt; \u0026lt;!-- Correct --\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; For example, if you type the title tag incorrectly, the computer will not understand your intention and automatically correct it.\nSpelling accuracy is crucial, because programming often lacks autocorrect features.\nThe third concept is nesting ( Nesting ): #\rThis is the concept of how some pieces of code are placed inside other pieces in an organized way. We encounter this in human language as well.\nFor example, in a sentence like, “Mary said that Adam told her something about her friend,” we use nested quotes.\nYou will come across similar nesting patterns in programming languages, which may seem strange at first but are common and essential. We will refer to these cases in our upcoming lessons.\nFinally, remember that there are a wealth of resources and information available to help you on your programming journey. Many people around the world are learning to code with you.\nOne of the most valuable tools you have is documentation—the guides and tutorials available for the programming languages ​​you are studying.\nFor example, you can find comprehensive information about HTML on the Mozilla Developer Network (MDN) website . In addition to the resources provided by YouTube.\nThere is a wealth of help online that you can access through your favorite search engine, including the Fullstackee blog, where we will learn most of the programming languages ​​for web development in the upcoming lessons.\nChoosing Your Tools: The Difference Between Text and Code Editors #\rDifference between Text Editor and Codes\rHTML, like most programming languages, is written in text files. Let\u0026rsquo;s take a look at this.\nText files contain letters, numbers, symbols, and spaces. They do not contain any special formatting such as bold or italic text or even color for the text itself. They also do not contain any images, icons, or any visual elements.\nYou can think of text as anything you can type on an old typewriter. Although text may seem very limited, it is very flexible and can be used for countless purposes.\nWhen you look at HTML code, you think it is complex and full of strange things, but in fact it is first and foremost text. The appearance that a person sees when browsing a web page is a translation of those texts by the browser.\n","date":"1 November 2024","externalUrl":null,"permalink":"/blog/en/posts/web-development-101-basics-to-kickstart-your-journey/","section":"Posts","summary":"To start your journey of learning web programming, it is essential to have a basic understanding of programming.","title":"Web Development 101: Basics to Kickstart Your Journey","type":"posts"},{"content":"Certificate System (Laravel \u0026amp; Vue). convert data to pdf. like this Certificate PDF\nCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rCertificate Laravel \u0026amp; Vue\rRequirements #\rPHP ^8.2 Node 20.0.0 Packages #\rMPDF Languages #\rPHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rQuasar Backend Framework #\rLaravel Javascript Library #\rVue js Installation and Configuration #\rCopy .env.example file to .env file cp .env.example .env Find .env file in root directory and change the APP_URL param to your domain. Also, Configure the Database parameters inside .env file. php artisan optimize:clear php artisan migrate:fresh --seed php artisan serve npm install npm run build access account #\rOwner account Username: admin Password: Passwordsecret1@ Click here to visit Github Repo\n","date":"20 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/certificate-laravel-vue-fullstack-project/","section":"Portfolio","summary":"Certificate System (Laravel \u0026amp; Vue).","title":"Certificate Laravel \u0026 Vue - Fullstack Project","type":"portfolio"},{"content":"This section contains some of my projects.\n","date":"20 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/","section":"Portfolio","summary":"This section contains some of my projects.","title":"Portfolio","type":"portfolio"},{"content":"Certificate System. convert data to pdf. like this Certificate PDF\nCertificate PHP\rCertificate PHP\rCertificate PHP\rCertificate PHP\rCertificate PHP\rCertificate PHP\rCertificate PHP\rCertificate PHP\rRequirements #\rPHP ^8.2 Packages #\rMPDF Tools #\rAdminLTE Dashboard Languages #\rPHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rDataTables Chart JS Select2 JS SweetAlert FullCalendar Dom To Image JS Barcode JS PDF Read Excel File Installation and Configuration #\rEdit database.php file in folder main your_database_name = add DB name user = \u0026lsquo;root\u0026rsquo; is default pass = \u0026lsquo;your mysql password\u0026rsquo; $dsn = \u0026#34;mysql:host=localhost;dbname=your_database_name;\u0026#34;; $user = \u0026#34;root\u0026#34;; $pass = \u0026#34;\u0026#34;; after created database import certificate.sql file in your database panel. access account #\rusername: admin password: admin\nClick here to visit Github Repo\n","date":"18 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/certificate-php-fullstack-project/","section":"Portfolio","summary":"Certificate System.","title":"Certificate PHP - Fullstack Project","type":"portfolio"},{"content":"This system is the biggest thing I have worked on, but I did not finish it because I moved from using Vuetify to the Quasar framework because Vuetify did not support version 3 of Vue at that time. Currently, I am porting the system and using clean code, and I can then develop it.\nLogin #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rDashboard #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rUsers #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rSuppliers #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCustomers #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rLeads #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rTeams #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rProducts #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rPurchases #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rPurchase Returns #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rSales #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rSale Returns #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rQuotations #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rAdjustments #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rTransfers #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCategories #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rBrands #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCurrencies #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rUnits #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rWarehouses #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rExpenses #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rExpense Categories #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rRoles #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rSettings #\rCRM Laravel \u0026amp; Vue 2\rStages #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rPipelines #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rReasonss #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rSources #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCampaigns #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rDelegates #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCompanies #\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rCRM Laravel \u0026amp; Vue 2\rRequirements #\rPHP 7.4 Node 16.20 Tools #\rMaterio Vuetify Vue Dashboard Languages #\rPHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Backendend Framework #\rLaravel 8 Frontend Framework #\rVue 2 Vuetify PHP Packages #\rLaravel Sanctum Laravel maatwebsite/excel Laravel spatie/laravel-medialibra Javascript Library #\rvue-i18n vue-router vuex vuedraggable axios apexcharts jspdf vue-filepond vue-filepond @growthbunker/vueflags @growthbunker/vueflags @timbouc/vuetify-country-region-input Icon Library #\rmdi icons ","date":"10 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/crm-laravel-vue2-fullstack-project/","section":"Portfolio","summary":"This system is the biggest thing I have worked on, but I did not finish it because I moved from using Vuetify to the Quasar framework because Vuetify did not support version 3 of Vue at that time.","title":"CRM Laravel \u0026 Vue 2 - Fullstack Project","type":"portfolio"},{"content":"The Institute management system that I designed and developed with my friend Mohamed Tersawy using PHP Framework Laravel 8. with clean code.\nInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rInstitute Management Laravel System\rRequirements #\rPHP 7.4 Tools #\rAdminLTE Dashboard Languages #\rPHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Backendend Framework #\rLaravel Frontend Framework #\rBootstrap Javascript Library #\rDataTables Chart JS Select2 JS SweetAlert FullCalendar Dom To Image JS Barcode JS PDF Read Excel File Installation and Configuration #\rCopy .env.example file to .env file cp .env.example .env Find .env file in root directory and change the APP_URL param to your domain. Also, Configure the Database parameters inside .env file. php artisan route:clear php artisan migrate:fresh --seed php artisan serve access account #\rOwner account Username: owner Password: owner\nAdmin account Username: admin Password: admin\nTeacher account Username: teacher Password: teacher\nClick here to visit Github Repo\n","date":"9 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/institute-management-laravel-system-fullstack-project/","section":"Portfolio","summary":"The Institute management system that I designed and developed with my friend Mohamed Tersawy using PHP Framework Laravel 8.","title":"Institute Management Laravel System - Fullstack Project","type":"portfolio"},{"content":"The first crm program that I designed and developed using PHP without using any framework. Of course, the program has many problems, but it served the purpose for the company that requested it and was designed based on its requirements.\nCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rCRM PHP\rRequirements #\rPHP 7.4 Tools #\rAdminLTE Dashboard Languages #\rPHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rDataTables Chart JS Select2 JS SweetAlert FullCalendar Dom To Image JS Barcode JS PDF Read Excel File Click here to visit Github Repo\n","date":"8 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/crm-php-fullstack-project/","section":"Portfolio","summary":"The first crm program that I designed and developed using PHP without using any framework.","title":"CRM PHP - Fullstack Project","type":"portfolio"},{"content":"A small tool created to convert excel data to pdf.\nExcel To PDF\rExcel To PDF\rExcel To PDF\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Javascript Library #\rDom To Image JS Barcode JS PDF Read Excel File Demo\rClick here to visit Github Repo\n","date":"7 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/excel-to-pdf-frontend-project/","section":"Portfolio","summary":"A small tool created to convert excel data to pdf.","title":"Excel To PDF - Frontend Project","type":"portfolio"},{"content":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.\nNuxt Wind Dark Theme\rNuxt Wind Dark Theme\rNuxt Wind Light Theme\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rTailwindCSS Javascript Library #\rVue Nuxt Demo\rClick here to visit Github Repo\n","date":"6 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/nuxt-wind-theme-frontend-project/","section":"Portfolio","summary":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.","title":"Nuxt Wind Theme - Frontend Project","type":"portfolio"},{"content":"A Simple Shop Template.\nSimple Shop\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rCustom CSS Javascript Library #\rJQuery Icon Library #\rFont Awesome Demo\rClick here to visit Github Repo\n","date":"5 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/simple-shop-frontend-project/","section":"Portfolio","summary":"A Simple Shop Template.","title":"Simple Shop - Frontend Project","type":"portfolio"},{"content":"An 12-section landing page created for the purpose of selling the Natural product.\nSpiru Lin Landing Page\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rJQuery Demo\rClick here to visit Github Repo\n","date":"4 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/spiru-lin-landing-page-frontend-project/","section":"Portfolio","summary":"An 12-section landing page created for the purpose of selling the Natural product.","title":"Spiru Lin Landing Page - Frontend Project","type":"portfolio"},{"content":"An 4-section landing page created for the purpose of selling the Natural product.\nGoji Cream Landing Page\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rJQuery Demo\rClick here to visit Github Repo\n","date":"3 November 2023","externalUrl":null,"permalink":"/blog/en/portfolio/goji-cream-2-landing-page-frontend-project/","section":"Portfolio","summary":"An 4-section landing page created for the purpose of selling the Natural product.","title":"Goji Cream 2 Landing Page - Frontend Project","type":"portfolio"},{"content":"An 8-section landing page created for the purpose of selling the Natural products.\nWellness Landing Page\rRequirements #\rNode v16.20.0 Languages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rTailwindcss Javascript Library #\rVue Nuxt Demo\rClick here to visit Github Repo\n","date":"30 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/wellness-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of selling the Natural products.","title":"Wellness Landing Page - Frontend Project","type":"portfolio"},{"content":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Landing Page\rRequirements #\rNode v16.20.0 Languages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rTailwindcss Javascript Library #\rVue Nuxt Demo\rClick here to visit Github Repo\n","date":"29 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/golden-landing-page-frontend-project/","section":"Portfolio","summary":"An 7-section landing page created for the purpose of selling the Natural product.","title":"Golden Landing Page - Frontend Project","type":"portfolio"},{"content":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Wapp Design Landing Page\rRequirements #\rNode v16.20.0 Languages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rTailwindcss Javascript Library #\rVue Nuxt Demo\rClick here to visit Github Repo\n","date":"28 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/golden-wapp-design-landing-page-frontend-project/","section":"Portfolio","summary":"An 7-section landing page created for the purpose of selling the Natural product.","title":"Golden Wapp Design Landing Page - Frontend Project","type":"portfolio"},{"content":"An 8-section landing page created for the purpose of selling the Natural product.\nCaviarMask Landing Page\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rJQuery Icon Library #\rFont Awesome Demo\rClick here to visit Github Repo\n","date":"27 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/caviarmask-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of selling the Natural product.","title":"CaviarMask Landing Page - Frontend Project","type":"portfolio"},{"content":"An 8-section landing page created for the purpose of the exercise\nunicode Landing Page\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rJQuery Demo\rClick here to visit Github Repo\n","date":"26 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/unicode-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of the exercise","title":"Unicode Landing Page - Frontend Project","type":"portfolio"},{"content":"An 8-section landing page created for the purpose of the exercise\nPersonal Landing Page\rLanguages #\rHTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework #\rBootstrap Javascript Library #\rJQuery Demo\rClick here to visit Github Repo\n","date":"25 October 2023","externalUrl":null,"permalink":"/blog/en/portfolio/personal-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of the exercise","title":"Personal Landing Page - Frontend Project","type":"portfolio"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/tags/eloquent/","section":"Tags","summary":"","title":"Eloquent","type":"tags"},{"content":"\rHow to delete data from one-to-many relationship in Laravel?\rDelete data using the user form. #\rFirst go to routes/web.php file and add this route: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/posts/delete to find that the post has been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Delete data using the publication form. #\rFirst go to routes/web.php file and add this path: Route::get(\u0026#39;/posts/user/delete\u0026#39;, function () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $post-\u0026gt;delete(); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/user/delete. We see that the post has been successfully deleted. Rcord has deleted\rConclusion #\rThis article is a continuation of the entire series on Laravel Eloquent Relationships Relationships within Laravel. We have covered one-to-many relationship in a complete manner. We have not spared any information for you, and, God willing, we will learn in the following explanation about the relationship of many to many.\nYou can find the repo of this series on github here: ","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-delete-data-from-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How to delete data from one-to-many relationship in Laravel?","title":"How to delete data from one to many relationship in Laravel?","type":"posts"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/categories/laravel/","section":"Categories","summary":"","title":"Laravel","type":"categories"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships","type":"series"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships","type":"categories"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/tags/laravel10/","section":"Tags","summary":"","title":"Laravel10","type":"tags"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/tags/relationships/","section":"Tags","summary":"","title":"Relationships","type":"tags"},{"content":"","date":"20 August 2023","externalUrl":null,"permalink":"/blog/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\rHow to update one to many relationship in Laravel?\rUpdate data using the user form. #\rUsing push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. #\rUsing push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: ","date":"19 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-update-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How to update one to many relationship in Laravel?","title":"How to update a one-to-many relationship in Laravel?","type":"posts"},{"content":"\rHow do you retrieve data from one to many relationship in Laravel?\rWe saw how data is saved in multiple different ways within the database using the One-To-Many relationship in Laravel. But how to fetch data from the database? There are several ways in which data can be fetched from a database. These methods are divided into two basic methods:\nThrough the user User Model #\rThis method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. #\rWe go first to the routes/web.php file so that we can test these methods and make the following modifications. use App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:id,firstname,lastname,user_id\u0026#39;, \u0026#39;posts:title,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $users contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } ] } ] Here we see the difference between the two cases in the size of the data that was processed, and the matter increases if the size of the data is much larger than that. When selecting specific columns in relationships, you must choose foreignKey because without choosing it, the data will not be returned correctly from the database.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts\rBy using API Resources. #\rWe will create an API Resource for the Post form by executing this command in the command prompt. php artisan make:resource PostResource You go to the following path App/Http/Resources and we begin to modify each of the following: PostResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, ]; } } We first go to the routes/api.php file to add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34; } ] } ] We also see here that we fetch only the required data.\nThrough the post Post Model #\rThis method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. #\rWe first go to the routes/web.php file so that we can test these methods and add this new route. use App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user\u0026#39;, \u0026#39;user.profile\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user:username,id\u0026#39;, \u0026#39;user.profile:firstname,lastname,user_id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $posts contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } } ] When choosing specific columns in the relationships, you must choose id and you must choose the user relationship, because without you choosing it, the user will not return with the post.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts Private for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts\rBy using API Resources. #\rYou go to the following path App/Http/Resources and we start editing the file PostResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } We first go to the routes/web.php file to add a new route. use App\\Models\\Post; use App\\Http\\Resources\\PostResource; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $postsResource = PostResource::collection($posts); return response()-\u0026gt;json($postsResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/posts to see what results will appear. [ { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } } ] We also see here that we fetch only the required data.\nYou can find the repo of this series on github here: ","date":"18 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"How do you retrieve data from one to many relationship in Laravel?","title":"How can you retrieve data from a one-to-many relationship in Laravel?","type":"posts"},{"content":"\rHow to insert data in a one-to-many relationship in the database?\rAfter we created a One-To-Many relationship between both Users table and Posts table and added hasMany inside User Model, also we added the inverse relationship inside Post Model by adding belongsTo to it.\nThe time has come to find out how the data is saved in the database while we use this relationship. What are the methods used in this?\nThese methods are divided into three basic methods:\nWithout using function post. By using function post. By using the inverse relationship function user. 1.Without using function post. #\rHere there are two scenarios:\nFirst: Add only one post for the user. Second: Add more than one post for the user. First: Add only one post for the user. #\rWe first go to the routes/web.php file and add a new route so that we can test these methods. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); Post::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 1\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to user NoisyId No. 1. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; } ] } Second: Add more than one post for the user. #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); Post::insert( [ [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 2\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 2\u0026#39;, ], [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 3\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 3\u0026#39;, ], ] ); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null } ] } 2. By using function post. #\rHere also there are two scenarios: First: Add only one post for the user Second: Add more than one post for the user\nFirst: Add only one post for the user #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(3); $user-\u0026gt;posts()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 4\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 4\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to the user with ID No. 3. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34; } ] } Second: Add more than one post for the user #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); $user-\u0026gt;posts()-\u0026gt;createMany([ [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 5\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 5\u0026#39;, ], [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 6\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 6\u0026#39;, ] ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 1. In addition to these posts, there is another post that was added in a previous step, and therefore there should be 3 posts for this user. This is actually the data obtained from the database in the following response.\n{ \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; } ] } 3. By using the inverse relationship function user. #\rWe first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); $post = new Post([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 7\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 7\u0026#39;, ]); $post-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $post-\u0026gt;user-\u0026gt;username, \u0026#39;title\u0026#39; =\u0026gt; $post-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $post-\u0026gt;body, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that a post has been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34; } You can find the repo of this series on github here: ","date":"17 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-insert-data-in-one-to-many-relationship-in-database/","section":"Posts","summary":"How to insert data in a one-to-many relationship in the database?","title":"How to insert data in one to many relationship in database?","type":"posts"},{"content":"After we learned about the types of relationships within Laravel in the previous part. We discussed the first type of these relationships, which is the One-To-One relationship.\nToday we continue the series we started learning about Laravel Eloquent Relationships.\nWe are talking about the second type, which is called One-To-Many or hasMany.\nlaravel one to many relationship\rHow to create a One-To-Many relationship in Laravel? #\rHow to create a One-To-Many relationship in Laravel?\rThe One-To-Many relationship is one of the most important types of relationships inside Laravel Eloquent. We also learned in the previous lesson that it is the connection of a row from the first table to more than one row from the second table.\nAnd as a continuation of the practical application (content management system), which we started in the previous lesson. We create a One-To-One relationship between the user and the personal profile.\nToday we are going to create One-To-Many relationship between user and post. Each user can own one or more publications.\nWe create Post Model with its own table. php artisan make:model Post -m We go to this path database/migrations and modify the publications table by adding some columns as follows: Schema::create(\u0026#39;posts\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We modify the Post.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;, ]; We execute this command to update the database and add the Posts table. php artisan migrate We go to the User.php file and set the hasMany relationship. public function posts() { return $this-\u0026gt;hasMany(Post::class); } Let\u0026rsquo;s learn how hasMany works\n$this-\u0026gt;hasMany(Post::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); We go to the file Post.php and set the inverse relationship belongsTo. public function user() { return $this-\u0026gt;belongsTo(User::class); } We have explained belongsTo in this part of the previous article and we are explaining the One-To-One relationship.\nYou can find the repo of this series on github here: ","date":"16 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-create-a-one-to-many-relationship-in-laravel/","section":"Posts","summary":"After we learned about the types of relationships within Laravel in the previous part.","title":"How to create a One-To-Many relationship in Laravel?","type":"posts"},{"content":"\rHow to delete data from one to one relationship in Laravel?\rDelete data using User Model. #\rWe first go to the routes/web.php file and add this route: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/users/profile/delete to find that the profile have been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } Refresh the page twice to show that this user\u0026rsquo;s profile has been deleted.\nDelete data Using Profile Model. #\rWe first go to the routes/web.php file and add this route: Route::get(\u0026#39;/profiles/user/delete\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/profiles/user/delete. We see that both the user and the profile have been deleted successfully. Rcord has deleted\rConclusion #\rThis article is the start of a whole series on Laravel Eloquent Relationships - Relationships within Laravel. We have covered the One TO One relationship in a complete way. We did not spare you any information, and God willing, in the following explanation, we will learn about the One To Many relationship.\nYou can find the repo of this series on github here: ","date":"15 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-delete-data-from-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to delete data from one to one relationship in Laravel?","title":"How to delete data from one to one relationship in Laravel?","type":"posts"},{"content":"\rHow to update one to many relationship in Laravel?\rUpdate data using the user form. #\rUsing push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. #\rUsing push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: ","date":"14 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-update-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to update one to many relationship in Laravel?","title":"How to update a one-to-one relationship in Laravel?","type":"posts"},{"content":"\rHow can you retrieve data from a one-to-one relationship in Laravel?\rWe have seen how data is saved in several different ways in the database using the one-to-one relationship in Laravel. But how do we retrieve the data from the database? There are several ways to retrieve data from the database.\nThese methods can be divided into two main categories:\nDirect retrieval: This method involves directly querying the database for the data that you need. This is the most efficient way to retrieve data, but it can be difficult to use if you are not familiar with SQL.\nEloquent ORM: Laravel\u0026rsquo;s Eloquent ORM provides a more user-friendly way to retrieve data from the database. Eloquent ORM uses a set of methods to map database tables to objects in PHP. This makes it easy to retrieve data from the database without having to know SQL. In this tutorial, we will focus on using Eloquent ORM to retrieve data from the database.\nWhile retrieving users data: #\rWhile collecting user data, we will obtain their personal profiles. After that, the matter of displaying that data is divided into two forms, not a third. The type of application you are working on and the theme used will determine which form to use.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. #\rWe first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen choosing specific columns from relationships, you must always choose the foreign key column. Without choosing it, the data will not be returned correctly from the database.\nInside the views folder, we add another folder named users. Inside the users folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the users: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/users to see what results will appear. Users Table\rSecond: Depends on Api Routes. #\rWhat are API Resources?\nSimply, it is an intermediate layer between Eloquent and the API response, converting data obtained from the database into JSON with the ability to specify specific data without others or manipulate that data.\nWe will create an API Resource for users and profiles. Execute this command at the command prompt. php artisan make:resource UserResource php artisan make:resource ProfileResource Go to the following path: App\\Http\\Resources and edit both: The file ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } The file UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] We also see here that we have obtained the required data specified within the API Resources files only.\nWhile retrieving profiles data: #\rWhile obtaining profile data, we will obtain each user associated with those profiles. After that, the data can be displayed in two forms, not three. The type of application you are working on and the theme used will determine which form of data display is most appropriate.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. #\rWe first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen selecting specific columns in relationships, you must include the id field when choosing the user relationship. Otherwise, the user will not be returned with the profile.\nInside the views folder, we add another folder named profiles. Inside the profiles folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the profiles: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/profiles to see what results will appear. Profiles Table\rSecond: Depends on Api Routes. #\rGo to the following path: App\\Http\\Resources and edit the file ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/profiles to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] How to improve Eloquent queries in Laravel? #\rHow to improve Eloquent queries in Laravel?\rWhen dealing with a large database with a lot of data, it is important to consider performance. This means not only how long it takes to get the data, but also how many queries are executed per page.\nTo test the performance of your application, you can use a library called Laravel Debugbar. Debugbar will show you all the queries that are executed on each page, as well as how long each query takes to execute. This information can help you to identify performance bottlenecks and optimize your application.\nLet\u0026rsquo;s run this command. composer require barryvdh/laravel-debugbar --dev Make sure that APP_DEBUG=true is inside the .env file.\nThe difference between the two cases is as follows: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); We open the browser and go to the following URL: http://127.0.0.1:8000/users to see what results will appear in the library bar. (Lazy Loading) - Retrieve data without using with. laravel debugbar lazy loading\rAt the bottom of the page, we will now find a bar for the Laravel Debugbar library. When you click on it, we will find that it works with a lot of data. The thing that interests us here is the number of SQL queries on this page, and as shown, they are 4 queries.\nAnd we only retrieved 3 users, imagine with me if there are tens of thousands or millions of users inside this database, the time to load this page will be very slow because of the huge number of queries.\nThis is called the N+1 problem in Laravel. It is caused by lazy loading relationships, which means that the associated data is not loaded until it is actually needed. In this case, we are lazy loading the posts relationship for each user. This means that we are making a separate query for each user to get their profiles.\nIf there are 1000 users, we will make 1001 queries: 1 query to get the users, and 1000 queries to get their profiles. This is a waste of server resources and can make your application slow.\nTo solve the N+1 problem, you can eager load the relationships. This means that you will load the associated data when you first retrieve the data. In this case, you would use the with() method to eager load the profiles relationship. This would only make one query to get the users and their profiles.\nEager loading can improve the performance of your application by reducing the number of queries. It is a good practice to eager load relationships whenever possible.\n(Eager Loading) - Retrieve data using with. laravel debugbar eager loading\rAs you can see, by adding the with() method with the name of the relationship, each user\u0026rsquo;s data will be fetched with their own profile without the N+1 problem.\nSo the number of queries was reduced from 4 to 2 only. This will clearly have an effect if this database is of medium size or large. This is what is called eager loading.\nYou can find the repo of this series on github here: ","date":"13 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How can you retrieve data from a one-to-one relationship in Laravel?","title":"How can you retrieve data from a one-to-one relationship in Laravel?","type":"posts"},{"content":"\rHow to insert data in one to one relationship in database?\rAfter we created a one-to-one relationship between the users table and the profiles table, and added the hasOne() method to the User model, and the belongsTo() method to the Profile model, it\u0026rsquo;s time to find out how the data is saved in the database when we use this relationship. And what are the methods used for that?\nThese methods are divided into three main ways:\nWithout using method profile. By using method profile. By using the inverse method user. The best method to use depends on the specific needs of your application. If you only need to save the profile associated with the user, then the first method is the simplest option. If you need to get, update, or delete the profile, then the second method is a better option. If you need to get, update, or delete the user, then the third method is a better option.\n1. Without using method profile. #\rWe first go to the routes/web.php file and add a new route so that we can test these method. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We opened the browser and went to the link http://127.0.0.1:8000/one-to-one. To our satisfaction, the user had been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. By using method profile. #\rWe first go to the routes/web.php file and edit this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. By using the inverse method user. #\rWe first go to the routes/web.php file and update this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } You can find the repo of this series on github here: ","date":"12 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-insert-data-in-one-to-one-relationship-in-database/","section":"Posts","summary":"How to insert data in one to one relationship in database?","title":"How to insert data in one to one relationship in database?","type":"posts"},{"content":"\rHow to create a One-To-One relationship in Laravel?\rOne-to-One relationships are the simplest type of relationship offered by Laravel. They join two tables such that one row in the first table is associated with only one row in the other table, or the same table.\nlaravel one to one relationship\rTo see this in action, we\u0026rsquo;ll start by creating a content management system.\nTo see this in action, let\u0026rsquo;s start by creating a content management system. Let\u0026rsquo;s say each user has their own single profile. In some cases, you can store all profile information in the Users table. However, this is not ideal.\nIn our example, we want to create a separate table for personal profiles. This will allow us to transfer a profile from one user to another easily if we need to.\nBy default, the Users table exists in Laravel. The columns that it contains do not matter for this example.\nLet\u0026rsquo;s say we have a users table with the following columns: Schema::create(\u0026#39;users\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); We edit the User.php file. protected $fillable = [\u0026#39;username\u0026#39;]; We create Profile Model with its table. php artisan make:model Profile -m In a one-to-one relationship, we have the freedom to choose one of these two methods to establish the relationship:\nAdd user_id in the profiles table. Add profile_id in the users table. Usually, the column that joins the two tables is added to the second table. So, we will add it to the profiles table as follows:\nSchema::create(\u0026#39;profiles\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We edit the Profile.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; Let\u0026rsquo;s run this command to update the database. php artisan migrate Let\u0026rsquo;s go to the User.php file to define the relationship. public method profile() { return $this-\u0026gt;hasOne(Profile::class); } Let\u0026rsquo;s see how the hasOne() method works. This method is used to save the id of the related model in the foreign key column of the parent model.\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); Let\u0026rsquo;s go to the Profile.php file to define the inverse relationship. public method user() { return $this-\u0026gt;belongsTo(User::class); } Let\u0026rsquo;s find out how the belongsTo() method works. This method is used to save the id of the parent model in the primary key column of the related model.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); Let\u0026rsquo;s say you want to name the relationship something like admin, we need to add the foreignKey property to the relationship method.\npublic method admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } The foreignKey property is used to specify the name of the column in the child model that is used to reference the parent model.\nIf you do not add the foreignKey property to the relationship method when changing the relationship name, you will see the following error: Attempt to read property X on null\rYou can find the repo of this series on github here: ","date":"11 August 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-create-a-one-to-one-relationship-in-laravel/","section":"Posts","summary":"How to create a One-To-One relationship in Laravel?","title":"How to create a One-To-One relationship in Laravel?","type":"posts"},{"content":"Often, developers need to interact with databases. If you are using the Laravel framework, you should know about one of its most important features: Eloquent, an object-relational mapper (ORM) that makes this process simple and easy.\nLaravel Eloquent is one of the main features in the Laravel framework. This is due to its great support for defining, creating, and managing relationships between different tables. In this series of articles, I will show you how to create and use Eloquent relationships.\nIt is important to note that you can start using Eloquent without any prior knowledge of relationships.\nAs a professional programmer, it is necessary to understand the types of relationships. However, before that, you must ask yourself an important question: what are relationships in the first place?\nWhat are relationships in databases? #\rWhat are relationships in databases?\rWhen working with tables in a database that have relationships between them, we can describe these relationships as links between those tables. This helps you organize and structure data effortlessly, allowing for faster data reading and processing.\nWhat types of relationships are there in Laravel? #\rWhat types of relationships are there in Laravel?\rThere are three main types of relationships in databases that are commonly used in practice:\none-to-one: A one-to-one relationship means that one record in one table can only be related to one record in another table. For example, a customer table might have a one-to-one relationship with an address table. This means that each customer can only have one address, and each address can only be associated with one customer.\none-to-many: A one-to-many relationship means that one record in one table can be related to many records in another table. For example, an order table might have a one-to-many relationship with a product table. This means that one order can have many products, but each product can only be associated with one order.\nmany-to-many: A many-to-many relationship means that many records in one table can be related to many records in another table. For example, a student table might have a many-to-many relationship with a course table. This means that many students can take many courses, and many courses can be taken by many students.\nBesides these relationships, Laravel offers more relationships, namely:\nHas Many Through: This relationship allows you to relate a model to another model through a third model. For example, a user model might have a has many through relationship with a post model, where the third model is a category model. This means that a user can have many posts, where each post belongs to a category.\nPolymorphic Relations: This relationship allows you to relate a model to multiple other models of different types. For example, a comment model might have a polymorphic relationship with a model, where the model could be a blog post, a product, or a user. This means that a comment can be associated with any of these three types of models.\nMany-to-many Polymorphic: This relationship is a combination of the has many through and polymorphic relationships. It allows you to relate a model to many other models of different types, where the relationship is mediated by a third model. For example, a user model might have a many-to-many polymorphic relationship with a model, where the third model is a role model. This means that a user can have many roles, where each role could be a user, a product, or a blog post.\nThe number of relationships that we will explain is 6 types. We will build a simple content management system to explain all of those relationships.\nDo I need specific knowledge of Eloquent before reading this?\nIn response to your question about whether you need specific knowledge of Eloquent before reading this, I would say that it is not strictly necessary, but it would be helpful. The examples in the article do not use any complex Eloquent methods or techniques, but it would be helpful to have a basic understanding of how Eloquent works before reading the article.\nIf you are new to Laravel, I would recommend reading the Laravel documentation: https://laravel.com/docs/ before reading this article. The documentation provides a good overview of Eloquent and how it works.\nOnce you have a basic understanding of Eloquent, you should be able to follow the examples in the article without any problems. However, if you get stuck, you can always refer to the documentation for more help.\nIn the examples below, I have tried to explain everything as clearly as possible, without using too many tricky Eloquent methods and complex techniques. This means that prior knowledge is not strictly necessary. However, it is always best to learn the basics first and then pursue more complex topics such as relationships.\n","date":"10 August 2023","externalUrl":null,"permalink":"/blog/en/posts/what-types-of-relationships-are-there-in-laravel/","section":"Posts","summary":"Often, developers need to interact with databases.","title":"What types of relationships are there in Laravel?","type":"posts"},{"content":"","date":"1 May 2023","externalUrl":null,"permalink":"/blog/en/tags/full-stack/","section":"Tags","summary":"","title":"Full Stack","type":"tags"},{"content":"\rPreview #\rLaravel 10 Vue 3\rWhat is Laravel #\rLaravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details. What is Vue js! #\rVue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript. It Helps you efficiently develop user interfaces, be they simple or complex. What is Vite js! #\rVite is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\nA dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).\nA build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production. We conclude from the above that the most important thing that distinguishes vite is the speed at the start of the server, as well as making a bundle of files upon completion of the project.\rStep 1: Create New Laravel Project #\rcomposer create-project laravel/laravel laravel10-vue3 Step 2: How To Install Vue 3 on Laravel 10 #\rnpm install npm install npm create vue@latest Step 3: Install Plugin Vue From Vite #\rnpm i @vitejs/plugin-vue Step 4: Edit File vite.config.js #\r// vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); Step 5: Edit File app.js Inside Folder resources/js #\rimport {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) Step 6: Create File app.blade.php Inside Folder resources/views #\rMake sure to add the css file and javascript as shown and also the div with id=app\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Step 7: Create File App.vue Inside Folder resources/js #\r\u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Step 8: Edit File web.php Inside Folder routes #\r\u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); Step 9: Run PHP Local Server #\rphp artisan serve Step 10: Run Node Local Server #\rnpm run dev Go to the following link http://127.0.0.1:8000/ and you will find the following\rLaravel 10 Vue 3\rYou will find the repo for this project on github here [ ","date":"1 May 2023","externalUrl":null,"permalink":"/blog/en/posts/how-to-install-vue3-in-laravel10-with-vite/","section":"Posts","summary":"Preview #\rLaravel 10 Vue 3\rWhat is Laravel #\rLaravel is a web application framework with expressive, elegant syntax.","title":"How To Install Vue 3 In Laravel 10 With Vite","type":"posts"},{"content":"","date":"1 May 2023","externalUrl":null,"permalink":"/blog/en/tags/spa/","section":"Tags","summary":"","title":"Spa","type":"tags"},{"content":"","date":"1 May 2023","externalUrl":null,"permalink":"/blog/en/tags/vue3/","section":"Tags","summary":"","title":"Vue3","type":"tags"},{"content":"","date":"1 May 2023","externalUrl":null,"permalink":"/blog/en/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs","type":"categories"},{"content":"Hi, I\u0026rsquo;m Mahmoud Adel.\nWelcome to Laravel SPA: home of tutorials, videos and tips about Laravel framework. Started back in 2023 as a small personal blog, it grew into a hub of useful information for all levels.\nI also run a YouTube channel with the same name of Laravel SPA.\nYou can follow the latest Laravel tutorials on Twitter or by subscribing to our weekly newsletter.\nIf you want to get in touch, email dev.mahmoud.adel@gmail.com\n","externalUrl":null,"permalink":"/blog/en/about-us/","section":"Dev Mahmoud","summary":"Hi, I\u0026rsquo;m Mahmoud Adel.","title":"About Us","type":"page"},{"content":"","externalUrl":null,"permalink":"/blog/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"\rGo to form\r","externalUrl":null,"permalink":"/blog/en/contact-us/","section":"Dev Mahmoud","summary":"\rGo to form\r","title":"Contact Us","type":"page"},{"content":"At Laravel SPA, accessible from http://laravelspa.site, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Laravel SPA and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nThis Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in Laravel SPA. This policy is not applicable to any information collected offline or via channels other than this website.\nConsent #\rBy using our website, you hereby consent to our Privacy Policy and agree to its terms.\nInformation we collect #\rThe personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information. If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide. When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.\nHow we use your information #\rWe use the information we collect in various ways, including to:\nProvide, operate, and maintain our website\rImprove, personalize, and expand our website\rUnderstand and analyze how you use our website\rDevelop new products, services, features, and functionality\rCommunicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes\rSend you emails\rFind and prevent fraud\rLog Files #\rLaravel SPA follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services\u0026rsquo; analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users\u0026rsquo; movement on the website, and gathering demographic information.\nCookies and Web Beacons #\rLike any other website, Laravel SPA uses \u0026ldquo;cookies\u0026rdquo;. These cookies are used to store information including visitors\u0026rsquo; preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users\u0026rsquo; experience by customizing our web page content based on visitors\u0026rsquo; browser type and/or other information.\nGoogle DoubleClick DART Cookie #\rGoogle is one of a third-party vendor on our site. It also uses cookies, known as DART cookies, to serve ads to our site visitors based upon their visit to www.website.com and other sites on the internet. However, visitors may choose to decline the use of DART cookies by visiting the Google ad and content network Privacy Policy at the following URL – https://policies.google.com/technologies/ads\nOur Advertising Partners #\rSome of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.\nGoogle\rhttps://policies.google.com/technologies/ads\rAdvertising Partners Privacy Policies #\rYou may consult this list to find the Privacy Policy for each of the advertising partners of Laravel SPA.\nThird-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on Laravel SPA, which are sent directly to users\u0026rsquo; browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.\nNote that Laravel SPA has no access to or control over these cookies that are used by third-party advertisers.\nThird Party Privacy Policies #\rLaravel SPA\u0026rsquo;s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options.\nYou can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers\u0026rsquo; respective websites.\nCCPA Privacy Rights (Do Not Sell My Personal Information) #\rUnder the CCPA, among other rights, California consumers have the right to: Request that a business that collects a consumer\u0026rsquo;s personal data disclose the categories and specific pieces of personal data that a business has collected about consumers. Request that a business delete any personal data about the consumer that a business has collected. Request that a business that sells a consumer\u0026rsquo;s personal data, not sell the consumer\u0026rsquo;s personal data. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nGDPR Data Protection Rights #\rWe would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following: The right to access – You have the right to request copies of your personal data. We may charge you a small fee for this service. The right to rectification – You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete. The right to erasure – You have the right to request that we erase your personal data, under certain conditions. The right to restrict processing – You have the right to request that we restrict the processing of your personal data, under certain conditions. The right to object to processing – You have the right to object to our processing of your personal data, under certain conditions. The right to data portability – You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nChildren\u0026rsquo;s Information #\rAnother part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.\nLaravel SPA does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.\nChanges to This Privacy Policy #\rWe may update our Privacy Policy from time to time. Thus, we advise you to review this page periodically for any changes. We will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately, after they are posted on this page.\nContact Us #\rIf you have any questions or suggestions about our Privacy Policy, do not hesitate to contact us.\n","externalUrl":null,"permalink":"/blog/en/privacy-policy/","section":"Dev Mahmoud","summary":"At Laravel SPA, accessible from http://laravelspa.","title":"Privacy Policy","type":"page"},{"content":"Thank you for reading my blog!\nSign up for my emil newsletter or use this RSS feed to get notified of new blog posts.\n","externalUrl":null,"permalink":"/blog/en/subscribe/","section":"Dev Mahmoud","summary":"Thank you for reading my blog!","title":"Subscribe Me","type":"page"},{"content":"Welcome to Laravel SPA!\nThese terms and conditions outline the rules and regulations for the use of Laravel SPA\u0026rsquo;s Website, located at http://laravelspa.site.\nBy accessing this website we assume you accept these terms and conditions. Do not continue to use Laravel SPA if you do not agree to take all of the terms and conditions stated on this page.\nThe following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \u0026ldquo;Client\u0026rdquo;, \u0026ldquo;You\u0026rdquo; and \u0026ldquo;Your\u0026rdquo; refers to you, the person log on this website and compliant to the Company\u0026rsquo;s terms and conditions. \u0026ldquo;The Company\u0026rdquo;, \u0026ldquo;Ourselves\u0026rdquo;, \u0026ldquo;We\u0026rdquo;, \u0026ldquo;Our\u0026rdquo; and \u0026ldquo;Us\u0026rdquo;, refers to our Company. \u0026ldquo;Party\u0026rdquo;, \u0026ldquo;Parties\u0026rdquo;, or \u0026ldquo;Us\u0026rdquo;, refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client\u0026rsquo;s needs in respect of provision of the Company\u0026rsquo;s stated services, in accordance with and subject to, prevailing law of eg. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.\nCookies #\rWe employ the use of cookies. By accessing Laravel SPA, you agreed to use cookies in agreement with the Laravel SPA\u0026rsquo;s Privacy Policy.\nMost interactive websites use cookies to let us retrieve the user\u0026rsquo;s details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.\nLicense #\rUnless otherwise stated, Laravel SPA and/or its licensors own the intellectual property rights for all material on Laravel SPA. All intellectual property rights are reserved. You may access this from Laravel SPA for your own personal use subjected to restrictions set in these terms and conditions.\nYou must not:\nRepublish material from Laravel SPA\rSell, rent or sub-license material from Laravel SPA\rReproduce, duplicate or copy material from Laravel SPA\rRedistribute content from Laravel SPA\rParts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. Laravel SPA does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of Laravel SPA,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, Laravel SPA shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.\nLaravel SPA reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.\nYou warrant and represent that:\nYou are entitled to post the Comments on our website and have all necessary licenses and consents to do so;\rThe Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party;\rThe Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy\rThe Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity.\rYou hereby grant Laravel SPA a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.\nHyperlinking to our Content #\rThe following organizations may link to our Website without prior written approval:\nGovernment agencies;\rSearch engines;\rNews organizations;\rOnline directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and\rSystem wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site.\rThese organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nWe may consider and approve other link requests from the following types of organizations:\ncommonly-known consumer and/or business information sources;\rdot.com community sites;\rassociations or other groups representing charities;\ronline directory distributors;\rinternet portals;\raccounting, law and consulting firms; and\reducational institutions and trade associations.\rWe will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of Laravel SPA; and (d) the link is in the context of general resource information.\nThese organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nIf you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to Laravel SPA. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.\nApproved organizations may hyperlink to our Website as follows:\nBy use of our corporate name; or\rBy use of the uniform resource locator being linked to; or\rBy use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party's site.\rNo use of Laravel SPA\u0026rsquo;s logo or other artwork will be allowed for linking absent a trademark license agreement.\niFrames #\rWithout prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.\nContent Liability #\rWe shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.\nReservation of Rights #\rWe reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it\u0026rsquo;s linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.\nRemoval of links from our website #\rIf you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.\nWe do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.\nDisclaimer #\rTo the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:\nlimit or exclude our or your liability for death or personal injury;\rlimit or exclude our or your liability for fraud or fraudulent misrepresentation;\rlimit any of our or your liabilities in any way that is not permitted under applicable law; or\rexclude any of our or your liabilities that may not be excluded under applicable law.\rThe limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.\nAs long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.\n","externalUrl":null,"permalink":"/blog/en/terms-and-conditions/","section":"Dev Mahmoud","summary":"Welcome to Laravel SPA!","title":"Terms and Conditions","type":"page"}]